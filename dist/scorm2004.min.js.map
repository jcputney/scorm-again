{"version":3,"file":"scorm2004.min.js","sources":["../src/constants/api_constants.ts","../src/utilities.ts","../src/constants/enums.ts","../src/constants/default_settings.ts","../src/types/scheduled_commit.ts","../src/services/HttpService.ts","../src/services/EventService.ts","../src/services/SerializationService.ts","../src/exceptions.ts","../src/services/LoggingService.ts","../src/services/ErrorHandlingService.ts","../src/services/OfflineStorageService.ts","../src/cmi/common/base_cmi.ts","../src/constants/error_codes.ts","../src/cmi/common/array.ts","../src/BaseAPI.ts","../src/exceptions/scorm2004_exceptions.ts","../src/cmi/common/validation.ts","../src/cmi/scorm2004/validation.ts","../src/constants/regex.ts","../src/cmi/scorm2004/learner_preference.ts","../src/constants/response_constants.ts","../src/cmi/scorm2004/interactions.ts","../src/exceptions/scorm12_exceptions.ts","../src/cmi/scorm12/validation.ts","../src/services/ValidationService.ts","../src/cmi/common/score.ts","../src/cmi/scorm2004/score.ts","../src/cmi/scorm2004/comments.ts","../src/cmi/scorm2004/objectives.ts","../src/cmi/scorm2004/metadata.ts","../src/cmi/scorm2004/learner.ts","../src/cmi/scorm2004/status.ts","../src/cmi/scorm2004/session.ts","../src/cmi/scorm2004/content.ts","../src/cmi/scorm2004/settings.ts","../src/cmi/scorm2004/thresholds.ts","../src/cmi/scorm2004/cmi.ts","../src/cmi/scorm2004/adl.ts","../src/cmi/scorm2004/sequencing/sequencing_rules.ts","../src/cmi/scorm2004/sequencing/rollup_rules.ts","../src/constants/language_constants.ts","../src/cmi/scorm2004/sequencing/sequencing_controls.ts","../src/cmi/scorm2004/sequencing/activity.ts","../src/cmi/scorm2004/sequencing/activity_tree.ts","../src/cmi/scorm2004/sequencing/selection_randomization.ts","../src/cmi/scorm2004/sequencing/sequencing_process.ts","../src/cmi/scorm2004/sequencing/sequencing.ts","../src/Scorm2004API.ts"],"sourcesContent":["interface ErrorDescription {\n  basicMessage: string;\n  detailMessage: string;\n}\n\ninterface ErrorDescriptions {\n  [key: string]: ErrorDescription;\n}\n\ninterface ScormConstants {\n  cmi_children: string;\n  core_children: string;\n  score_children: string;\n  comments_children: string;\n  objectives_children: string;\n  correct_responses_children: string;\n  student_data_children: string;\n  student_preference_children: string;\n  interactions_children: string;\n  error_descriptions: ErrorDescriptions;\n}\n\ninterface AiccConstants extends ScormConstants {\n  student_demographics_children: string;\n  tries_children: string;\n  attempt_records_children: string;\n  paths_children: string;\n}\n\ninterface Scorm2004Constants {\n  cmi_children: string;\n  comments_children: string;\n  score_children: string;\n  objectives_children: string;\n  correct_responses_children: string;\n  student_data_children: string;\n  student_preference_children: string;\n  interactions_children: string;\n  adl_data_children: string;\n  error_descriptions: ErrorDescriptions;\n}\n\ninterface GlobalConstants {\n  SCORM_TRUE: string;\n  SCORM_FALSE: string;\n  STATE_NOT_INITIALIZED: number;\n  STATE_INITIALIZED: number;\n  STATE_TERMINATED: number;\n}\n\nexport const global_constants: GlobalConstants = {\n  SCORM_TRUE: \"true\",\n  SCORM_FALSE: \"false\",\n  STATE_NOT_INITIALIZED: 0,\n  STATE_INITIALIZED: 1,\n  STATE_TERMINATED: 2,\n};\n\nexport const scorm12_constants: ScormConstants = {\n  // Children lists\n  cmi_children:\n    \"core,suspend_data,launch_data,comments,objectives,student_data,student_preference,interactions\",\n  core_children:\n    \"student_id,student_name,lesson_location,credit,lesson_status,entry,score,total_time,lesson_mode,exit,session_time\",\n  score_children: \"raw,min,max\",\n  comments_children: \"content,location,time\",\n  objectives_children: \"id,score,status\",\n  correct_responses_children: \"pattern\",\n  student_data_children: \"mastery_score,max_time_allowed,time_limit_action\",\n  student_preference_children: \"audio,language,speed,text\",\n  interactions_children:\n    \"id,objectives,time,type,correct_responses,weighting,student_response,result,latency\",\n  error_descriptions: {\n    \"101\": {\n      basicMessage: \"General Exception\",\n      detailMessage: \"No specific error code exists to describe the error.\",\n    },\n    \"201\": {\n      basicMessage: \"Invalid argument error\",\n      detailMessage:\n        \"Indicates that an argument represents an invalid data model element or is otherwise incorrect.\",\n    },\n    \"202\": {\n      basicMessage: \"Element cannot have children\",\n      detailMessage:\n        'Indicates that LMSGetValue was called with a data model element name that ends in \"_children\" for a data model element that does not support the \"_children\" suffix.',\n    },\n    \"203\": {\n      basicMessage: \"Element not an array - cannot have count\",\n      detailMessage:\n        'Indicates that LMSGetValue was called with a data model element name that ends in \"_count\" for a data model element that does not support the \"_count\" suffix.',\n    },\n    \"301\": {\n      basicMessage: \"Not initialized\",\n      detailMessage: \"Indicates that an API call was made before the call to lmsInitialize.\",\n    },\n    \"401\": {\n      basicMessage: \"Not implemented error\",\n      detailMessage:\n        \"The data model element indicated in a call to LMSGetValue or LMSSetValue is valid, but was not implemented by this LMS. SCORM 1.2 defines a set of data model elements as being optional for an LMS to implement.\",\n    },\n    \"402\": {\n      basicMessage: \"Invalid set value, element is a keyword\",\n      detailMessage:\n        'Indicates that LMSSetValue was called on a data model element that represents a keyword (elements that end in \"_children\" and \"_count\").',\n    },\n    \"403\": {\n      basicMessage: \"Element is read only\",\n      detailMessage: \"LMSSetValue was called with a data model element that can only be read.\",\n    },\n    \"404\": {\n      basicMessage: \"Element is write only\",\n      detailMessage: \"LMSGetValue was called on a data model element that can only be written to.\",\n    },\n    \"405\": {\n      basicMessage: \"Incorrect Data Type\",\n      detailMessage:\n        \"LMSSetValue was called with a value that is not consistent with the data format of the supplied data model element.\",\n    },\n    \"407\": {\n      basicMessage: \"Element Value Out Of Range\",\n      detailMessage:\n        \"The numeric value supplied to a LMSSetValue call is outside of the numeric range allowed for the supplied data model element.\",\n    },\n    \"408\": {\n      basicMessage: \"Data Model Dependency Not Established\",\n      detailMessage:\n        \"Some data model elements cannot be set until another data model element was set. This error condition indicates that the prerequisite element was not set before the dependent element.\",\n    },\n  },\n};\nexport const aicc_constants: AiccConstants = {\n  ...scorm12_constants,\n  ...{\n    cmi_children:\n      \"core,suspend_data,launch_data,comments,objectives,student_data,student_preference,interactions,evaluation\",\n    student_preference_children:\n      \"audio,language,lesson_type,speed,text,text_color,text_location,text_size,video,windows\",\n    student_data_children: \"attempt_number,tries,mastery_score,max_time_allowed,time_limit_action\",\n    student_demographics_children:\n      \"city,class,company,country,experience,familiar_name,instructor_name,title,native_language,state,street_address,telephone,years_experience\",\n    tries_children: \"time,status,score\",\n    attempt_records_children: \"score,lesson_status\",\n    paths_children: \"location_id,date,time,status,why_left,time_in_element\",\n  },\n};\n\nexport const scorm2004_constants: Scorm2004Constants = {\n  // Children lists\n  cmi_children:\n    \"_version,comments_from_learner,comments_from_lms,completion_status,credit,entry,exit,interactions,launch_data,learner_id,learner_name,learner_preference,location,max_time_allowed,mode,objectives,progress_measure,scaled_passing_score,score,session_time,success_status,suspend_data,time_limit_action,total_time\",\n  comments_children: \"comment,timestamp,location\",\n  score_children: \"max,raw,scaled,min\",\n  objectives_children: \"progress_measure,completion_status,success_status,description,score,id\",\n  correct_responses_children: \"pattern\",\n  student_data_children: \"mastery_score,max_time_allowed,time_limit_action\",\n  student_preference_children: \"audio_level,audio_captioning,delivery_speed,language\",\n  interactions_children:\n    \"id,type,objectives,timestamp,correct_responses,weighting,learner_response,result,latency,description\",\n  adl_data_children: \"id,store\",\n  error_descriptions: {\n    \"0\": {\n      basicMessage: \"No Error\",\n      detailMessage: \"No error occurred, the previous API call was successful.\",\n    },\n    \"101\": {\n      basicMessage: \"General Exception\",\n      detailMessage: \"No specific error code exists to describe the error.\",\n    },\n    \"102\": {\n      basicMessage: \"General Initialization Failure\",\n      detailMessage: \"Call to Initialize failed for an unknown reason.\",\n    },\n    \"103\": {\n      basicMessage: \"Already Initialized\",\n      detailMessage: \"Call to Initialize failed because Initialize was already called.\",\n    },\n    \"104\": {\n      basicMessage: \"Content Instance Terminated\",\n      detailMessage: \"Call to Initialize failed because Terminate was already called.\",\n    },\n    \"111\": {\n      basicMessage: \"General Termination Failure\",\n      detailMessage: \"Call to Terminate failed for an unknown reason.\",\n    },\n    \"112\": {\n      basicMessage: \"Termination Before Initialization\",\n      detailMessage: \"Call to Terminate failed because it was made before the call to Initialize.\",\n    },\n    \"113\": {\n      basicMessage: \"Termination After Termination\",\n      detailMessage: \"Call to Terminate failed because Terminate was already called.\",\n    },\n    \"122\": {\n      basicMessage: \"Retrieve Data Before Initialization\",\n      detailMessage: \"Call to GetValue failed because it was made before the call to Initialize.\",\n    },\n    \"123\": {\n      basicMessage: \"Retrieve Data After Termination\",\n      detailMessage: \"Call to GetValue failed because it was made after the call to Terminate.\",\n    },\n    \"132\": {\n      basicMessage: \"Store Data Before Initialization\",\n      detailMessage: \"Call to SetValue failed because it was made before the call to Initialize.\",\n    },\n    \"133\": {\n      basicMessage: \"Store Data After Termination\",\n      detailMessage: \"Call to SetValue failed because it was made after the call to Terminate.\",\n    },\n    \"142\": {\n      basicMessage: \"Commit Before Initialization\",\n      detailMessage: \"Call to Commit failed because it was made before the call to Initialize.\",\n    },\n    \"143\": {\n      basicMessage: \"Commit After Termination\",\n      detailMessage: \"Call to Commit failed because it was made after the call to Terminate.\",\n    },\n    \"201\": {\n      basicMessage: \"General Argument Error\",\n      detailMessage:\n        \"An invalid argument was passed to an API method (usually indicates that Initialize, Commit or Terminate did not receive the expected empty string argument.\",\n    },\n    \"301\": {\n      basicMessage: \"General Get Failure\",\n      detailMessage:\n        \"Indicates a failed GetValue call where no other specific error code is applicable. Use GetDiagnostic for more information.\",\n    },\n    \"351\": {\n      basicMessage: \"General Set Failure\",\n      detailMessage:\n        \"Indicates a failed SetValue call where no other specific error code is applicable. Use GetDiagnostic for more information.\",\n    },\n    \"391\": {\n      basicMessage: \"General Commit Failure\",\n      detailMessage:\n        \"Indicates a failed Commit call where no other specific error code is applicable. Use GetDiagnostic for more information.\",\n    },\n    \"401\": {\n      basicMessage: \"Undefined Data Model Element\",\n      detailMessage:\n        \"The data model element name passed to GetValue or SetValue is not a valid SCORM data model element.\",\n    },\n    \"402\": {\n      basicMessage: \"Unimplemented Data Model Element\",\n      detailMessage:\n        \"The data model element indicated in a call to GetValue or SetValue is valid, but was not implemented by this LMS. In SCORM 2004, this error would indicate an LMS that is not fully SCORM conformant.\",\n    },\n    \"403\": {\n      basicMessage: \"Data Model Element Value Not Initialized\",\n      detailMessage:\n        \"Attempt to read a data model element that has not been initialized by the LMS or through a SetValue call. This error condition is often reached during normal execution of a SCO.\",\n    },\n    \"404\": {\n      basicMessage: \"Data Model Element Is Read Only\",\n      detailMessage: \"SetValue was called with a data model element that can only be read.\",\n    },\n    \"405\": {\n      basicMessage: \"Data Model Element Is Write Only\",\n      detailMessage: \"GetValue was called on a data model element that can only be written to.\",\n    },\n    \"406\": {\n      basicMessage: \"Data Model Element Type Mismatch\",\n      detailMessage:\n        \"SetValue was called with a value that is not consistent with the data format of the supplied data model element.\",\n    },\n    \"407\": {\n      basicMessage: \"Data Model Element Value Out Of Range\",\n      detailMessage:\n        \"The numeric value supplied to a SetValue call is outside of the numeric range allowed for the supplied data model element.\",\n    },\n    \"408\": {\n      basicMessage: \"Data Model Dependency Not Established\",\n      detailMessage:\n        \"Some data model elements cannot be set until another data model element was set. This error condition indicates that the prerequisite element was not set before the dependent element.\",\n    },\n  },\n};\n","/**\n * Constants for time conversion calculations.\n * These are used throughout the codebase for converting between different time formats.\n */\nexport const SECONDS_PER_SECOND = 1.0;\nexport const SECONDS_PER_MINUTE = 60;\nexport const SECONDS_PER_HOUR = 60 * SECONDS_PER_MINUTE;\nexport const SECONDS_PER_DAY = 24 * SECONDS_PER_HOUR;\n\ntype Designation = {\n  [key: string]: number;\n};\n\n/**\n * A record with string keys and unknown values.\n * This is a more type-safe alternative to using `any`.\n */\nexport type StringKeyMap = Record<string, unknown>;\n\nconst designations: Designation = {\n  D: SECONDS_PER_DAY,\n  H: SECONDS_PER_HOUR,\n  M: SECONDS_PER_MINUTE,\n  S: SECONDS_PER_SECOND,\n};\n\n/**\n * Converts a number of seconds to a formatted time string in HH:MM:SS format.\n * This function handles decimal seconds and ensures proper formatting with leading zeros.\n *\n * @param {number|null} totalSeconds - The total number of seconds to convert. If null or negative, returns \"00:00:00\".\n * @return {string} A formatted time string in HH:MM:SS format, with up to 2 decimal places for seconds if applicable.\n *\n * @example\n * // Returns \"01:30:45\"\n * getSecondsAsHHMMSS(5445);\n *\n * @example\n * // Returns \"00:00:30.5\"\n * getSecondsAsHHMMSS(30.5);\n *\n * @example\n * // Returns \"00:00:00\"\n * getSecondsAsHHMMSS(null);\n */\nexport const getSecondsAsHHMMSS = memoize((totalSeconds: number | null): string => {\n  // SCORM spec does not deal with negative durations, give zero back\n  if (!totalSeconds || totalSeconds <= 0) {\n    return \"00:00:00\";\n  }\n\n  const hours = Math.floor(totalSeconds / SECONDS_PER_HOUR);\n  const dateObj = new Date(totalSeconds * 1000);\n  const minutes = dateObj.getUTCMinutes();\n  // make sure we add any possible decimal value\n  const seconds = dateObj.getSeconds();\n  const ms = totalSeconds % 1.0;\n  let msStr = \"\";\n\n  if (countDecimals(ms) > 0) {\n    if (countDecimals(ms) > 2) {\n      msStr = ms.toFixed(2);\n    } else {\n      msStr = String(ms);\n    }\n\n    msStr = \".\" + msStr.split(\".\")[1];\n  }\n\n  return (hours + \":\" + minutes + \":\" + seconds).replace(/\\b\\d\\b/g, \"0$&\") + msStr;\n});\n\n/**\n * Converts a number of seconds to an ISO 8601 duration string (e.g., \"PT1H30M45S\").\n * This function handles the complexity of formatting according to the ISO 8601 standard,\n * including the proper placement of the \"T\" separator for time components.\n *\n * @param {number|null} seconds - The number of seconds to convert. If null or negative, returns \"PT0S\".\n * @return {string} An ISO 8601 formatted duration string.\n *\n * @example\n * // Returns \"PT1H30M45S\" (1 hour, 30 minutes, 45 seconds)\n * getSecondsAsISODuration(5445);\n *\n * @example\n * // Returns \"PT30.5S\" (30.5 seconds)\n * getSecondsAsISODuration(30.5);\n *\n * @example\n * // Returns \"P1DT1H\" (1 day, 1 hour)\n * getSecondsAsISODuration(90000);\n *\n * @example\n * // Returns \"PT0S\" (0 seconds)\n * getSecondsAsISODuration(null);\n */\nexport const getSecondsAsISODuration = memoize((seconds: number | null): string => {\n  // SCORM spec does not deal with negative durations, give zero back\n  if (!seconds || seconds <= 0) {\n    return \"PT0S\";\n  }\n\n  let duration = \"P\";\n  let remainder = seconds;\n\n  // Convert to array of entries and use functional methods\n  const designationEntries = Object.entries(designations);\n\n  // Process each time designation\n  designationEntries.forEach(([designationsKey, current_seconds]) => {\n    let value = Math.floor(remainder / current_seconds);\n    remainder = remainder % current_seconds;\n\n    // Limit decimal places\n    if (countDecimals(remainder) > 2) {\n      remainder = Number(Number(remainder).toFixed(2));\n    }\n\n    // If we have anything left in the remainder, and we're currently adding\n    // seconds to the duration, go ahead and add the decimal to the seconds\n    if (designationsKey === \"S\" && remainder > 0) {\n      value += remainder;\n    }\n\n    if (value) {\n      // Add the 'T' separator for time components if needed\n      const needsTimeSeparator =\n        (duration.indexOf(\"D\") > 0 || [\"H\", \"M\", \"S\"].includes(designationsKey)) &&\n        duration.indexOf(\"T\") === -1;\n\n      if (needsTimeSeparator) {\n        duration += \"T\";\n      }\n\n      duration += `${value}${designationsKey}`;\n    }\n  });\n\n  return duration;\n});\n\n/**\n * Converts a time string in HH:MM:SS format to the equivalent number of seconds.\n * This function is flexible and can handle various input types, converting them to strings as needed.\n *\n * @param {string|number|boolean|null} timeString - The time string to convert, typically in HH:MM:SS format.\n *                                                 If not a string, it will be converted to one.\n *                                                 If null, invalid, or doesn't match the regex, returns 0.\n * @param {RegExp|string} timeRegex - The regular expression used to validate the time string format.\n *                                    If a string is provided, it will be converted to a RegExp.\n * @return {number} The total number of seconds represented by the time string.\n *\n * @example\n * // Returns 5445 (1 hour, 30 minutes, 45 seconds)\n * getTimeAsSeconds(\"01:30:45\", /^(\\d+):(\\d+):(\\d+)$/);\n *\n * @example\n * // Returns 0 (invalid format)\n * getTimeAsSeconds(\"invalid\", /^(\\d+):(\\d+):(\\d+)$/);\n *\n * @example\n * // Returns 30 (converts number to string \"30\" then parses as 0:0:30)\n * getTimeAsSeconds(30, /^(\\d+):(\\d+):(\\d+)$/);\n */\nexport const getTimeAsSeconds = memoize(\n  (timeString: string | number | boolean | null, timeRegex: RegExp | string): number => {\n    if (typeof timeString === \"number\" || typeof timeString === \"boolean\") {\n      timeString = String(timeString);\n    }\n    if (typeof timeRegex === \"string\") {\n      timeRegex = new RegExp(timeRegex);\n    }\n    if (!timeString) {\n      return 0;\n    }\n\n    if (!timeString.match(timeRegex)) {\n      // If the string represents a simple number, treat it as seconds\n      if (/^\\d+(?:\\.\\d+)?$/.test(timeString)) {\n        return Number(timeString);\n      }\n      return 0;\n    }\n\n    const parts = timeString.split(\":\");\n    const hours = Number(parts[0]);\n    const minutes = Number(parts[1]);\n    const seconds = Number(parts[2]);\n    return hours * 3600 + minutes * 60 + seconds;\n  },\n  // Custom key function to handle RegExp objects which can't be stringified\n  (timeString, timeRegex) => {\n    const timeStr = typeof timeString === \"string\" ? timeString : String(timeString ?? \"\");\n    const regexStr = typeof timeRegex === \"string\" ? timeRegex : (timeRegex?.toString() ?? \"\");\n    return `${timeStr}:${regexStr}`;\n  },\n);\n\n/**\n * Converts an ISO 8601 duration string (e.g., \"PT1H30M45S\") to the equivalent number of seconds.\n * This function parses the duration string using a regular expression to extract years, days,\n * hours, minutes, and seconds components.\n *\n * @param {string|null} duration - The ISO 8601 duration string to convert.\n *                                If null, invalid, or doesn't match the regex, returns 0.\n * @param {RegExp|string} durationRegex - The regular expression used to parse the duration components.\n *                                       If a string is provided, it will be converted to a RegExp.\n *                                       The regex should have capture groups for years, days, hours, minutes, and seconds.\n * @return {number} The total number of seconds represented by the duration string.\n *\n * @example\n * // Returns 5445 (1 hour, 30 minutes, 45 seconds)\n * getDurationAsSeconds(\"PT1H30M45S\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n *\n * @example\n * // Returns 90000 (1 day, 1 hour)\n * getDurationAsSeconds(\"P1DT1H\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n *\n * @example\n * // Returns 0 (invalid format)\n * getDurationAsSeconds(\"invalid\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n */\nexport const getDurationAsSeconds = memoize(\n  (duration: string | null, durationRegex: RegExp | string): number => {\n    if (typeof durationRegex === \"string\") {\n      durationRegex = new RegExp(durationRegex);\n    }\n\n    if (!duration || !duration?.match?.(durationRegex)) {\n      return 0;\n    }\n\n    const [, years, _, , days, hours, minutes, seconds] =\n      new RegExp(durationRegex).exec?.(duration) ?? [];\n    let result = 0.0;\n    result += Number(seconds) || 0.0;\n    result += Number(minutes) * 60.0 || 0.0;\n    result += Number(hours) * 3600.0 || 0.0;\n    result += Number(days) * (60 * 60 * 24.0) || 0.0;\n    result += Number(years) * (60 * 60 * 24 * 365.0) || 0.0;\n    return result;\n  },\n  // Custom key function to handle RegExp objects which can't be stringified\n  (duration, durationRegex) => {\n    const durationStr = duration ?? \"\";\n    const regexStr =\n      typeof durationRegex === \"string\" ? durationRegex : (durationRegex?.toString() ?? \"\");\n    return `${durationStr}:${regexStr}`;\n  },\n);\n\n/**\n * Adds together two ISO 8601 duration strings and returns the result as a new ISO 8601 duration string.\n * This function works by converting both durations to seconds, adding them together, and then\n * converting the result back to an ISO 8601 duration string.\n *\n * @param {string} first - The first ISO 8601 duration string.\n * @param {string} second - The second ISO 8601 duration string.\n * @param {RegExp|string} durationRegex - The regular expression used to parse the duration components.\n *                                       If a string is provided, it will be converted to a RegExp.\n * @return {string} A new ISO 8601 duration string representing the sum of the two input durations.\n *\n * @example\n * // Returns \"PT2H\" (1 hour + 1 hour = 2 hours)\n * addTwoDurations(\"PT1H\", \"PT1H\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n *\n * @example\n * // Returns \"PT1H30M\" (1 hour + 30 minutes = 1 hour and 30 minutes)\n * addTwoDurations(\"PT1H\", \"PT30M\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n *\n * @example\n * // Returns \"P1DT1H30M\" (1 day + 1 hour and 30 minutes = 1 day, 1 hour, and 30 minutes)\n * addTwoDurations(\"P1D\", \"PT1H30M\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n */\nexport function addTwoDurations(\n  first: string,\n  second: string,\n  durationRegex: RegExp | string,\n): string {\n  const regex: RegExp =\n    typeof durationRegex === \"string\" ? new RegExp(durationRegex) : durationRegex;\n  return getSecondsAsISODuration(\n    getDurationAsSeconds(first, regex) + getDurationAsSeconds(second, regex),\n  );\n}\n\n/**\n * Adds together two time strings in HH:MM:SS format and returns the result as a new time string.\n * This function works by converting both time strings to seconds, adding them together, and then\n * converting the result back to an HH:MM:SS format.\n *\n * @param {string} first - The first time string in HH:MM:SS format.\n * @param {string} second - The second time string in HH:MM:SS format.\n * @param {RegExp|string} timeRegex - The regular expression used to validate and parse the time strings.\n *                                   If a string is provided, it will be converted to a RegExp.\n * @return {string} A new time string in HH:MM:SS format representing the sum of the two input times.\n *\n * @example\n * // Returns \"02:00:00\" (1 hour + 1 hour = 2 hours)\n * addHHMMSSTimeStrings(\"01:00:00\", \"01:00:00\", /^(\\d+):(\\d+):(\\d+)$/);\n *\n * @example\n * // Returns \"01:30:00\" (1 hour + 30 minutes = 1 hour and 30 minutes)\n * addHHMMSSTimeStrings(\"01:00:00\", \"00:30:00\", /^(\\d+):(\\d+):(\\d+)$/);\n *\n * @example\n * // Returns \"01:30:45\" (1 hour + 30 minutes and 45 seconds = 1 hour, 30 minutes, and 45 seconds)\n * addHHMMSSTimeStrings(\"01:00:00\", \"00:30:45\", /^(\\d+):(\\d+):(\\d+)$/);\n */\nexport function addHHMMSSTimeStrings(\n  first: string,\n  second: string,\n  timeRegex: RegExp | string,\n): string {\n  if (typeof timeRegex === \"string\") {\n    timeRegex = new RegExp(timeRegex);\n  }\n  return getSecondsAsHHMMSS(\n    getTimeAsSeconds(first, timeRegex) + getTimeAsSeconds(second, timeRegex),\n  );\n}\n\n/**\n * Flattens a nested JSON object into a flat object with dot notation for nested properties.\n * This function recursively traverses the object and creates new keys using dot notation\n * for nested objects and bracket notation for arrays.\n *\n * @param {StringKeyMap} data - The nested object to flatten.\n * @return {StringKeyMap} A flattened object where nested properties are represented with dot notation.\n *\n * @example\n * // Returns { \"a\": 1, \"b.c\": 2, \"b.d\": 3, \"e[0]\": 4, \"e[1]\": 5 }\n * flatten({\n *   a: 1,\n *   b: { c: 2, d: 3 },\n *   e: [4, 5]\n * });\n *\n * @example\n * // Returns { \"\": [] } for an empty array\n * flatten([]);\n *\n * @example\n * // Returns { \"\": {} } for an empty object\n * flatten({});\n */\nexport function flatten(data: StringKeyMap): StringKeyMap {\n  const result: StringKeyMap = {};\n\n  /**\n   * Recurse through the object\n   * @param {*} cur\n   * @param {*} prop\n   */\n  function recurse(cur: any, prop: any) {\n    if (Object(cur) !== cur) {\n      result[prop] = cur;\n    } else if (Array.isArray(cur)) {\n      // Use forEach instead of for loop\n      cur.forEach((item, i) => {\n        recurse(item, `${prop}[${i}]`);\n      });\n\n      if (cur.length === 0) result[prop] = [];\n    } else {\n      const keys = Object.keys(cur).filter((p) => Object.prototype.hasOwnProperty.call(cur, p));\n\n      const isEmpty = keys.length === 0;\n\n      // Use forEach instead of for...in loop\n      keys.forEach((p) => {\n        recurse(cur[p], prop ? `${prop}.${p}` : p);\n      });\n\n      if (isEmpty && prop) result[prop] = {};\n    }\n  }\n\n  recurse(data, \"\");\n  return result;\n}\n\n/**\n * Converts a flattened object back into a nested object structure.\n * This function is the inverse of `flatten()`. It parses dot notation and bracket notation\n * in property names to recreate the original nested structure.\n *\n * @param {StringKeyMap} data - The flattened object to unflatten.\n * @return {object} A nested object recreated from the flattened structure.\n *\n * @example\n * // Returns { a: 1, b: { c: 2, d: 3 }, e: [4, 5] }\n * unflatten({\n *   \"a\": 1,\n *   \"b.c\": 2,\n *   \"b.d\": 3,\n *   \"e[0]\": 4,\n *   \"e[1]\": 5\n * });\n *\n * @example\n * // Handles array indices correctly\n * unflatten({\n *   \"users[0].name\": \"John\",\n *   \"users[0].email\": \"john@example.com\",\n *   \"users[1].name\": \"Jane\",\n *   \"users[1].email\": \"jane@example.com\"\n * });\n * // Returns:\n * // {\n * //   users: [\n * //     { name: \"John\", email: \"john@example.com\" },\n * //     { name: \"Jane\", email: \"jane@example.com\" }\n * //   ]\n * // }\n */\nexport function unflatten(data: StringKeyMap): object {\n  \"use strict\";\n\n  if (Object(data) !== data || Array.isArray(data)) return data;\n  const result: StringKeyMap = {};\n\n  // Regex pattern for parsing property paths\n  const pattern = /\\.?([^.[\\]]+)|\\[(\\d+)]/g;\n\n  // Get all own properties and process them\n  Object.keys(data)\n    .filter((p) => Object.prototype.hasOwnProperty.call(data, p))\n    .forEach((p) => {\n      let cur = result;\n      let prop = \"\";\n\n      // Create a new regex instance for each property to reset lastIndex\n      const regex = new RegExp(pattern);\n\n      // Process all matches in the property path\n      Array.from({ length: p.match(new RegExp(pattern, \"g\"))?.length ?? 0 }, () =>\n        regex.exec(p),\n      ).forEach((m) => {\n        if (m) {\n          // Create array or object as needed\n          cur = (cur[prop] ?? (cur[prop] = m[2] ? [] : ({} as StringKeyMap))) as StringKeyMap;\n          prop = m[2] || m[1] || \"\";\n        }\n      });\n\n      cur[prop] = data[p];\n    });\n\n  return (result[\"\"] ?? result) as object;\n}\n\n/**\n * Counts the number of decimal places in a number.\n * This function handles both integer and floating-point numbers.\n *\n * @param {number} num - The number to analyze.\n * @return {number} The number of decimal places. Returns 0 for integers or if the number doesn't have a decimal point.\n *\n * @example\n * // Returns 0\n * countDecimals(42);\n *\n * @example\n * // Returns 2\n * countDecimals(3.14);\n *\n * @example\n * // Returns 5\n * countDecimals(1.23456);\n */\nexport function countDecimals(num: number): number {\n  if (Math.floor(num) === num || String(num)?.indexOf?.(\".\") < 0) return 0;\n  const parts = num.toString().split(\".\")?.[1];\n  return parts?.length ?? 0;\n}\n\n/**\n * Formats SCORM messages for consistent and readable logging.\n * This function pads the function name and CMI element to create aligned log messages\n * that are easier to read in log files or console output.\n *\n * @param {string} functionName - The name of the function that generated the message.\n * @param {string} message - The message content to be logged.\n * @param {string} [CMIElement] - Optional. The CMI element related to the message.\n * @return {string} A formatted message string with consistent padding.\n *\n * @example\n * // Returns \"initialize          : Successfully initialized\"\n * formatMessage(\"initialize\", \"Successfully initialized\");\n *\n * @example\n * // Returns \"getValue            : cmi.core.student_id                                             : 12345\"\n * formatMessage(\"getValue\", \"12345\", \"cmi.core.student_id\");\n *\n * @example\n * // Returns \"setValue            : cmi.core.lesson_status                                          : completed\"\n * formatMessage(\"setValue\", \"completed\", \"cmi.core.lesson_status\");\n */\nexport function formatMessage(functionName: string, message: string, CMIElement?: string): string {\n  const baseLength = 20;\n\n  // Use string padding instead of loops\n  const paddedFunction = functionName.padEnd(baseLength);\n  let messageString = `${paddedFunction}: `;\n\n  if (CMIElement) {\n    const CMIElementBaseLength = 70;\n    // Add CMIElement and pad to the required length\n    messageString += CMIElement;\n    messageString = messageString.padEnd(CMIElementBaseLength);\n  }\n\n  // Add the message (or empty string if null/undefined)\n  messageString += message ?? \"\";\n\n  return messageString;\n}\n\n/**\n * Checks if a string contains a specific pattern using regular expression matching.\n * This function is a wrapper around JavaScript's String.match() method that handles\n * null/undefined values gracefully.\n *\n * @param {string} str - The string to search within. If null or undefined, returns false.\n * @param {string} tester - The pattern to search for. Can be a regular expression pattern.\n * @return {boolean} True if the pattern is found in the string, false otherwise.\n *\n * @example\n * // Returns true\n * stringMatches(\"Hello, world!\", \"world\");\n *\n * @example\n * // Returns true\n * stringMatches(\"The quick brown fox\", \"\\\\w+\\\\s+\\\\w+\");\n *\n * @example\n * // Returns false\n * stringMatches(\"Hello, world!\", \"universe\");\n *\n * @example\n * // Returns false (handles null gracefully)\n * stringMatches(null, \"test\");\n */\nexport function stringMatches(str: string | null | undefined, tester: string): boolean {\n  if (typeof str !== \"string\") {\n    return false;\n  }\n  return new RegExp(tester).test(str);\n}\n\n/**\n * Creates a memoized (cached) version of a function for performance optimization.\n * This function caches the results of previous calls with the same arguments,\n * avoiding redundant calculations for repeated calls with the same input.\n *\n * @template T - The type of the function to memoize\n * @param {T} fn - The function to memoize\n * @param {Function} [keyFn] - Optional function to generate a custom cache key.\n *                           Useful for functions with complex arguments that can't be serialized.\n * @return {T} A memoized version of the input function with the same signature\n *\n * @example\n * // Basic usage with a simple function\n * const memoizedAdd = memoize((a, b) => {\n *   console.log('Calculating...');\n *   return a + b;\n * });\n *\n * memoizedAdd(1, 2); // Logs \"Calculating...\" and returns 3\n * memoizedAdd(1, 2); // Returns 3 without logging (uses cached result)\n *\n * @example\n * // Using a custom key function for objects that can't be serialized\n * const memoizedProcessUser = memoize(\n *   (user) => {\n *     console.log('Processing user...');\n *     return { ...user, processed: true };\n *   },\n *   (user) => user.id // Use user.id as the cache key\n * );\n *\n * memoizedProcessUser({ id: 123, name: 'John' }); // Logs and processes\n * memoizedProcessUser({ id: 123, name: 'John' }); // Uses cached result\n */\nexport function memoize<T extends (...args: any[]) => any>(\n  fn: T,\n  keyFn?: (...args: Parameters<T>) => string,\n): T {\n  const cache = new Map<string, ReturnType<T>>();\n\n  return ((...args: Parameters<T>): ReturnType<T> => {\n    const key = keyFn ? keyFn(...args) : JSON.stringify(args);\n\n    return cache.has(key)\n      ? (cache.get(key) as ReturnType<T>)\n      : (() => {\n          const result = fn(...args);\n          cache.set(key, result);\n          return result;\n        })();\n  }) as T;\n}\n","// Using plain objects instead of enums for better compatibility with strip-only mode\n// This approach avoids TypeScript enum runtime code while maintaining the same API\n\n// NAVBoolean values\nexport const NAVBoolean = {\n  UNKNOWN: \"unknown\",\n  TRUE: \"true\",\n  FALSE: \"false\",\n};\n\n// Type for NAVBoolean values\nexport type NAVBoolean = (typeof NAVBoolean)[keyof typeof NAVBoolean];\n\n// SuccessStatus values\nexport const SuccessStatus = {\n  PASSED: \"passed\",\n  FAILED: \"failed\",\n  UNKNOWN: \"unknown\",\n};\n\n// Type for SuccessStatus values\nexport type SuccessStatus = (typeof SuccessStatus)[keyof typeof SuccessStatus];\n\n// CompletionStatus values\nexport const CompletionStatus = {\n  COMPLETED: \"completed\",\n  INCOMPLETE: \"incomplete\",\n  UNKNOWN: \"unknown\",\n};\n\n// Type for CompletionStatus values\nexport type CompletionStatus = (typeof CompletionStatus)[keyof typeof CompletionStatus];\n\n// LogLevelEnum values\nexport const LogLevelEnum = {\n  _: 0,\n  DEBUG: 1,\n  INFO: 2,\n  WARN: 3,\n  ERROR: 4,\n  NONE: 5,\n};\n\n// Type for LogLevelEnum values\nexport type LogLevelEnum = (typeof LogLevelEnum)[keyof typeof LogLevelEnum];\n","import { InternalSettings, LogLevel, ResultObject } from \"../types/api_types\";\nimport { global_constants } from \"./api_constants\";\nimport { LogLevelEnum } from \"./enums\";\n\n/**\n * Default settings for the SCORM API\n */\nexport const DefaultSettings: InternalSettings = {\n  autocommit: false,\n  autocommitSeconds: 10,\n  asyncCommit: false,\n  sendFullCommit: true,\n  lmsCommitUrl: false,\n  dataCommitFormat: \"json\",\n  commitRequestDataType: \"application/json;charset=UTF-8\",\n  autoProgress: false,\n  logLevel: LogLevelEnum.ERROR,\n  selfReportSessionTime: false,\n  alwaysSendTotalTime: false,\n  renderCommonCommitFields: false,\n  strict_errors: true,\n  xhrHeaders: {},\n  xhrWithCredentials: false,\n  fetchMode: \"cors\",\n  useBeaconInsteadOfFetch: \"never\",\n  responseHandler: async function (response: Response): Promise<ResultObject> {\n    if (typeof response !== \"undefined\") {\n      let httpResult = null;\n\n      // Handle both text() and json() response methods\n      try {\n        if (typeof response.json === \"function\") {\n          // Try to get JSON directly if the method exists\n          httpResult = await response.json();\n        } else if (typeof response.text === \"function\") {\n          // Fall back to text() if json() is not available\n          const responseText = await response.text();\n          if (responseText) {\n            httpResult = JSON.parse(responseText);\n          }\n        }\n      } catch (e) {\n        // If parsing fails, continue with null httpResult\n      }\n\n      if (httpResult === null || !{}.hasOwnProperty.call(httpResult, \"result\")) {\n        if (response.status === 200) {\n          return {\n            result: global_constants.SCORM_TRUE,\n            errorCode: 0,\n          };\n        } else {\n          return {\n            result: global_constants.SCORM_FALSE,\n            errorCode: 101,\n          };\n        }\n      } else {\n        return {\n          result: httpResult.result,\n          errorCode: httpResult.errorCode\n            ? httpResult.errorCode\n            : httpResult.result === global_constants.SCORM_TRUE\n              ? 0\n              : 101,\n        };\n      }\n    }\n    return {\n      result: global_constants.SCORM_FALSE,\n      errorCode: 101,\n    };\n  },\n  requestHandler: function (commitObject) {\n    return commitObject;\n  },\n  onLogMessage: defaultLogHandler,\n  scoItemIds: [],\n  scoItemIdValidator: false,\n  globalObjectiveIds: [],\n\n  // Offline support settings\n  enableOfflineSupport: false,\n  courseId: \"\",\n  syncOnInitialize: true,\n  syncOnTerminate: true,\n  maxSyncAttempts: 5,\n};\n\nexport function defaultLogHandler(messageLevel: LogLevel, logMessage: string): void {\n  switch (messageLevel) {\n    case \"4\":\n    case 4:\n    case \"ERROR\":\n    case LogLevelEnum.ERROR:\n      console.error(logMessage);\n      break;\n    case \"3\":\n    case 3:\n    case \"WARN\":\n    case LogLevelEnum.WARN:\n      console.warn(logMessage);\n      break;\n    case \"2\":\n    case 2:\n    case \"INFO\":\n    case LogLevelEnum.INFO:\n      console.info(logMessage);\n      break;\n    case \"1\":\n    case 1:\n    case \"DEBUG\":\n    case LogLevelEnum.DEBUG:\n      if (console.debug) {\n        console.debug(logMessage);\n      } else {\n        console.log(logMessage);\n      }\n      break;\n  }\n}\n","import BaseAPI from \"../BaseAPI\";\n\n/**\n * Private class that wraps a timeout call to the commit() function\n */\nexport class ScheduledCommit {\n  private _API;\n  private _cancelled = false;\n  private readonly _timeout;\n  private readonly _callback;\n\n  /**\n   * Constructor for ScheduledCommit\n   * @param {BaseAPI} API\n   * @param {number} when\n   * @param {string} callback\n   */\n  constructor(API: BaseAPI, when: number, callback: string) {\n    this._API = API;\n    this._timeout = setTimeout(this.wrapper.bind(this), when);\n    this._callback = callback;\n  }\n\n  /**\n   * Cancel any currently scheduled commit\n   */\n  cancel() {\n    this._cancelled = true;\n    if (this._timeout) {\n      clearTimeout(this._timeout);\n    }\n  }\n\n  /**\n   * Wrap the API commit call to check if the call has already been canceled\n   */\n  wrapper() {\n    if (!this._cancelled) {\n      // Only proceed with scheduled commit if API is properly initialized\n      if (this._API.isInitialized()) {\n        (async () => await this._API.commit(this._callback))();\n      }\n    }\n  }\n}\n","import { CommitObject, InternalSettings, ResultObject } from \"../types/api_types\";\nimport { global_constants } from \"../constants/api_constants\";\nimport { LogLevelEnum } from \"../constants/enums\";\nimport { IHttpService } from \"../interfaces/services\";\nimport { ErrorCode } from \"../constants/error_codes\";\nimport { StringKeyMap } from \"../utilities\";\n\n/**\n * Service for handling HTTP communication with the LMS\n */\nexport class HttpService implements IHttpService {\n  private settings: InternalSettings;\n  private error_codes: ErrorCode;\n\n  /**\n   * Constructor for HttpService\n   * @param {Settings} settings - The settings object\n   * @param {ErrorCode} error_codes - The error codes object\n   */\n  constructor(settings: InternalSettings, error_codes: ErrorCode) {\n    this.settings = settings;\n    this.error_codes = error_codes;\n  }\n\n  /**\n   * Sends HTTP requests to the LMS with special handling for immediate and standard requests.\n   *\n   * This method handles communication with the LMS server, implementing two distinct\n   * request handling strategies based on the context:\n   *\n   * 1. Immediate Mode (used during termination):\n   *    When immediate=true, the method:\n   *    - Initiates the fetch request but doesn't wait for it to complete\n   *    - Returns a success result immediately\n   *    - Processes the response asynchronously when it arrives\n   *\n   *    This is critical for browser compatibility during page unload/termination,\n   *    as some browsers (especially Chrome) may cancel synchronous or awaited\n   *    requests when a page is closing.\n   *\n   * 2. Standard Mode (normal operation):\n   *    When immediate=false, the method:\n   *    - Processes the request parameters through the configured requestHandler\n   *    - Awaits the fetch response completely\n   *    - Transforms the response using the configured responseHandler\n   *    - Triggers appropriate event listeners based on success/failure\n   *    - Returns the complete result with appropriate error codes\n   *\n   * The method also includes error handling to catch network failures or other\n   * exceptions that might occur during the request process.\n   *\n   * @param {string} url - The URL endpoint to send the request to\n   * @param {CommitObject|StringKeyMap|Array} params - The data to send to the LMS\n   * @param {boolean} immediate - Whether to send the request immediately without waiting (true) or process normally (false)\n   * @param {Function} apiLog - Function to log API messages with appropriate levels\n   * @param {Function} processListeners - Function to trigger event listeners for commit events\n   * @return {Promise<ResultObject>} - A promise that resolves with the result of the request\n   *\n   * @example\n   * // Standard request (waits for response)\n   * const result = await httpService.processHttpRequest(\n   *   \"https://lms.example.com/commit\",\n   *   { cmi: { core: { lesson_status: \"completed\" } } },\n   *   false,\n   *   console.log,\n   *   (event) => dispatchEvent(new CustomEvent(event))\n   * );\n   *\n   * @example\n   * // Immediate request (for termination)\n   * const result = await httpService.processHttpRequest(\n   *   \"https://lms.example.com/commit\",\n   *   { cmi: { core: { lesson_status: \"completed\" } } },\n   *   true,\n   *   console.log,\n   *   (event) => dispatchEvent(new CustomEvent(event))\n   * );\n   * // result will be success immediately, regardless of actual HTTP result\n   */\n  async processHttpRequest(\n    url: string,\n    params: CommitObject | StringKeyMap | Array<any>,\n    immediate: boolean = false,\n    apiLog: (\n      functionName: string,\n      message: any,\n      messageLevel: LogLevelEnum,\n      CMIElement?: string,\n    ) => void,\n    processListeners: (functionName: string, CMIElement?: string, value?: any) => void,\n  ): Promise<ResultObject> {\n    const genericError: ResultObject = {\n      result: global_constants.SCORM_FALSE,\n      errorCode: this.error_codes.GENERAL || 101,\n    };\n\n    // If immediate mode (for termination), handle differently\n    if (immediate) {\n      return this._handleImmediateRequest(url, params, apiLog, processListeners);\n    }\n\n    // Standard request processing\n    try {\n      const processedParams = this.settings.requestHandler(params) as\n        | CommitObject\n        | StringKeyMap\n        | Array<any>;\n      const response = await this.performFetch(url, processedParams);\n      return this.transformResponse(response, processListeners);\n    } catch (e: unknown) {\n      const message = e instanceof Error ? e.message : String(e);\n\n      // Enhanced error logging with more context\n      apiLog(\"processHttpRequest\", `HTTP request failed to ${url}: ${message}`, LogLevelEnum.ERROR);\n\n      if (e instanceof Error && e.stack) {\n        apiLog(\"processHttpRequest\", `Stack trace: ${e.stack}`, LogLevelEnum.DEBUG);\n      }\n\n      // Create enhanced error object with more details\n      const enhancedError: ResultObject = {\n        ...genericError,\n        errorMessage: message,\n        errorDetails: JSON.stringify({\n          url,\n          errorType: e instanceof Error ? e.constructor.name : typeof e,\n          originalError: message,\n        }),\n      };\n\n      processListeners(\"CommitError\");\n      return enhancedError;\n    }\n  }\n\n  /**\n   * Handles an immediate request (used during termination)\n   * @param {string} url - The URL to send the request to\n   * @param {CommitObject|StringKeyMap|Array} params - The parameters to include in the request\n   * @param {Function} processListeners - Function to process event listeners\n   * @return {ResultObject} - A success result object\n   * @private\n   */\n  private _handleImmediateRequest(\n    url: string,\n    params: CommitObject | StringKeyMap | Array<any>,\n    apiLog: (\n      functionName: string,\n      message: any,\n      messageLevel: LogLevelEnum,\n      CMIElement?: string,\n    ) => void,\n    processListeners: (functionName: string, CMIElement?: string, value?: any) => void,\n  ): ResultObject {\n    // Use Beacon API for final commit if specified in settings\n    if (this.settings.useBeaconInsteadOfFetch !== \"never\") {\n      const { body, contentType } = this._prepareRequestBody(params);\n      navigator.sendBeacon(url, new Blob([body], { type: contentType }));\n    } else {\n      // Use regular fetch with keepalive\n      this.performFetch(url, params)\n        .then(async (response) => {\n          await this.transformResponse(response, processListeners);\n        })\n        .catch((e: unknown) => {\n          const message = e instanceof Error ? e.message : String(e);\n          apiLog(\"processHttpRequest\", message, LogLevelEnum.ERROR);\n          processListeners(\"CommitError\");\n        });\n    }\n\n    // Return success immediately without waiting for response\n    return {\n      result: global_constants.SCORM_TRUE,\n      errorCode: 0,\n    };\n  }\n\n  /**\n   * Prepares the request body and content type based on params type\n   * @param {CommitObject|StringKeyMap|Array} params - The parameters to include in the request\n   * @return {Object} - Object containing body and contentType\n   * @private\n   */\n  private _prepareRequestBody(params: CommitObject | StringKeyMap | Array<any>): {\n    body: string;\n    contentType: string;\n  } {\n    const body = params instanceof Array ? params.join(\"&\") : JSON.stringify(params);\n    const contentType =\n      params instanceof Array\n        ? \"application/x-www-form-urlencoded\"\n        : this.settings.commitRequestDataType;\n\n    return { body, contentType };\n  }\n\n  /**\n   * Perform the fetch request to the LMS\n   * @param {string} url - The URL to send the request to\n   * @param {StringKeyMap|Array} params - The parameters to include in the request\n   * @return {Promise<Response>} - The response from the LMS\n   * @private\n   */\n  private async performFetch(url: string, params: StringKeyMap | Array<any>): Promise<Response> {\n    // Use Beacon API if specified in settings\n    if (this.settings.useBeaconInsteadOfFetch === \"always\") {\n      return this.performBeacon(url, params);\n    }\n\n    const { body, contentType } = this._prepareRequestBody(params);\n    const init = {\n      method: \"POST\",\n      mode: this.settings.fetchMode,\n      body,\n      headers: {\n        ...this.settings.xhrHeaders,\n        \"Content-Type\": contentType,\n      },\n      keepalive: true,\n    } as RequestInit;\n\n    if (this.settings.xhrWithCredentials) {\n      init.credentials = \"include\";\n    }\n\n    return fetch(url, init);\n  }\n\n  /**\n   * Perform the beacon request to the LMS\n   * @param {string} url - The URL to send the request to\n   * @param {StringKeyMap|Array} params - The parameters to include in the request\n   * @return {Promise<Response>} - A promise that resolves with a mock Response object\n   * @private\n   */\n  private async performBeacon(url: string, params: StringKeyMap | Array<any>): Promise<Response> {\n    const { body, contentType } = this._prepareRequestBody(params);\n\n    // Send the beacon request\n    const beaconSuccess = navigator.sendBeacon(url, new Blob([body], { type: contentType }));\n\n    // Create a mock Response object since sendBeacon doesn't return a Response\n    return Promise.resolve({\n      status: beaconSuccess ? 200 : 0,\n      ok: beaconSuccess,\n      json: async () => ({\n        result: beaconSuccess ? \"true\" : \"false\",\n        errorCode: beaconSuccess ? 0 : this.error_codes.GENERAL,\n      }),\n      text: async () =>\n        JSON.stringify({\n          result: beaconSuccess ? \"true\" : \"false\",\n          errorCode: beaconSuccess ? 0 : this.error_codes.GENERAL,\n        }),\n    } as Response);\n  }\n\n  /**\n   * Transforms the response from the LMS to a ResultObject\n   * @param {Response} response - The response from the LMS\n   * @param {Function} processListeners - Function to process event listeners\n   * @return {Promise<ResultObject>} - The transformed response\n   * @private\n   */\n  private async transformResponse(\n    response: Response,\n    processListeners: (functionName: string, CMIElement?: string, value?: any) => void,\n  ): Promise<ResultObject> {\n    let result: any;\n\n    try {\n      // Parse the response using the configured handler or default to json\n      result =\n        typeof this.settings.responseHandler === \"function\"\n          ? await this.settings.responseHandler(response)\n          : await response.json();\n    } catch (parseError) {\n      // If we can't parse the response, log the raw response for debugging\n      const responseText = await response.text().catch(() => \"Unable to read response text\");\n\n      return {\n        result: global_constants.SCORM_FALSE,\n        errorCode: this.error_codes.GENERAL || 101,\n        errorMessage: `Failed to parse LMS response: ${parseError instanceof Error ? parseError.message : String(parseError)}`,\n        errorDetails: JSON.stringify({\n          status: response.status,\n          statusText: response.statusText,\n          url: response.url,\n          responseText: responseText.substring(0, 500), // Limit response text to avoid huge logs\n          parseError: parseError instanceof Error ? parseError.message : String(parseError),\n        }),\n      };\n    }\n\n    // Ensure result has an errorCode property\n    if (!Object.hasOwnProperty.call(result, \"errorCode\")) {\n      result.errorCode = this._isSuccessResponse(response, result) ? 0 : this.error_codes.GENERAL;\n    }\n\n    // Add response details for failed requests\n    if (!this._isSuccessResponse(response, result)) {\n      result.errorDetails = {\n        status: response.status,\n        statusText: response.statusText,\n        url: response.url,\n        ...result.errorDetails, // Preserve any existing error details\n      };\n    }\n\n    // Trigger appropriate event based on success/failure\n    if (this._isSuccessResponse(response, result)) {\n      processListeners(\"CommitSuccess\");\n    } else {\n      processListeners(\"CommitError\", undefined, result.errorCode);\n    }\n\n    return result;\n  }\n\n  /**\n   * Determines if a response is successful based on status code and result\n   * @param {Response} response - The HTTP response\n   * @param {ResultObject} result - The parsed result object\n   * @return {boolean} - Whether the response is successful\n   * @private\n   */\n  private _isSuccessResponse(response: Response, result: ResultObject): boolean {\n    const value = (result as any).result;\n    return (\n      response.status >= 200 &&\n      response.status <= 299 &&\n      (value === true || value === \"true\" || value === global_constants.SCORM_TRUE)\n    );\n  }\n\n  /**\n   * Updates the service settings\n   * @param {Settings} settings - The new settings\n   */\n  updateSettings(settings: InternalSettings): void {\n    this.settings = settings;\n  }\n}\n","import { LogLevel } from \"../types/api_types\";\nimport { LogLevelEnum } from \"../constants/enums\";\nimport { IEventService } from \"../interfaces/services\";\n\n/**\n * Interface for a listener object\n */\ninterface Listener {\n  functionName: string;\n  CMIElement: string | null;\n  callback: Function;\n}\n\n/**\n * Type for parsed listener information\n */\ninterface ParsedListener {\n  functionName: string;\n  CMIElement: string | null;\n}\n\n/**\n * Service for handling event listeners and event processing\n */\nexport class EventService implements IEventService {\n  // Map of function names to listeners for faster lookups\n  private listenerMap: Map<string, Listener[]> = new Map();\n  // Total count of listeners for logging\n  private listenerCount = 0;\n  // Function to log API messages\n  private readonly apiLog: (\n    functionName: string,\n    message: string,\n    messageLevel: LogLevel,\n    CMIElement?: string,\n  ) => void;\n\n  /**\n   * Constructor for EventService\n   * @param {Function} apiLog - Function to log API messages\n   */\n  constructor(\n    apiLog: (\n      functionName: string,\n      message: string,\n      messageLevel: LogLevel,\n      CMIElement?: string,\n    ) => void,\n  ) {\n    this.apiLog = apiLog;\n  }\n\n  /**\n   * Parses a listener name into its components\n   *\n   * @param {string} listenerName - The name of the listener\n   * @returns {ParsedListener|null} - The parsed listener information or null if invalid\n   */\n  private parseListenerName(listenerName: string): ParsedListener | null {\n    const listenerSplit = listenerName.split(\".\");\n    if (listenerSplit.length === 0) return null;\n\n    const functionName = listenerSplit[0];\n    let CMIElement: string | null = null;\n\n    if (listenerSplit.length > 1) {\n      CMIElement = listenerName.replace(`${functionName}.`, \"\");\n    }\n\n    return { functionName: functionName ?? listenerName, CMIElement };\n  }\n\n  /**\n   * Provides a mechanism for attaching to a specific SCORM event\n   *\n   * @param {string} listenerName - The name of the listener\n   * @param {Function} callback - The callback function to execute when the event occurs\n   */\n  on(listenerName: string, callback: Function) {\n    if (!callback) return;\n\n    const listenerFunctions = listenerName.split(\" \");\n    for (const listenerFunction of listenerFunctions) {\n      const parsedListener = this.parseListenerName(listenerFunction);\n      if (!parsedListener) continue;\n\n      const { functionName, CMIElement } = parsedListener;\n\n      // Get or create the array for this function name\n      const listeners = this.listenerMap.get(functionName) ?? [];\n\n      // Add the new listener\n      listeners.push({\n        functionName,\n        CMIElement,\n        callback,\n      });\n\n      // Update the map and count\n      this.listenerMap.set(functionName, listeners);\n      this.listenerCount++;\n\n      this.apiLog(\n        \"on\",\n        `Added event listener: ${this.listenerCount}`,\n        LogLevelEnum.INFO,\n        functionName,\n      );\n    }\n  }\n\n  /**\n   * Provides a mechanism for detaching a specific SCORM event listener\n   *\n   * @param {string} listenerName - The name of the listener to remove\n   * @param {Function} callback - The callback function to remove\n   */\n  off(listenerName: string, callback: Function) {\n    if (!callback) return;\n\n    const listenerFunctions = listenerName.split(\" \");\n    for (const listenerFunction of listenerFunctions) {\n      const parsedListener = this.parseListenerName(listenerFunction);\n      if (!parsedListener) continue;\n\n      const { functionName, CMIElement } = parsedListener;\n\n      // Get the listeners for this function name\n      const listeners = this.listenerMap.get(functionName);\n      if (!listeners) continue;\n\n      // Find the index of the listener to remove\n      const removeIndex = listeners.findIndex(\n        (obj) => obj.CMIElement === CMIElement && obj.callback === callback,\n      );\n\n      if (removeIndex !== -1) {\n        // Remove the listener\n        listeners.splice(removeIndex, 1);\n        this.listenerCount--;\n\n        // Update the map or remove the entry if empty\n        if (listeners.length === 0) {\n          this.listenerMap.delete(functionName);\n        } else {\n          this.listenerMap.set(functionName, listeners);\n        }\n\n        this.apiLog(\n          \"off\",\n          `Removed event listener: ${this.listenerCount}`,\n          LogLevelEnum.INFO,\n          functionName,\n        );\n      }\n    }\n  }\n\n  /**\n   * Provides a mechanism for clearing all listeners from a specific SCORM event\n   *\n   * @param {string} listenerName - The name of the listener to clear\n   */\n  clear(listenerName: string) {\n    const listenerFunctions = listenerName.split(\" \");\n    for (const listenerFunction of listenerFunctions) {\n      const parsedListener = this.parseListenerName(listenerFunction);\n      if (!parsedListener) continue;\n\n      const { functionName, CMIElement } = parsedListener;\n\n      // If we have listeners for this function name\n      if (this.listenerMap.has(functionName)) {\n        const listeners = this.listenerMap.get(functionName)!;\n\n        // Filter out listeners that match the criteria\n        const newListeners = listeners.filter((obj) => obj.CMIElement !== CMIElement);\n\n        // Update the count and map\n        this.listenerCount -= listeners.length - newListeners.length;\n\n        if (newListeners.length === 0) {\n          this.listenerMap.delete(functionName);\n        } else {\n          this.listenerMap.set(functionName, newListeners);\n        }\n      }\n    }\n  }\n\n  /**\n   * Processes any 'on' listeners that have been created\n   *\n   * @param {string} functionName - The name of the function that triggered the event\n   * @param {string} CMIElement - The CMI element that was affected\n   * @param {any} value - The value that was set\n   */\n  processListeners(functionName: string, CMIElement?: string, value?: any) {\n    this.apiLog(functionName, value, LogLevelEnum.INFO, CMIElement);\n\n    // Get listeners for this function name\n    const listeners = this.listenerMap.get(functionName);\n    if (!listeners) return;\n\n    for (const listener of listeners) {\n      const listenerHasCMIElement = !!listener.CMIElement;\n      let CMIElementsMatch = false;\n\n      // Check if CMI elements match\n      if (CMIElement && listener.CMIElement) {\n        if (listener.CMIElement.endsWith(\"*\")) {\n          // For wildcard matches, check if the CMI element starts with the prefix\n          const prefix = listener.CMIElement.slice(0, -1);\n          CMIElementsMatch = CMIElement.startsWith(prefix);\n        } else {\n          // For exact matches, compare the strings directly\n          CMIElementsMatch = listener.CMIElement === CMIElement;\n        }\n      }\n\n      // If the listener matches, call the callback\n      if (!listenerHasCMIElement || CMIElementsMatch) {\n        this.apiLog(\n          \"processListeners\",\n          `Processing listener: ${listener.functionName}`,\n          LogLevelEnum.DEBUG,\n          CMIElement,\n        );\n\n        // Handle special event types\n        if (functionName.startsWith(\"Sequence\")) {\n          // For sequence events, pass the target as the first argument\n          listener.callback(value);\n        } else if (functionName === \"CommitError\") {\n          // For commit error events, pass the error code\n          listener.callback(value);\n        } else if (functionName === \"CommitSuccess\") {\n          // For commit success events, pass no arguments\n          listener.callback();\n        } else {\n          // For regular events, pass CMIElement and value\n          listener.callback(CMIElement, value);\n        }\n      }\n    }\n  }\n\n  /**\n   * Resets the event service by clearing all listeners\n   */\n  reset() {\n    this.listenerMap.clear();\n    this.listenerCount = 0;\n  }\n}\n","import { CommitObject, LogLevel } from \"../types/api_types\";\nimport { StringKeyMap, unflatten } from \"../utilities\";\nimport { LogLevelEnum } from \"../constants/enums\";\nimport { BaseCMI } from \"../cmi/common/base_cmi\";\nimport { ISerializationService } from \"../interfaces/services\";\n\n/**\n * Service for handling data serialization and deserialization in scorm-again\n */\nexport class SerializationService implements ISerializationService {\n  /**\n   * Loads CMI data from a flattened JSON object with special handling for arrays and ordering.\n   *\n   * This method implements a complex algorithm for loading flattened JSON data into the CMI\n   * object structure. It handles several key challenges:\n   *\n   * 1. Ordering dependencies: Some CMI elements (like interactions and objectives) must be\n   *    loaded in a specific order to ensure proper initialization.\n   *\n   * 2. Array handling: Interactions and objectives are stored as arrays, and their properties\n   *    must be loaded in the correct order (e.g., 'id' and 'type' must be set before other properties).\n   *\n   * 3. Unflattening: The method converts flattened dot notation (e.g., \"cmi.objectives.0.id\")\n   *    back into nested objects before loading.\n   *\n   * The algorithm works by:\n   * - Categorizing keys into interactions, objectives, and other properties\n   * - Sorting interactions to prioritize 'id' and 'type' fields within each index\n   * - Sorting objectives to prioritize 'id' fields within each index\n   * - Processing each category in order: interactions, objectives, then other properties\n   *\n   * @param {StringKeyMap} json - The flattened JSON object with dot notation keys\n   * @param {string} CMIElement - The CMI element to start from (usually empty or \"cmi\")\n   * @param {Function} setCMIValue - Function to set CMI value\n   * @param {Function} isNotInitialized - Function to check if API is not initialized\n   *\n   * @param setStartingData\n   * @example\n   * // Example of flattened JSON input:\n   * // {\n   * //   \"cmi.objectives.0.id\": \"obj1\",\n   * //   \"cmi.objectives.0.score.raw\": \"80\",\n   * //   \"cmi.interactions.0.id\": \"int1\",\n   * //   \"cmi.interactions.0.type\": \"choice\",\n   * //   \"cmi.interactions.0.result\": \"correct\"\n   * // }\n   */\n  loadFromFlattenedJSON(\n    json: StringKeyMap,\n    CMIElement: string = \"\",\n    setCMIValue: (CMIElement: string, value: any) => void,\n    isNotInitialized: () => boolean,\n    setStartingData: (data: StringKeyMap) => void,\n  ): void {\n    if (!isNotInitialized()) {\n      console.error(\"loadFromFlattenedJSON can only be called before the call to lmsInitialize.\");\n      return;\n    }\n\n    const int_pattern = /^(cmi\\.interactions\\.)(\\d+)\\.(.*)$/;\n    const obj_pattern = /^(cmi\\.objectives\\.)(\\d+)\\.(.*)$/;\n\n    // Extract and categorize keys for better sorting\n    const interactions: {\n      key: string;\n      value: any;\n      index: number;\n      field: string;\n    }[] = [];\n    const objectives: {\n      key: string;\n      value: any;\n      index: number;\n      field: string;\n    }[] = [];\n    const others: { key: string; value: any }[] = [];\n\n    // Categorize keys\n    for (const key in json) {\n      if (Object.prototype.hasOwnProperty.call(json, key)) {\n        const intMatch = key.match(int_pattern);\n        if (intMatch) {\n          interactions.push({\n            key,\n            value: json[key],\n            index: Number(intMatch[2]),\n            field: intMatch[3] || \"\",\n          });\n          continue;\n        }\n\n        const objMatch = key.match(obj_pattern);\n        if (objMatch) {\n          objectives.push({\n            key,\n            value: json[key],\n            index: Number(objMatch[2]),\n            field: objMatch[3] || \"\",\n          });\n          continue;\n        }\n\n        others.push({ key, value: json[key] });\n      }\n    }\n\n    // Sort interactions: first by index, then prioritize 'id' and 'type' fields\n    interactions.sort((a, b) => {\n      if (a.index !== b.index) {\n        return a.index - b.index;\n      }\n\n      // Same index, prioritize id and type\n      if (a.field === \"id\") return -1;\n      if (b.field === \"id\") return 1;\n      if (a.field === \"type\") return -1;\n      if (b.field === \"type\") return 1;\n\n      return a.field.localeCompare(b.field);\n    });\n\n    // Sort objectives: first by index, then prioritize 'id' field\n    objectives.sort((a, b) => {\n      if (a.index !== b.index) {\n        return a.index - b.index;\n      }\n\n      // Same index, prioritize id\n      if (a.field === \"id\") return -1;\n      if (b.field === \"id\") return 1;\n\n      return a.field.localeCompare(b.field);\n    });\n\n    // Sort other keys alphabetically\n    others.sort((a, b) => a.key.localeCompare(b.key));\n\n    // Process all items in the correct order\n    const processItems = (items: { key: string; value: any }[]) => {\n      items.forEach((item) => {\n        const obj: StringKeyMap = {};\n        obj[item.key] = item.value;\n        this.loadFromJSON(\n          unflatten(obj) as StringKeyMap,\n          CMIElement,\n          setCMIValue,\n          isNotInitialized,\n          setStartingData,\n        );\n      });\n    };\n\n    // Process in order: interactions, objectives, others\n    processItems(interactions);\n    processItems(objectives);\n    processItems(others);\n  }\n\n  /**\n   * Loads CMI data from a nested JSON object with recursive traversal.\n   *\n   * This method implements a recursive algorithm for loading nested JSON data into the CMI\n   * object structure. It handles several key aspects:\n   *\n   * 1. Recursive traversal: The method recursively traverses the nested JSON structure,\n   *    building CMI element paths as it goes (e.g., \"cmi.core.student_id\").\n   *\n   * 2. Type-specific handling: Different data types are handled differently:\n   *    - Arrays: Each array element is processed individually with its index in the path\n   *    - Objects: Recursively processed with updated path\n   *    - Primitives: Set directly using setCMIValue\n   *\n   * 3. Initialization check: Ensures the method is only called before API initialization\n   *\n   * 4. Starting data storage: Stores the original JSON data for potential future use\n   *\n   * The algorithm works by:\n   * - First storing the complete JSON object via setStartingData\n   * - Iterating through each property in the JSON object\n   * - For each property, determining its type and handling it accordingly\n   * - Building the CMI element path as it traverses the structure\n   * - Setting values at the appropriate paths using setCMIValue\n   *\n   * @param {{[key: string]: any}} json - The nested JSON object to load\n   * @param {string} CMIElement - The CMI element to start from (usually empty or \"cmi\")\n   * @param {Function} setCMIValue - Function to set CMI value at a specific path\n   * @param {Function} isNotInitialized - Function to check if API is not initialized\n   * @param {Function} setStartingData - Function to store the original JSON data\n   *\n   * @example\n   * // Example of nested JSON input:\n   * // {\n   * //   \"core\": {\n   * //     \"student_id\": \"12345\",\n   * //     \"student_name\": \"John Doe\"\n   * //   },\n   * //   \"objectives\": [\n   * //     { \"id\": \"obj1\", \"score\": { \"raw\": 80 } },\n   * //     { \"id\": \"obj2\", \"score\": { \"raw\": 90 } }\n   * //   ]\n   * // }\n   */\n  loadFromJSON(\n    json: { [key: string]: any },\n    CMIElement: string = \"\",\n    setCMIValue: (CMIElement: string, value: any) => void,\n    isNotInitialized: () => boolean,\n    setStartingData: (data: StringKeyMap) => void,\n  ): void {\n    if (!isNotInitialized()) {\n      console.error(\"loadFromJSON can only be called before the call to lmsInitialize.\");\n      return;\n    }\n\n    CMIElement = CMIElement !== undefined ? CMIElement : \"cmi\";\n\n    setStartingData(json);\n\n    // could this be refactored down to flatten(json) then setCMIValue on each?\n    for (const key in json) {\n      if (Object.prototype.hasOwnProperty.call(json, key) && json[key]) {\n        const currentCMIElement = (CMIElement ? CMIElement + \".\" : \"\") + key;\n        const value = json[key];\n\n        if (value.constructor === Array) {\n          for (let i = 0; i < value.length; i++) {\n            if (value[i]) {\n              const item = value[i];\n              const tempCMIElement = `${currentCMIElement}.${i}`;\n\n              if (item.constructor === Object) {\n                this.loadFromJSON(\n                  item,\n                  tempCMIElement,\n                  setCMIValue,\n                  isNotInitialized,\n                  setStartingData,\n                );\n              } else {\n                setCMIValue(tempCMIElement, item);\n              }\n            }\n          }\n        } else if (value.constructor === Object) {\n          this.loadFromJSON(\n            value,\n            currentCMIElement,\n            setCMIValue,\n            isNotInitialized,\n            setStartingData,\n          );\n        } else {\n          setCMIValue(currentCMIElement, value);\n        }\n      }\n    }\n  }\n\n  /**\n   * Render the CMI object to JSON for sending to an LMS.\n   *\n   * @param {BaseCMI|StringKeyMap} cmi - The CMI object\n   * @param {boolean} sendFullCommit - Whether to send the full commit\n   * @return {string}\n   */\n  renderCMIToJSONString(cmi: BaseCMI | StringKeyMap, sendFullCommit: boolean): string {\n    // Do we want/need to return fields that have no set value?\n    if (sendFullCommit) {\n      return JSON.stringify({ cmi });\n    }\n    return JSON.stringify({ cmi }, (k, v) => (v === undefined ? null : v), 2);\n  }\n\n  /**\n   * Returns a JS object representing the current cmi\n   * @param {BaseCMI|StringKeyMap} cmi - The CMI object\n   * @param {boolean} sendFullCommit - Whether to send the full commit\n   * @return {object}\n   */\n  renderCMIToJSONObject(cmi: BaseCMI | StringKeyMap, sendFullCommit: boolean): StringKeyMap {\n    // Revert to the original implementation to maintain compatibility with tests\n    return JSON.parse(this.renderCMIToJSONString(cmi, sendFullCommit));\n  }\n\n  /**\n   * Builds the commit object to be sent to the LMS\n   * @param {boolean} terminateCommit - Whether this is a termination commit\n   * @param {boolean} alwaysSendTotalTime - Whether to always send total time\n   * @param {boolean|Function} renderCommonCommitFields - Whether to render common commit fields\n   * @param {Function} renderCommitObject - Function to render commit object\n   * @param {Function} renderCommitCMI - Function to render commit CMI\n   * @param {LogLevel} apiLogLevel - The API log level\n   * @return {CommitObject|StringKeyMap|Array<any>}\n   */\n  getCommitObject(\n    terminateCommit: boolean,\n    alwaysSendTotalTime: boolean,\n    renderCommonCommitFields: boolean | ((commitObject: CommitObject) => boolean),\n    renderCommitObject: (terminateCommit: boolean, includeTotalTime?: boolean) => CommitObject,\n    renderCommitCMI: (\n      terminateCommit: boolean,\n      includeTotalTime?: boolean,\n    ) => StringKeyMap | Array<any>,\n    apiLogLevel: LogLevel,\n  ): CommitObject | StringKeyMap | Array<any> {\n    // Fix for issue: total time is being calculated incorrectly across multiple sessions\n    // when selfReportSessionTime and alwaysSendTotalTime are enabled.\n    //\n    // Previously, we were using a single variable (shouldTerminateCommit) that combined\n    // both concerns: whether this is a termination commit and whether to include total time.\n    // This caused the total time to be calculated as if every commit was a terminate commit\n    // when alwaysSendTotalTime was true, leading to incorrect time calculations.\n    //\n    // Now we pass the actual terminateCommit value and a separate parameter for whether\n    // to include total time, allowing the rendering functions to handle these concerns separately.\n    const includeTotalTime = alwaysSendTotalTime || terminateCommit;\n\n    const commitObject = renderCommonCommitFields\n      ? renderCommitObject(terminateCommit, includeTotalTime)\n      : renderCommitCMI(terminateCommit, includeTotalTime);\n\n    if ([LogLevelEnum.DEBUG, \"1\", 1, \"DEBUG\"].includes(apiLogLevel)) {\n      console.debug(\"Commit (terminated: \" + (terminateCommit ? \"yes\" : \"no\") + \"): \");\n      console.debug(commitObject);\n    }\n    return commitObject;\n  }\n}\n","type APIError = {\n  errorCode: number;\n  errorMessage: string;\n  detailedMessage: string;\n};\n\nexport class BaseScormValidationError extends Error {\n  constructor(CMIElement: string, errorCode: number) {\n    super(`${CMIElement} : ${errorCode.toString()}`);\n    this._errorCode = errorCode;\n\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, BaseScormValidationError.prototype);\n  }\n\n  private readonly _errorCode: number;\n\n  /**\n   * Getter for _errorCode\n   * @return {number}\n   */\n  get errorCode(): number {\n    return this._errorCode;\n  }\n}\n\n/**\n * Base Validation Exception\n */\nexport class ValidationError extends BaseScormValidationError implements APIError {\n  /**\n   * Constructor to take in an error message and code\n   * @param {string} CMIElement\n   * @param {number} errorCode\n   * @param {string} errorMessage\n   * @param {string} detailedMessage\n   */\n  constructor(\n    CMIElement: string,\n    errorCode: number,\n    errorMessage: string,\n    detailedMessage?: string,\n  ) {\n    super(CMIElement, errorCode);\n    this.message = `${CMIElement} : ${errorMessage}`;\n    this._errorMessage = errorMessage;\n    if (detailedMessage) {\n      this._detailedMessage = detailedMessage;\n    }\n\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, ValidationError.prototype);\n  }\n\n  private readonly _errorMessage: string;\n  private readonly _detailedMessage: string = \"\";\n\n  /**\n   * Getter for _errorMessage\n   * @return {string}\n   */\n  get errorMessage(): string {\n    return this._errorMessage;\n  }\n\n  /**\n   * Getter for _detailedMessage\n   * @return {string}\n   */\n  get detailedMessage(): string {\n    return this._detailedMessage;\n  }\n}\n","import { LogLevel } from \"../types/api_types\";\nimport { LogLevelEnum } from \"../constants/enums\";\nimport { ILoggingService } from \"../interfaces/services\";\nimport { defaultLogHandler } from \"../constants/default_settings\";\n\n/**\n * Centralized logging service implemented as a singleton\n * Provides methods for logging at different levels and configuring the log level\n */\nexport class LoggingService implements ILoggingService {\n  private static _instance: LoggingService;\n  private _logLevel: LogLevel = LogLevelEnum.ERROR;\n  private _logHandler: (messageLevel: LogLevel, logMessage: string) => void;\n\n  /**\n   * Private constructor to prevent direct instantiation\n   */\n  private constructor() {\n    // Default log handler uses console methods based on log level\n    this._logHandler = defaultLogHandler;\n  }\n\n  /**\n   * Get the singleton instance of LoggingService\n   *\n   * @returns {LoggingService} The singleton instance\n   */\n  public static getInstance(): LoggingService {\n    if (!LoggingService._instance) {\n      LoggingService._instance = new LoggingService();\n    }\n    return LoggingService._instance;\n  }\n\n  /**\n   * Set the log level\n   *\n   * @param {LogLevel} level - The log level to set\n   */\n  public setLogLevel(level: LogLevel): void {\n    this._logLevel = level;\n  }\n\n  /**\n   * Get the current log level\n   *\n   * @returns {LogLevel} The current log level\n   */\n  public getLogLevel(): LogLevel {\n    return this._logLevel;\n  }\n\n  /**\n   * Set a custom log handler\n   *\n   * @param {Function} handler - The function to handle log messages\n   */\n  public setLogHandler(handler: (messageLevel: LogLevel, logMessage: string) => void): void {\n    this._logHandler = handler;\n  }\n\n  /**\n   * Log a message if the message level is greater than or equal to the current log level\n   *\n   * @param {LogLevel} messageLevel - The level of the message\n   * @param {string} logMessage - The message to log\n   */\n  public log(messageLevel: LogLevel, logMessage: string): void {\n    if (this.shouldLog(messageLevel)) {\n      this._logHandler(messageLevel, logMessage);\n    }\n  }\n\n  /**\n   * Log a message at ERROR level\n   *\n   * @param {string} logMessage - The message to log\n   */\n  public error(logMessage: string): void {\n    this.log(LogLevelEnum.ERROR, logMessage);\n  }\n\n  /**\n   * Log a message at WARN level\n   *\n   * @param {string} logMessage - The message to log\n   */\n  public warn(logMessage: string): void {\n    this.log(LogLevelEnum.WARN, logMessage);\n  }\n\n  /**\n   * Log a message at INFO level\n   *\n   * @param {string} logMessage - The message to log\n   */\n  public info(logMessage: string): void {\n    this.log(LogLevelEnum.INFO, logMessage);\n  }\n\n  /**\n   * Log a message at DEBUG level\n   *\n   * @param {string} logMessage - The message to log\n   */\n  public debug(logMessage: string): void {\n    this.log(LogLevelEnum.DEBUG, logMessage);\n  }\n\n  /**\n   * Determine if a message should be logged based on its level and the current log level\n   *\n   * @param {LogLevel} messageLevel - The level of the message\n   * @returns {boolean} Whether the message should be logged\n   */\n  private shouldLog(messageLevel: LogLevel): boolean {\n    // Convert string levels to numbers for comparison\n    const numericMessageLevel = this.getNumericLevel(messageLevel);\n    const numericLogLevel = this.getNumericLevel(this._logLevel);\n\n    return numericMessageLevel >= numericLogLevel;\n  }\n\n  /**\n   * Convert a log level to its numeric value\n   *\n   * @param {LogLevel} level - The log level to convert\n   * @returns {number} The numeric value of the log level\n   */\n  private getNumericLevel(level: LogLevel): number {\n    if (level === undefined) return LogLevelEnum.NONE;\n\n    if (typeof level === \"number\") return level;\n\n    switch (level) {\n      case \"1\":\n      case \"DEBUG\":\n        return LogLevelEnum.DEBUG;\n      case \"2\":\n      case \"INFO\":\n        return LogLevelEnum.INFO;\n      case \"3\":\n      case \"WARN\":\n        return LogLevelEnum.WARN;\n      case \"4\":\n      case \"ERROR\":\n        return LogLevelEnum.ERROR;\n      case \"5\":\n      case \"NONE\":\n        return LogLevelEnum.NONE;\n      default:\n        return LogLevelEnum.ERROR; // Default to ERROR if unknown\n    }\n  }\n}\n\n// Export a function to get the singleton instance\nexport function getLoggingService(): LoggingService {\n  return LoggingService.getInstance();\n}\n","import { LogLevelEnum } from \"../constants/enums\";\nimport { global_constants } from \"../constants/api_constants\";\nimport { ErrorCode } from \"../constants/error_codes\";\nimport { ValidationError } from \"../exceptions\";\nimport { IErrorHandlingService, ILoggingService } from \"../interfaces/services\";\nimport { getLoggingService } from \"./LoggingService\";\n\n/**\n * Service for handling SCORM errors\n */\nexport class ErrorHandlingService implements IErrorHandlingService {\n  private _lastErrorCode: string = \"0\";\n  private readonly _errorCodes: ErrorCode;\n  private readonly _apiLog: (\n    functionName: string,\n    message: string,\n    logLevel?: LogLevelEnum,\n    CMIElement?: string,\n  ) => void;\n  private readonly _getLmsErrorMessageDetails: (errorCode: number, detail: boolean) => string;\n  private readonly _loggingService: ILoggingService;\n\n  /**\n   * Constructor for ErrorHandlingService\n   *\n   * @param {ErrorCode} errorCodes - The error codes object\n   * @param {Function} apiLog - Function for logging API calls\n   * @param {Function} getLmsErrorMessageDetails - Function for getting error message details\n   * @param {ILoggingService} loggingService - Optional logging service instance\n   */\n  constructor(\n    errorCodes: ErrorCode,\n    apiLog: (\n      functionName: string,\n      message: string,\n      logLevel?: LogLevelEnum,\n      CMIElement?: string,\n    ) => void,\n    getLmsErrorMessageDetails: (errorCode: number, detail: boolean) => string,\n    loggingService?: ILoggingService,\n  ) {\n    this._errorCodes = errorCodes;\n    this._apiLog = apiLog;\n    this._getLmsErrorMessageDetails = getLmsErrorMessageDetails;\n    this._loggingService = loggingService || getLoggingService();\n  }\n\n  /**\n   * Get the last error code\n   *\n   * @return {string} - The last error code\n   */\n  get lastErrorCode(): string {\n    return this._lastErrorCode;\n  }\n\n  /**\n   * Set the last error code\n   *\n   * @param {string} errorCode - The error code to set\n   */\n  set lastErrorCode(errorCode: string) {\n    this._lastErrorCode = errorCode;\n  }\n\n  /**\n   * Throws a SCORM error\n   *\n   * @param {string} CMIElement\n   * @param {number} errorNumber - The error number\n   * @param {string} message - The error message\n   * @throws {ValidationError} - If throwException is true, throws a ValidationError\n   */\n  throwSCORMError(CMIElement: string, errorNumber: number, message?: string): void {\n    if (!message) {\n      message = this._getLmsErrorMessageDetails(errorNumber, true);\n    }\n\n    // Format a more descriptive error message with context\n    const formattedMessage = `SCORM Error ${errorNumber}: ${message}${CMIElement ? ` [Element: ${CMIElement}]` : \"\"}`;\n\n    // Log using both the API log and the logging service for consistency\n    this._apiLog(\"throwSCORMError\", errorNumber + \": \" + message, LogLevelEnum.ERROR, CMIElement);\n    this._loggingService.error(formattedMessage);\n\n    this._lastErrorCode = String(errorNumber);\n  }\n\n  /**\n   * Clears the last SCORM error code on success.\n   *\n   * @param {string} success - Whether the operation was successful\n   */\n  clearSCORMError(success: string): void {\n    if (success !== undefined && success !== global_constants.SCORM_FALSE) {\n      this._lastErrorCode = \"0\";\n    }\n  }\n\n  /**\n   * Handles exceptions that occur when accessing or setting CMI values.\n   *\n   * This method provides centralized error handling for exceptions that occur during\n   * CMI data operations. It differentiates between different types of errors and\n   * handles them appropriately:\n   *\n   * 1. ValidationError: These are expected errors from the validation system that\n   *    indicate a specific SCORM error condition (like invalid data format or range).\n   *    For these errors, the method:\n   *    - Sets the lastErrorCode to the error code from the ValidationError\n   *    - Returns SCORM_FALSE to indicate failure to the caller\n   *\n   * 2. Standard JavaScript Error: For general JavaScript errors (like TypeError,\n   *    ReferenceError, etc.), the method:\n   *    - Logs the error message with stack trace to the logging service\n   *    - Sets a general SCORM error\n   *    - Returns SCORM_FALSE to indicate failure\n   *\n   * 3. Unknown exceptions: For any other type of exception that doesn't match the\n   *    above categories, the method:\n   *    - Logs the entire exception object to the logging service\n   *    - Sets a general SCORM error\n   *    - Returns SCORM_FALSE to indicate failure\n   *\n   * This method is critical for maintaining SCORM compliance by ensuring that\n   * all errors are properly translated into the appropriate SCORM error codes.\n   *\n   * @param {string} CMIElement\n   * @param {ValidationError|Error|unknown} e - The exception that was thrown\n   * @param {string} returnValue - The default return value (typically an empty string)\n   * @return {string} - Either the original returnValue or SCORM_FALSE if an error occurred\n   *\n   * @example\n   * try {\n   *   const value = getCMIValue(\"cmi.core.score.raw\");\n   *   return value;\n   * } catch (e) {\n   *   return handleValueAccessException(e, \"\");\n   * }\n   */\n  handleValueAccessException(\n    CMIElement: string,\n    e: Error | ValidationError | unknown,\n    returnValue: string,\n  ): string {\n    if (e instanceof ValidationError) {\n      const validationError = e as ValidationError;\n      this._lastErrorCode = String(validationError.errorCode);\n\n      // Log validation errors at WARN level with context\n      const errorMessage = `Validation Error ${validationError.errorCode}: ${validationError.message} [Element: ${CMIElement}]`;\n      this._loggingService.warn(errorMessage);\n\n      returnValue = global_constants.SCORM_FALSE;\n    } else if (e instanceof Error) {\n      // For standard JS errors, include the stack trace and error type\n      const errorType = e.constructor.name; // Gets the error type (e.g., TypeError, ReferenceError)\n      const errorMessage = `${errorType}: ${e.message} [Element: ${CMIElement}]`;\n      const stackTrace = e.stack || \"\";\n\n      // Log the detailed error with stack trace\n      this._loggingService.error(`${errorMessage}\\n${stackTrace}`);\n\n      this.throwSCORMError(\n        CMIElement,\n        this._errorCodes.GENERAL as number,\n        `${errorType}: ${e.message}`,\n      );\n    } else {\n      // For unknown errors, provide as much context as possible\n      const errorMessage = `Unknown error occurred while accessing [Element: ${CMIElement}]`;\n\n      this._loggingService.error(errorMessage);\n\n      try {\n        // Try to stringify the error object for more details\n        const errorDetails = JSON.stringify(e);\n        this._loggingService.error(`Error details: ${errorDetails}`);\n      } catch (jsonError) {\n        // If stringify fails, log that we couldn't get more details\n        this._loggingService.error(\"Could not stringify error object for details\");\n      }\n\n      this.throwSCORMError(CMIElement, this._errorCodes.GENERAL as number, \"Unknown error\");\n    }\n    return returnValue;\n  }\n\n  /**\n   * Get the error codes object\n   *\n   * @return {ErrorCode} - The error codes object\n   */\n  get errorCodes(): ErrorCode {\n    return this._errorCodes;\n  }\n}\n\n// Export a factory function to create the service\nexport function createErrorHandlingService(\n  errorCodes: ErrorCode,\n  apiLog: (\n    functionName: string,\n    message: string,\n    logLevel: LogLevelEnum,\n    CMIElement?: string,\n  ) => void,\n  getLmsErrorMessageDetails: (errorCode: number, detail: boolean) => string,\n  loggingService?: ILoggingService,\n): ErrorHandlingService {\n  return new ErrorHandlingService(errorCodes, apiLog, getLmsErrorMessageDetails, loggingService);\n}\n","import { CommitObject, InternalSettings, ResultObject } from \"../types/api_types\";\nimport { global_constants } from \"../constants/api_constants\";\nimport { LogLevelEnum } from \"../constants/enums\";\nimport { ErrorCode } from \"../constants/error_codes\";\n\n/**\n * Interface for sync queue item\n */\ninterface SyncQueueItem {\n  id: string;\n  courseId: string;\n  timestamp: number;\n  data: CommitObject;\n  syncAttempts: number;\n}\n\n/**\n * Service for handling offline storage and synchronization of SCORM data\n */\nexport class OfflineStorageService {\n  private settings: InternalSettings;\n  private error_codes: ErrorCode;\n  private storeName: string = \"scorm_again_offline_data\";\n  private syncQueue: string = \"scorm_again_sync_queue\";\n  private isOnline: boolean = navigator.onLine;\n  private syncInProgress: boolean = false;\n\n  /**\n   * Constructor for OfflineStorageService\n   * @param {Settings} settings - The settings object\n   * @param {ErrorCode} error_codes - The error codes object\n   * @param {Function} apiLog - The logging function\n   */\n  constructor(\n    settings: InternalSettings,\n    error_codes: ErrorCode,\n    private apiLog: (\n      functionName: string,\n      message: any,\n      messageLevel: LogLevelEnum,\n      CMIElement?: string,\n    ) => void,\n  ) {\n    this.settings = settings;\n    this.error_codes = error_codes;\n\n    // Initialize listeners for online/offline events\n    window.addEventListener(\"online\", this.handleOnlineStatusChange.bind(this));\n    window.addEventListener(\"offline\", this.handleOnlineStatusChange.bind(this));\n  }\n\n  /**\n   * Handle changes in online status\n   */\n  private handleOnlineStatusChange() {\n    const wasOnline = this.isOnline;\n    this.isOnline = navigator.onLine;\n\n    // If we've come back online, trigger sync process\n    if (!wasOnline && this.isOnline) {\n      this.apiLog(\n        \"OfflineStorageService\",\n        \"Device is back online, attempting to sync...\",\n        LogLevelEnum.INFO,\n      );\n      this.syncOfflineData().then(\n        (success) => {\n          if (success) {\n            this.apiLog(\"OfflineStorageService\", \"Sync completed successfully\", LogLevelEnum.INFO);\n          } else {\n            this.apiLog(\"OfflineStorageService\", \"Sync failed\", LogLevelEnum.ERROR);\n          }\n        },\n        (error) => {\n          this.apiLog(\"OfflineStorageService\", `Error during sync: ${error}`, LogLevelEnum.ERROR);\n        },\n      );\n    } else if (wasOnline && !this.isOnline) {\n      this.apiLog(\n        \"OfflineStorageService\",\n        \"Device is offline, data will be stored locally\",\n        LogLevelEnum.INFO,\n      );\n    }\n  }\n\n  /**\n   * Store commit data offline\n   * @param {string} courseId - Identifier for the course\n   * @param {CommitObject} commitData - The data to store offline\n   * @returns {Promise<ResultObject>} - Result of the storage operation\n   */\n  async storeOffline(courseId: string, commitData: CommitObject): Promise<ResultObject> {\n    try {\n      // Store the data in the sync queue with timestamp and unique ID\n      const queueItem: SyncQueueItem = {\n        id: `${courseId}_${Date.now()}_${Math.random().toString(36).substring(2, 9)}`,\n        courseId,\n        timestamp: Date.now(),\n        data: commitData,\n        syncAttempts: 0,\n      };\n\n      // Get current queue\n      const currentQueue = (await this.getFromStorage<SyncQueueItem[]>(this.syncQueue)) || [];\n      currentQueue.push(queueItem);\n\n      // Save updated queue\n      await this.saveToStorage(this.syncQueue, currentQueue);\n\n      // Also update the current state in the main storage (latest known state)\n      await this.saveToStorage(`${this.storeName}_${courseId}`, commitData);\n\n      this.apiLog(\n        \"OfflineStorageService\",\n        `Stored data offline for course ${courseId}`,\n        LogLevelEnum.INFO,\n      );\n\n      return {\n        result: global_constants.SCORM_TRUE,\n        errorCode: 0,\n      };\n    } catch (error) {\n      this.apiLog(\n        \"OfflineStorageService\",\n        `Error storing offline data: ${error}`,\n        LogLevelEnum.ERROR,\n      );\n      return {\n        result: global_constants.SCORM_FALSE,\n        errorCode: this.error_codes.GENERAL ?? 0,\n      };\n    }\n  }\n\n  /**\n   * Get the stored offline data for a course\n   * @param {string} courseId - Identifier for the course\n   * @returns {Promise<CommitObject|null>} - The stored data or null if not found\n   */\n  async getOfflineData(courseId: string): Promise<CommitObject | null> {\n    try {\n      const data = await this.getFromStorage<CommitObject>(`${this.storeName}_${courseId}`);\n      return data || null;\n    } catch (error) {\n      this.apiLog(\n        \"OfflineStorageService\",\n        `Error retrieving offline data: ${error}`,\n        LogLevelEnum.ERROR,\n      );\n      return null;\n    }\n  }\n\n  /**\n   * Synchronize offline data with the LMS when connection is available\n   * @returns {Promise<boolean>} - Success status of synchronization\n   */\n  async syncOfflineData(): Promise<boolean> {\n    // Don't run multiple sync processes at once\n    if (this.syncInProgress || !this.isOnline) {\n      return false;\n    }\n\n    this.syncInProgress = true;\n\n    try {\n      // Get the queue of items to sync\n      const syncQueue = (await this.getFromStorage<SyncQueueItem[]>(this.syncQueue)) || [];\n\n      if (syncQueue.length === 0) {\n        this.syncInProgress = false;\n        return true;\n      }\n\n      this.apiLog(\n        \"OfflineStorageService\",\n        `Found ${syncQueue.length} items to sync`,\n        LogLevelEnum.INFO,\n      );\n\n      // Keep track of successful and failed sync attempts\n      const remainingQueue: SyncQueueItem[] = [];\n\n      // Process each queue item\n      for (const item of syncQueue) {\n        // Skip items that have been attempted too many times\n        if (item.syncAttempts >= 5) {\n          this.apiLog(\n            \"OfflineStorageService\",\n            `Skipping item ${item.id} after 5 failed attempts`,\n            LogLevelEnum.WARN,\n          );\n          continue;\n        }\n\n        try {\n          // Attempt to sync this item\n          const syncResult = await this.sendDataToLMS(item.data);\n\n          if (syncResult.result === global_constants.SCORM_TRUE) {\n            // Sync was successful, no need to keep this item\n            this.apiLog(\n              \"OfflineStorageService\",\n              `Successfully synced item ${item.id}`,\n              LogLevelEnum.INFO,\n            );\n          } else {\n            // Sync failed, increment attempts and keep in queue\n            item.syncAttempts++;\n            remainingQueue.push(item);\n            this.apiLog(\n              \"OfflineStorageService\",\n              `Failed to sync item ${item.id}, attempt #${item.syncAttempts}`,\n              LogLevelEnum.WARN,\n            );\n          }\n        } catch (error) {\n          // On error, increment attempts and keep in queue\n          item.syncAttempts++;\n          remainingQueue.push(item);\n          this.apiLog(\n            \"OfflineStorageService\",\n            `Error syncing item ${item.id}: ${error}`,\n            LogLevelEnum.ERROR,\n          );\n        }\n      }\n\n      // Update the queue with remaining items\n      await this.saveToStorage(this.syncQueue, remainingQueue);\n\n      this.apiLog(\n        \"OfflineStorageService\",\n        `Sync completed. ${syncQueue.length - remainingQueue.length} items synced, ${remainingQueue.length} items remaining`,\n        LogLevelEnum.INFO,\n      );\n\n      this.syncInProgress = false;\n      return true;\n    } catch (error) {\n      this.apiLog(\n        \"OfflineStorageService\",\n        `Error during sync process: ${error}`,\n        LogLevelEnum.ERROR,\n      );\n      this.syncInProgress = false;\n      return false;\n    }\n  }\n\n  /**\n   * Send data to the LMS when online\n   * @param {CommitObject} data - The data to send to the LMS\n   * @returns {Promise<ResultObject>} - Result of the sync operation\n   */\n  private async sendDataToLMS(data: CommitObject): Promise<ResultObject> {\n    if (!this.settings.lmsCommitUrl) {\n      return {\n        result: global_constants.SCORM_FALSE,\n        errorCode: this.error_codes.GENERAL || 101,\n      };\n    }\n\n    try {\n      // Apply request handler if configured\n      const processedData = this.settings.requestHandler(data);\n\n      // Send the data to the LMS\n      const init = {\n        method: \"POST\",\n        mode: this.settings.fetchMode,\n        body: JSON.stringify(processedData),\n        headers: {\n          ...this.settings.xhrHeaders,\n          \"Content-Type\": this.settings.commitRequestDataType,\n        },\n      } as RequestInit;\n\n      if (this.settings.xhrWithCredentials) {\n        init.credentials = \"include\";\n      }\n\n      const response = await fetch(this.settings.lmsCommitUrl as string, init);\n\n      // Process the response using the configured handler\n      const result =\n        typeof this.settings.responseHandler === \"function\"\n          ? await this.settings.responseHandler(response)\n          : await response.json();\n\n      if (\n        response.status >= 200 &&\n        response.status <= 299 &&\n        (result.result === true || result.result === global_constants.SCORM_TRUE)\n      ) {\n        if (!Object.hasOwnProperty.call(result, \"errorCode\")) {\n          result.errorCode = 0;\n        }\n        return result;\n      } else {\n        if (!Object.hasOwnProperty.call(result, \"errorCode\")) {\n          result.errorCode = this.error_codes.GENERAL;\n        }\n        return result;\n      }\n    } catch (error) {\n      this.apiLog(\n        \"OfflineStorageService\",\n        `Error sending data to LMS: ${error}`,\n        LogLevelEnum.ERROR,\n      );\n      return {\n        result: global_constants.SCORM_FALSE,\n        errorCode: this.error_codes.GENERAL || 101,\n      };\n    }\n  }\n\n  /**\n   * Check if the device is currently online\n   * @returns {boolean} - Online status\n   */\n  isDeviceOnline(): boolean {\n    return this.isOnline;\n  }\n\n  // noinspection JSValidateJSDoc\n  /**\n   * Get item from localStorage\n   * @param {string} key - The key to retrieve\n   * @returns {Promise<T|null>} - The retrieved data\n   */\n  private async getFromStorage<T>(key: string): Promise<T | null> {\n    const storedData = localStorage.getItem(key);\n    if (storedData) {\n      try {\n        return JSON.parse(storedData) as T;\n      } catch (e) {\n        return null;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Save item to localStorage\n   * @param {string} key - The key to store under\n   * @param {any} data - The data to store\n   * @returns {Promise<void>}\n   */\n  private async saveToStorage(key: string, data: any): Promise<void> {\n    localStorage.setItem(key, JSON.stringify(data));\n  }\n\n  /**\n   * Check if there is pending offline data for a course\n   * @param {string} courseId - Identifier for the course\n   * @returns {Promise<boolean>} - Whether there is pending data\n   */\n  async hasPendingOfflineData(courseId: string): Promise<boolean> {\n    const queue = (await this.getFromStorage<SyncQueueItem[]>(this.syncQueue)) || [];\n    return queue.some((item) => item.courseId === courseId);\n  }\n\n  /**\n   * Update the service settings\n   * @param {Settings} settings - The new settings\n   */\n  updateSettings(settings: InternalSettings): void {\n    this.settings = settings;\n  }\n}\n","/**\n * Base class for API cmi objects\n */\nexport abstract class BaseCMI {\n  jsonString = false;\n  protected readonly _cmi_element: string;\n  protected _initialized = false;\n\n  /**\n   * Constructor for BaseCMI\n   * @param {string} cmi_element\n   */\n  constructor(cmi_element: string) {\n    this._cmi_element = cmi_element;\n  }\n\n  /**\n   * Getter for _initialized\n   * @return {boolean}\n   */\n  get initialized(): boolean {\n    return this._initialized;\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize(): void {\n    this._initialized = true;\n  }\n\n  abstract reset(): void;\n}\n\n/**\n * Base class for cmi root objects\n */\nexport abstract class BaseRootCMI extends BaseCMI {\n  protected _start_time: number | undefined;\n\n  /**\n   * Start time of the course\n   * @type {number | undefined}\n   * @protected\n   */\n  get start_time(): number | undefined {\n    return this._start_time;\n  }\n\n  /**\n   * Setter for start_time. Can only be called once.\n   */\n  setStartTime(): void {\n    if (this._start_time === undefined) {\n      this._start_time = new Date().getTime();\n    } else {\n      throw new Error(\"Start time has already been set.\");\n    }\n  }\n\n  abstract getCurrentTotalTime(): string;\n}\n","export type ErrorCode = {\n  [key: string]: number;\n};\n\nexport const global_errors: ErrorCode = {\n  GENERAL: 101,\n  INITIALIZATION_FAILED: 101,\n  INITIALIZED: 101,\n  TERMINATED: 101,\n  TERMINATION_FAILURE: 101,\n  TERMINATION_BEFORE_INIT: 101,\n  MULTIPLE_TERMINATION: 101,\n  RETRIEVE_BEFORE_INIT: 101,\n  RETRIEVE_AFTER_TERM: 101,\n  STORE_BEFORE_INIT: 101,\n  STORE_AFTER_TERM: 101,\n  COMMIT_BEFORE_INIT: 101,\n  COMMIT_AFTER_TERM: 101,\n  ARGUMENT_ERROR: 101,\n  CHILDREN_ERROR: 101,\n  COUNT_ERROR: 101,\n  GENERAL_GET_FAILURE: 101,\n  GENERAL_SET_FAILURE: 101,\n  GENERAL_COMMIT_FAILURE: 101,\n  UNDEFINED_DATA_MODEL: 101,\n  UNIMPLEMENTED_ELEMENT: 101,\n  VALUE_NOT_INITIALIZED: 101,\n  INVALID_SET_VALUE: 101,\n  READ_ONLY_ELEMENT: 101,\n  WRITE_ONLY_ELEMENT: 101,\n  TYPE_MISMATCH: 101,\n  VALUE_OUT_OF_RANGE: 101,\n  DEPENDENCY_NOT_ESTABLISHED: 101,\n};\n\nexport const scorm12_errors: ErrorCode = {\n  ...global_errors,\n  RETRIEVE_BEFORE_INIT: 301,\n  STORE_BEFORE_INIT: 301,\n  COMMIT_BEFORE_INIT: 301,\n  ARGUMENT_ERROR: 201,\n  CHILDREN_ERROR: 202,\n  COUNT_ERROR: 203,\n  UNDEFINED_DATA_MODEL: 401,\n  UNIMPLEMENTED_ELEMENT: 401,\n  VALUE_NOT_INITIALIZED: 301,\n  INVALID_SET_VALUE: 402,\n  READ_ONLY_ELEMENT: 403,\n  WRITE_ONLY_ELEMENT: 404,\n  TYPE_MISMATCH: 405,\n  VALUE_OUT_OF_RANGE: 407,\n  DEPENDENCY_NOT_ESTABLISHED: 408,\n};\n\nexport const scorm2004_errors: ErrorCode = {\n  ...global_errors,\n  INITIALIZATION_FAILED: 102,\n  INITIALIZED: 103,\n  TERMINATED: 104,\n  TERMINATION_FAILURE: 111,\n  TERMINATION_BEFORE_INIT: 112,\n  MULTIPLE_TERMINATION: 113,\n  MULTIPLE_TERMINATIONS: 113,\n  RETRIEVE_BEFORE_INIT: 122,\n  RETRIEVE_AFTER_TERM: 123,\n  STORE_BEFORE_INIT: 132,\n  STORE_AFTER_TERM: 133,\n  COMMIT_BEFORE_INIT: 142,\n  COMMIT_AFTER_TERM: 143,\n  ARGUMENT_ERROR: 201,\n  GENERAL_GET_FAILURE: 301,\n  GENERAL_SET_FAILURE: 351,\n  GENERAL_COMMIT_FAILURE: 391,\n  UNDEFINED_DATA_MODEL: 401,\n  UNIMPLEMENTED_ELEMENT: 402,\n  VALUE_NOT_INITIALIZED: 403,\n  READ_ONLY_ELEMENT: 404,\n  WRITE_ONLY_ELEMENT: 405,\n  TYPE_MISMATCH: 406,\n  VALUE_OUT_OF_RANGE: 407,\n  DEPENDENCY_NOT_ESTABLISHED: 408,\n};\n","import { BaseCMI } from \"./base_cmi\";\nimport { BaseScormValidationError } from \"../../exceptions\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\n\n/**\n * Base class for cmi *.n objects\n */\nexport class CMIArray extends BaseCMI {\n  private readonly _errorCode: number;\n  private readonly _errorClass: typeof BaseScormValidationError;\n  private readonly __children: string;\n  public childArray: any[];\n\n  /**\n   * Constructor cmi *.n arrays\n   * @param {object} params\n   */\n  constructor(params: {\n    CMIElement: string;\n    children: string;\n    errorCode?: number;\n    errorClass?: typeof BaseScormValidationError;\n  }) {\n    super(params.CMIElement);\n    this.__children = params.children;\n    this._errorCode = params.errorCode || (scorm12_errors.GENERAL as number);\n    this._errorClass = params.errorClass || BaseScormValidationError;\n    this.childArray = [];\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(wipe: boolean = false): void {\n    this._initialized = false;\n    if (wipe) {\n      this.childArray = [];\n    } else {\n      // Reset all children\n      for (let i = 0; i < this.childArray.length; i++) {\n        this.childArray[i].reset();\n      }\n    }\n  }\n\n  /**\n   * Getter for _children\n   * @return {string}\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for _children. Just throws an error.\n   * @param {string} _children\n   */\n  set _children(_children: string) {\n    throw new this._errorClass(this._cmi_element + \"._children\", this._errorCode);\n  }\n\n  /**\n   * Getter for _count\n   * @return {number}\n   */\n  get _count(): number {\n    return this.childArray.length;\n  }\n\n  /**\n   * Setter for _count. Just throws an error.\n   * @param {number} _count\n   */\n  set _count(_count: number) {\n    throw new this._errorClass(this._cmi_element + \"._count\", this._errorCode);\n  }\n\n  /**\n   * toJSON for *.n arrays\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result: { [key: string]: any } = {};\n    for (let i = 0; i < this.childArray.length; i++) {\n      result[i + \"\"] = this.childArray[i];\n    }\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { ErrorCode } from \"./constants/error_codes\";\nimport { global_constants } from \"./constants/api_constants\";\nimport * as Utilities from \"./utilities\";\nimport { formatMessage, StringKeyMap, stringMatches } from \"./utilities\";\nimport { BaseCMI, BaseRootCMI } from \"./cmi/common/base_cmi\";\nimport {\n  CommitObject,\n  InternalSettings,\n  LogLevel,\n  ResultObject,\n  Settings\n} from \"./types/api_types\";\nimport { defaultLogHandler, DefaultSettings } from \"./constants/default_settings\";\nimport { IBaseAPI } from \"./interfaces/IBaseAPI\";\nimport { ScheduledCommit } from \"./types/scheduled_commit\";\nimport { LogLevelEnum } from \"./constants/enums\";\nimport { HttpService } from \"./services/HttpService\";\nimport { EventService } from \"./services/EventService\";\nimport { SerializationService } from \"./services/SerializationService\";\nimport { createErrorHandlingService } from \"./services/ErrorHandlingService\";\nimport { getLoggingService } from \"./services/LoggingService\";\nimport { OfflineStorageService } from \"./services/OfflineStorageService\";\nimport {\n  ICMIDataService,\n  IErrorHandlingService,\n  IEventService,\n  IHttpService,\n  ILoggingService,\n  IOfflineStorageService,\n  ISerializationService\n} from \"./interfaces/services\";\nimport { CMIArray } from \"./cmi/common/array\";\nimport { ValidationError } from \"./exceptions\";\n\n/**\n * Base API class for AICC, SCORM 1.2, and SCORM 2004. Should be considered\n * abstract, and never initialized on its own.\n */\nexport default abstract class BaseAPI implements IBaseAPI {\n  private _timeout?: ScheduledCommit | undefined;\n  private readonly _error_codes: ErrorCode;\n  private _settings: InternalSettings = DefaultSettings;\n  private readonly _httpService: IHttpService;\n  private _eventService: IEventService;\n  private _serializationService: ISerializationService;\n  private readonly _errorHandlingService: IErrorHandlingService;\n  private readonly _loggingService: ILoggingService;\n  private readonly _offlineStorageService?: IOfflineStorageService;\n  private _courseId: string = \"\";\n\n  /**\n   * Constructor for Base API class. Sets some shared API fields, as well as\n   * sets up options for the API.\n   * @param {ErrorCode} error_codes - The error codes object\n   * @param {Settings} settings - Optional settings for the API\n   * @param {IHttpService} httpService - Optional HTTP service instance\n   * @param {IEventService} eventService - Optional Event service instance\n   * @param {ISerializationService} serializationService - Optional Serialization service instance\n   * @param {ICMIDataService} cmiDataService - Optional CMI Data service instance\n   * @param {IErrorHandlingService} errorHandlingService - Optional Error Handling service instance\n   * @param {ILoggingService} loggingService - Optional Logging service instance\n   * @param {IOfflineStorageService} offlineStorageService - Optional Offline Storage service instance\n   */\n  protected constructor(\n    error_codes: ErrorCode,\n    settings?: Settings,\n    httpService?: IHttpService,\n    eventService?: IEventService,\n    serializationService?: ISerializationService,\n    cmiDataService?: ICMIDataService,\n    errorHandlingService?: IErrorHandlingService,\n    loggingService?: ILoggingService,\n    offlineStorageService?: IOfflineStorageService\n  ) {\n    if (new.target === BaseAPI) {\n      throw new TypeError(\"Cannot construct BaseAPI instances directly\");\n    }\n    this.currentState = global_constants.STATE_NOT_INITIALIZED;\n\n    this._error_codes = error_codes;\n\n    if (settings) {\n      this.settings = {\n        ...DefaultSettings,\n        ...settings\n      } as InternalSettings;\n    }\n\n    // Initialize and configure LoggingService\n    this._loggingService = loggingService || getLoggingService();\n    this._loggingService.setLogLevel(this.settings.logLevel);\n\n    // If settings include a custom onLogMessage function, use it as the log handler\n    if (this.settings.onLogMessage) {\n      this._loggingService.setLogHandler(this.settings.onLogMessage);\n    } else {\n      this._loggingService.setLogHandler(defaultLogHandler);\n    }\n\n    // Initialize HTTP service\n    this._httpService = httpService || new HttpService(this.settings, this._error_codes);\n\n    // Initialize Event service\n    this._eventService =\n      eventService ||\n      new EventService((functionName, message, level, element) =>\n        this.apiLog(functionName, message, level, element)\n      );\n\n    // Initialize Serialization service\n    this._serializationService = serializationService || new SerializationService();\n\n    // Initialize Error Handling service\n    this._errorHandlingService =\n      errorHandlingService ||\n      createErrorHandlingService(\n        this._error_codes,\n        (functionName, message, level, element) =>\n          this.apiLog(functionName, message, level, element),\n        (errorNumber, detail) => this.getLmsErrorMessageDetails(errorNumber, detail)\n      );\n\n    // Initialize Offline Storage service if enabled\n    if (this.settings.enableOfflineSupport) {\n      this._offlineStorageService =\n        offlineStorageService ||\n        new OfflineStorageService(\n          this.settings,\n          this._error_codes,\n          (functionName, message, level, element) =>\n            this.apiLog(functionName, message, level, element)\n        );\n\n      if (this.settings.courseId) {\n        this._courseId = this.settings.courseId;\n      }\n\n      // Check for offline data to restore on initialization\n      if (this._offlineStorageService && this._courseId) {\n        this._offlineStorageService\n          .getOfflineData(this._courseId)\n          .then((offlineData) => {\n            if (offlineData) {\n              this.apiLog(\"constructor\", \"Found offline data to restore\", LogLevelEnum.INFO);\n              // Restore data from offline storage\n              this.loadFromJSON(offlineData.runtimeData);\n            }\n          })\n          .catch((error) => {\n            this.apiLog(\n              \"constructor\",\n              `Error retrieving offline data: ${error}`,\n              LogLevelEnum.ERROR\n            );\n          });\n      }\n    }\n  }\n\n  public abstract cmi: BaseCMI;\n  public startingData?: StringKeyMap;\n\n  public currentState: number;\n\n  /**\n   * Get the last error code\n   * @return {string}\n   */\n  get lastErrorCode(): string {\n    return this._errorHandlingService?.lastErrorCode ?? \"0\";\n  }\n\n  /**\n   * Set the last error code\n   * @param {string} errorCode\n   */\n  set lastErrorCode(errorCode: string) {\n    if (this._errorHandlingService) {\n      this._errorHandlingService.lastErrorCode = errorCode;\n    }\n  }\n\n  /**\n   * Reset the API to its initial state.\n   * This method clears all current data and resets the API to an uninitialized state.\n   * It can optionally accept new settings to configure the API after reset.\n   *\n   * @param {Settings} settings - Optional new settings to apply after reset\n   */\n  abstract reset(settings?: Settings): void;\n\n  /**\n   * Common reset method for all APIs. New settings are merged with the existing settings.\n   * @param {Settings} settings\n   * @protected\n   */\n  commonReset(settings?: Settings): void {\n    this.apiLog(\"reset\", \"Called\", LogLevelEnum.INFO);\n\n    this.settings = { ...this.settings, ...settings };\n\n    this.clearScheduledCommit();\n    this.currentState = global_constants.STATE_NOT_INITIALIZED;\n    this.lastErrorCode = \"0\";\n    this._eventService.reset();\n    this.startingData = {};\n\n    // Update offline storage service with new settings if it exists\n    if (this._offlineStorageService) {\n      this._offlineStorageService.updateSettings(this.settings);\n\n      if (settings?.courseId) {\n        this._courseId = settings.courseId;\n      }\n    }\n  }\n\n  /**\n   * Initialize the API\n   * @param {string} callbackName\n   * @param {string} initializeMessage\n   * @param {string} terminationMessage\n   * @return {string}\n   */\n  initialize(\n    callbackName: string,\n    initializeMessage?: string,\n    terminationMessage?: string\n  ): string {\n    let returnValue = global_constants.SCORM_FALSE;\n\n    if (this.isInitialized()) {\n      this.throwSCORMError(\"api\", this._error_codes.INITIALIZED, initializeMessage);\n    } else if (this.isTerminated()) {\n      this.throwSCORMError(\"api\", this._error_codes.TERMINATED, terminationMessage);\n    } else {\n      if (this.settings.selfReportSessionTime) {\n        (this.cmi as BaseRootCMI).setStartTime();\n      }\n\n      this.currentState = global_constants.STATE_INITIALIZED;\n      this.lastErrorCode = \"0\";\n      returnValue = global_constants.SCORM_TRUE;\n      this.processListeners(callbackName);\n\n      // If enabled, attempt to sync offline data on initialization\n      if (\n        this.settings.enableOfflineSupport &&\n        this._offlineStorageService &&\n        this._courseId &&\n        this.settings.syncOnInitialize &&\n        this._offlineStorageService.isDeviceOnline()\n      ) {\n        this._offlineStorageService.hasPendingOfflineData(this._courseId).then((hasPendingData) => {\n          if (hasPendingData) {\n            this.apiLog(\n              callbackName,\n              \"Syncing pending offline data on initialization\",\n              LogLevelEnum.INFO\n            );\n            this._offlineStorageService?.syncOfflineData().then((syncSuccess) => {\n              if (syncSuccess) {\n                this.apiLog(callbackName, \"Successfully synced offline data\", LogLevelEnum.INFO);\n                this.processListeners(\"OfflineDataSynced\");\n              }\n            });\n          }\n        });\n      }\n    }\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n    this.clearSCORMError(returnValue);\n\n    return returnValue;\n  }\n\n  /**\n   * Initialize the LMS API\n   * @return {string} \"true\" if successful, \"false\" otherwise\n   */\n  abstract lmsInitialize(): string;\n\n  /**\n   * Finish the current LMS API session\n   * @return {string} \"true\" if successful, \"false\" otherwise\n   */\n  abstract lmsFinish(): string;\n\n  /**\n   * Get the value of a CMI element from the LMS\n   * @param {string} CMIElement - The CMI element to get the value of\n   * @return {string} The value of the CMI element\n   */\n  abstract lmsGetValue(CMIElement: string): string;\n\n  /**\n   * Set the value of a CMI element in the LMS\n   * @param {string} CMIElement - The CMI element to set the value of\n   * @param {any} value - The value to set\n   * @return {string} \"true\" if successful, \"false\" otherwise\n   */\n  abstract lmsSetValue(CMIElement: string, value: any): string;\n\n  /**\n   * Commit the current data to the LMS\n   * @return {string} \"true\" if successful, \"false\" otherwise\n   */\n  abstract lmsCommit(): string;\n\n  /**\n   * Get the last error code from the LMS\n   * @return {string} The last error code\n   */\n  abstract lmsGetLastError(): string;\n\n  /**\n   * Get the error string for a specific error code\n   * @param {string|number} CMIErrorCode - The error code to get the string for\n   * @return {string} The error string\n   */\n  abstract lmsGetErrorString(CMIErrorCode: string | number): string;\n\n  /**\n   * Get diagnostic information for a specific error code\n   * @param {string|number} CMIErrorCode - The error code to get diagnostic information for\n   * @return {string} The diagnostic information\n   */\n  abstract lmsGetDiagnostic(CMIErrorCode: string | number): string;\n\n  /**\n   * Abstract method for validating that a response is correct.\n   * This method is used to validate the format and content of a response\n   * before it is set in the CMI data model.\n   *\n   * @param {string} _CMIElement - The CMI element path to validate\n   * @param {any} _value - The value to validate\n   * @throws {Error} If the response format is invalid\n   */\n  abstract validateCorrectResponse(_CMIElement: string, _value: any): void;\n\n  /**\n   * Gets or builds a new child element to add to the array.\n   * APIs that inherit BaseAPI should override this method.\n   *\n   * @param {string} _CMIElement - unused\n   * @param {*} _value - unused\n   * @param {boolean} _foundFirstIndex - unused\n   * @return {BaseCMI|null}\n   * @abstract\n   */\n  abstract getChildElement(\n    _CMIElement: string,\n    _value: any,\n    _foundFirstIndex: boolean\n  ): BaseCMI | null;\n\n  /**\n   * Attempts to store the data to the LMS, logs data if no LMS configured\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {boolean} _calculateTotalTime\n   * @return {ResultObject}\n   * @abstract\n   */\n  abstract storeData(_calculateTotalTime: boolean): Promise<ResultObject>;\n\n  /**\n   * Render the cmi object to the proper format for LMS commit\n   *\n   * @param {boolean} _terminateCommit - Whether this commit is part of the termination process\n   * @param {boolean} [_includeTotalTime] - Whether to include total time in the commit data\n   * @return {StringKeyMap|Array}\n   * @abstract\n   */\n  abstract renderCommitCMI(\n    _terminateCommit: boolean,\n    _includeTotalTime?: boolean\n  ): StringKeyMap | Array<string>;\n\n  /**\n   * Render the commit object to the shortened format for LMS commit.\n   * This method transforms the CMI data into a format suitable for sending to the LMS.\n   * It is called during the commit process to prepare the data for transmission.\n   *\n   * @param {boolean} _terminateCommit - Whether this commit is part of the termination process\n   * @param {boolean} [_includeTotalTime] - Whether to include total time in the commit data\n   * @return {CommitObject} A formatted object containing the data to be sent to the LMS\n   * @example\n   * // Example of a commit object structure\n   * {\n   *   method: \"POST\",\n   *   params: {\n   *     cmi: { ... },\n   *     finishState: \"COMPLETED\"\n   *   }\n   * }\n   */\n  abstract renderCommitObject(_terminateCommit: boolean, _includeTotalTime?: boolean): CommitObject;\n\n  /**\n   * Logging for all SCORM actions\n   *\n   * @param {string} functionName\n   * @param {string} logMessage\n   * @param {number} messageLevel\n   * @param {string} CMIElement\n   */\n  apiLog(functionName: string, logMessage: string, messageLevel: LogLevel, CMIElement?: string) {\n    logMessage = formatMessage(functionName, logMessage, CMIElement);\n\n    // Delegate to LoggingService which handles log level comparison properly\n    this._loggingService.log(messageLevel, logMessage);\n  }\n\n  /**\n   * Getter for _settings\n   * @return {InternalSettings}\n   */\n  get settings(): InternalSettings {\n    return this._settings;\n  }\n\n  /**\n   * Setter for _settings\n   * @param {Settings} settings\n   */\n  set settings(settings: Settings) {\n    const previousSettings = this._settings;\n    // Merge the incoming settings with the existing settings\n    this._settings = { ...this._settings, ...settings } as InternalSettings;\n\n    // Update HTTP service settings\n    this._httpService?.updateSettings(this._settings);\n\n    // The following properties are duplicated as class properties for easier access\n    // and need to be manually updated to stay in sync with the settings object\n\n    // Update log level if it changed\n    if (settings.logLevel !== undefined && settings.logLevel !== previousSettings.logLevel) {\n      this._loggingService?.setLogLevel(settings.logLevel);\n    }\n\n    // Update log handler if onLogMessage changed\n    if (\n      settings.onLogMessage !== undefined &&\n      settings.onLogMessage !== previousSettings.onLogMessage\n    ) {\n      this._loggingService?.setLogHandler(settings.onLogMessage);\n    }\n  }\n\n  /**\n   * Terminates the current run of the API\n   * @param {string} callbackName\n   * @param {boolean} checkTerminated\n   * @return {string}\n   */\n  async terminate(callbackName: string, checkTerminated: boolean): Promise<string> {\n    let returnValue = global_constants.SCORM_FALSE;\n\n    if (\n      this.checkState(\n        checkTerminated,\n        this._error_codes.TERMINATION_BEFORE_INIT ?? 0,\n        this._error_codes.MULTIPLE_TERMINATION ?? 0\n      )\n    ) {\n      this.currentState = global_constants.STATE_TERMINATED;\n      // If enabled, attempt to sync offline data before termination\n      if (\n        this.settings.enableOfflineSupport &&\n        this._offlineStorageService &&\n        this._courseId &&\n        this.settings.syncOnTerminate &&\n        this._offlineStorageService.isDeviceOnline()\n      ) {\n        const hasPendingData = await this._offlineStorageService.hasPendingOfflineData(\n          this._courseId\n        );\n        if (hasPendingData) {\n          this.apiLog(\n            callbackName,\n            \"Syncing pending offline data before termination\",\n            LogLevelEnum.INFO\n          );\n          await this._offlineStorageService.syncOfflineData();\n        }\n      }\n\n      const result: ResultObject = await this.storeData(true);\n      if ((result.errorCode ?? 0) > 0) {\n        // Log detailed error information before throwing SCORM error\n        if (result.errorMessage) {\n          this.apiLog(\n            \"terminate\",\n            `Terminate failed with error: ${result.errorMessage}`,\n            LogLevelEnum.ERROR\n          );\n        }\n        if (result.errorDetails) {\n          this.apiLog(\n            \"terminate\",\n            `Error details: ${JSON.stringify(result.errorDetails)}`,\n            LogLevelEnum.DEBUG\n          );\n        }\n        this.throwSCORMError(\"api\", result.errorCode ?? 0);\n      }\n      returnValue = result?.result ?? global_constants.SCORM_FALSE;\n\n      if (checkTerminated) this.lastErrorCode = \"0\";\n\n      returnValue = global_constants.SCORM_TRUE;\n      this.processListeners(callbackName);\n    }\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n    this.clearSCORMError(returnValue);\n\n    return returnValue;\n  }\n\n  /**\n   * Get the value of the CMIElement.\n   *\n   * @param {string} callbackName\n   * @param {boolean} checkTerminated\n   * @param {string} CMIElement\n   * @return {string}\n   */\n  getValue(callbackName: string, checkTerminated: boolean, CMIElement: string): string {\n    let returnValue: string = \"\";\n\n    if (\n      this.checkState(\n        checkTerminated,\n        this._error_codes.RETRIEVE_BEFORE_INIT ?? 0,\n        this._error_codes.RETRIEVE_AFTER_TERM ?? 0\n      )\n    ) {\n      // Only reset the error code if there's no error and checkTerminated is true\n      // This is a no-op if lastErrorCode is already \"0\"\n      try {\n        returnValue = this.getCMIValue(CMIElement);\n      } catch (e) {\n        returnValue = this.handleValueAccessException(CMIElement, e, returnValue);\n      }\n      this.processListeners(callbackName, CMIElement);\n    }\n\n    this.apiLog(callbackName, \": returned: \" + returnValue, LogLevelEnum.INFO, CMIElement);\n\n    if (returnValue === undefined) {\n      return \"\";\n    }\n\n    // Only clear the error code if there's no error\n    if (this.lastErrorCode === \"0\") {\n      this.clearSCORMError(returnValue);\n    }\n\n    return returnValue;\n  }\n\n  /**\n   * Sets the value of the CMIElement.\n   *\n   * @param {string} callbackName\n   * @param {string} commitCallback\n   * @param {boolean} checkTerminated\n   * @param {string} CMIElement\n   * @param {*} value\n   * @return {string}\n   */\n  setValue(\n    callbackName: string,\n    commitCallback: string,\n    checkTerminated: boolean,\n    CMIElement: string,\n    value: any\n  ): string {\n    if (value !== undefined) {\n      value = String(value);\n    }\n    let returnValue: string = global_constants.SCORM_FALSE;\n\n    if (\n      this.checkState(\n        checkTerminated,\n        this._error_codes.STORE_BEFORE_INIT ?? 0,\n        this._error_codes.STORE_AFTER_TERM ?? 0\n      )\n    ) {\n      // Only reset the error code if there's no error and checkTerminated is true\n      // This is a no-op if lastErrorCode is already \"0\"\n      try {\n        returnValue = this.setCMIValue(CMIElement, value);\n      } catch (e) {\n        returnValue = this.handleValueAccessException(CMIElement, e, returnValue);\n      }\n      this.processListeners(callbackName, CMIElement, value);\n    }\n\n    if (returnValue === undefined) {\n      returnValue = global_constants.SCORM_FALSE;\n    }\n\n    // If we didn't have any errors while setting the data, go ahead and\n    // schedule a commit, if autocommit is turned on\n    if (String(this.lastErrorCode) === \"0\") {\n      if (this.settings.autocommit) {\n        this.scheduleCommit(this.settings.autocommitSeconds * 1000, commitCallback);\n      }\n    }\n\n    this.apiLog(\n      callbackName,\n      \": \" + value + \": result: \" + returnValue,\n      LogLevelEnum.INFO,\n      CMIElement\n    );\n\n    // Only clear the error code if there's no error\n    if (this.lastErrorCode === \"0\") {\n      this.clearSCORMError(returnValue);\n    }\n\n    return returnValue;\n  }\n\n  /**\n   * Orders LMS to store all content parameters\n   * @param {string} callbackName\n   * @param {boolean} checkTerminated\n   * @return {string}\n   */\n  async commit(callbackName: string, checkTerminated: boolean = false): Promise<string> {\n    this.clearScheduledCommit();\n\n    let returnValue = global_constants.SCORM_FALSE;\n\n    if (\n      this.checkState(\n        checkTerminated,\n        this._error_codes.COMMIT_BEFORE_INIT ?? 0,\n        this._error_codes.COMMIT_AFTER_TERM ?? 0\n      )\n    ) {\n      const result = await this.storeData(false);\n      if ((result.errorCode ?? 0) > 0) {\n        // Log detailed error information before throwing SCORM error\n        if (result.errorMessage) {\n          this.apiLog(\n            \"commit\",\n            `Commit failed with error: ${result.errorMessage}`,\n            LogLevelEnum.ERROR\n          );\n        }\n        if (result.errorDetails) {\n          this.apiLog(\n            \"commit\",\n            `Error details: ${JSON.stringify(result.errorDetails)}`,\n            LogLevelEnum.DEBUG\n          );\n        }\n        this.throwSCORMError(\"api\", result.errorCode);\n      }\n      returnValue = result?.result ?? global_constants.SCORM_FALSE;\n\n      this.apiLog(callbackName, \" Result: \" + returnValue, LogLevelEnum.DEBUG, \"HttpRequest\");\n\n      if (checkTerminated) this.lastErrorCode = \"0\";\n\n      this.processListeners(callbackName);\n\n      // If online and there is offline data pending, attempt to sync it\n      if (\n        this.settings.enableOfflineSupport &&\n        this._offlineStorageService &&\n        this._offlineStorageService.isDeviceOnline() &&\n        this._courseId\n      ) {\n        this._offlineStorageService.hasPendingOfflineData(this._courseId).then((hasPendingData) => {\n          if (hasPendingData) {\n            this.apiLog(callbackName, \"Syncing pending offline data\", LogLevelEnum.INFO);\n            this._offlineStorageService?.syncOfflineData().then((syncSuccess) => {\n              if (syncSuccess) {\n                this.apiLog(callbackName, \"Successfully synced offline data\", LogLevelEnum.INFO);\n                this.processListeners(\"OfflineDataSynced\");\n              } else {\n                this.apiLog(callbackName, \"Failed to sync some offline data\", LogLevelEnum.WARN);\n              }\n            });\n          }\n        });\n      }\n    }\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n\n    // Only clear the error code if there's no error\n    if (this.lastErrorCode === \"0\") {\n      this.clearSCORMError(returnValue);\n    }\n\n    return returnValue;\n  }\n\n  /**\n   * Returns last error code\n   * @param {string} callbackName\n   * @return {string}\n   */\n  getLastError(callbackName: string): string {\n    const returnValue = String(this.lastErrorCode);\n\n    this.processListeners(callbackName);\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n\n    return returnValue;\n  }\n\n  /**\n   * Returns the errorNumber error description\n   *\n   * @param {string} callbackName\n   * @param {(string|number)} CMIErrorCode\n   * @return {string}\n   */\n  getErrorString(callbackName: string, CMIErrorCode: string | number): string {\n    let returnValue = \"\";\n\n    if (CMIErrorCode !== null && CMIErrorCode !== \"\") {\n      returnValue = this.getLmsErrorMessageDetails(CMIErrorCode);\n      this.processListeners(callbackName);\n    }\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n\n    return returnValue;\n  }\n\n  /**\n   * Returns a comprehensive description of the errorNumber error.\n   *\n   * @param {string} callbackName\n   * @param {(string|number)} CMIErrorCode\n   * @return {string}\n   */\n  getDiagnostic(callbackName: string, CMIErrorCode: string | number): string {\n    let returnValue = \"\";\n\n    if (CMIErrorCode !== null && CMIErrorCode !== \"\") {\n      returnValue = this.getLmsErrorMessageDetails(CMIErrorCode, true);\n      this.processListeners(callbackName);\n    }\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n\n    return returnValue;\n  }\n\n  /**\n   * Checks the LMS state and ensures it has been initialized.\n   *\n   * @param {boolean} checkTerminated\n   * @param {number} beforeInitError\n   * @param {number} afterTermError\n   * @return {boolean}\n   */\n  checkState(checkTerminated: boolean, beforeInitError: number, afterTermError: number): boolean {\n    if (this.isNotInitialized()) {\n      this.throwSCORMError(\"api\", beforeInitError);\n      return false;\n    } else if (checkTerminated && this.isTerminated()) {\n      this.throwSCORMError(\"api\", afterTermError);\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Returns the message that corresponds to errorNumber\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {(string|number)} _errorNumber\n   * @param {boolean} _detail\n   * @return {string}\n   * @abstract\n   */\n  getLmsErrorMessageDetails(_errorNumber: string | number, _detail: boolean = false): string {\n    throw new Error(\"The getLmsErrorMessageDetails method has not been implemented\");\n  }\n\n  /**\n   * Gets the value for the specific element.\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {string} _CMIElement\n   * @return {string}\n   * @abstract\n   */\n  getCMIValue(_CMIElement: string): string {\n    throw new Error(\"The getCMIValue method has not been implemented\");\n  }\n\n  /**\n   * Sets the value for the specific element.\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {string} _CMIElement\n   * @param {any} _value\n   * @return {string}\n   * @abstract\n   */\n  setCMIValue(_CMIElement: string, _value: any): string {\n    throw new Error(\"The setCMIValue method has not been implemented\");\n  }\n\n  /**\n   * Shared API method to set a valid for a given element.\n   *\n   * @param {string} methodName\n   * @param {boolean} scorm2004\n   * @param {string} CMIElement\n   * @param {any} value\n   * @return {string}\n   */\n  _commonSetCMIValue(\n    methodName: string,\n    scorm2004: boolean,\n    CMIElement: string,\n    value: any\n  ): string {\n    if (!CMIElement || CMIElement === \"\") {\n      return global_constants.SCORM_FALSE;\n    }\n\n    this.lastErrorCode = \"0\";\n\n    const structure = CMIElement.split(\".\");\n    let refObject: StringKeyMap | BaseCMI = this as StringKeyMap;\n    let returnValue = global_constants.SCORM_FALSE;\n    let foundFirstIndex = false;\n\n    const invalidErrorMessage = `The data model element passed to ${methodName} (${CMIElement}) is not a valid SCORM data model element.`;\n    const invalidErrorCode = scorm2004\n      ? this._error_codes.UNDEFINED_DATA_MODEL\n      : this._error_codes.GENERAL;\n\n    for (let idx = 0; idx < structure.length; idx++) {\n      const attribute = structure[idx];\n\n      if (idx === structure.length - 1) {\n        if (scorm2004 && attribute && attribute.substring(0, 8) === \"{target=\") {\n          if (this.isInitialized()) {\n            this.throwSCORMError(CMIElement, this._error_codes.READ_ONLY_ELEMENT);\n            break;\n          } else {\n            refObject = {\n              ...refObject,\n              attribute: value\n            };\n          }\n        } else if (\n          typeof attribute === \"undefined\" ||\n          !this._checkObjectHasProperty(refObject as StringKeyMap, attribute)\n        ) {\n          this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n          break;\n        } else {\n          if (\n            stringMatches(CMIElement, \"\\\\.correct_responses\\\\.\\\\d+$\") &&\n            this.isInitialized() &&\n            attribute !== \"pattern\"\n          ) {\n            this.validateCorrectResponse(CMIElement, value);\n            if (this.lastErrorCode !== \"0\") {\n              this.throwSCORMError(CMIElement, this._error_codes.TYPE_MISMATCH);\n              break;\n            }\n          }\n\n          if (!scorm2004 || this._errorHandlingService.lastErrorCode === \"0\") {\n            if (\n              typeof attribute === \"undefined\" ||\n              attribute === \"__proto__\" ||\n              attribute === \"constructor\"\n            ) {\n              this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n              break;\n            }\n            (refObject as StringKeyMap)[attribute] = value;\n            returnValue = global_constants.SCORM_TRUE;\n          }\n        }\n      } else {\n        if (\n          typeof attribute === \"undefined\" ||\n          !this._checkObjectHasProperty(refObject as StringKeyMap, attribute)\n        ) {\n          this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n          break;\n        }\n        refObject = (refObject as StringKeyMap)[attribute] as StringKeyMap;\n        if (!refObject) {\n          this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n          break;\n        }\n\n        if (refObject instanceof CMIArray) {\n          const index = parseInt(structure[idx + 1] || \"0\", 10);\n\n          // SCO is trying to set an item on an array\n          if (!isNaN(index)) {\n            const item = refObject.childArray[index];\n\n            if (item) {\n              refObject = item;\n              foundFirstIndex = true;\n            } else {\n              const newChild = this.getChildElement(CMIElement, value, foundFirstIndex);\n              foundFirstIndex = true;\n\n              if (!newChild) {\n                if (this.lastErrorCode === \"0\") {\n                  this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n                }\n                break;\n              } else {\n                if (refObject.initialized) newChild.initialize();\n                refObject.childArray[index] = newChild;\n                refObject = newChild;\n              }\n            }\n\n            // Have to update idx value to skip the array position\n            idx++;\n          }\n        }\n      }\n    }\n\n    if (returnValue === global_constants.SCORM_FALSE) {\n      this.apiLog(\n        methodName,\n        `There was an error setting the value for: ${CMIElement}, value of: ${value}`,\n        LogLevelEnum.WARN\n      );\n    }\n\n    return returnValue;\n  }\n\n  /**\n   * Gets a value from the CMI Object\n   *\n   * @param {string} methodName\n   * @param {boolean} scorm2004\n   * @param {string} CMIElement\n   * @return {any}\n   */\n  _commonGetCMIValue(methodName: string, scorm2004: boolean, CMIElement: string): any {\n    if (!CMIElement || CMIElement === \"\") {\n      return \"\";\n    }\n\n    const structure = CMIElement.split(\".\");\n    let refObject: StringKeyMap = this as StringKeyMap;\n    let attribute = null;\n\n    const uninitializedErrorMessage = `The data model element passed to ${methodName} (${CMIElement}) has not been initialized.`;\n    const invalidErrorMessage = `The data model element passed to ${methodName} (${CMIElement}) is not a valid SCORM data model element.`;\n    const invalidErrorCode = scorm2004\n      ? this._error_codes.UNDEFINED_DATA_MODEL\n      : this._error_codes.GENERAL;\n\n    for (let idx = 0; idx < structure.length; idx++) {\n      attribute = structure[idx];\n\n      if (!scorm2004) {\n        if (idx === structure.length - 1) {\n          if (\n            typeof attribute === \"undefined\" ||\n            !this._checkObjectHasProperty(refObject, attribute)\n          ) {\n            this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n            return;\n          }\n        }\n      } else {\n        if (\n          String(attribute).substring(0, 8) === \"{target=\" &&\n          typeof refObject._isTargetValid == \"function\"\n        ) {\n          const target = String(attribute).substring(8, String(attribute).length - 9);\n          return refObject._isTargetValid(target);\n        } else if (\n          typeof attribute === \"undefined\" ||\n          !this._checkObjectHasProperty(refObject, attribute)\n        ) {\n          this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n          return;\n        }\n      }\n\n      if (attribute !== undefined && attribute !== null) {\n        refObject = refObject[attribute] as StringKeyMap;\n        if (refObject === undefined) {\n          this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n          break;\n        }\n      } else {\n        this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n        break;\n      }\n\n      if (refObject instanceof CMIArray) {\n        const index = parseInt(structure[idx + 1] || \"\", 10);\n\n        // SCO is trying to set an item on an array\n        if (!isNaN(index)) {\n          const item = refObject.childArray[index];\n\n          if (item) {\n            refObject = item;\n          } else {\n            this.throwSCORMError(\n              CMIElement,\n              this._error_codes.VALUE_NOT_INITIALIZED,\n              uninitializedErrorMessage\n            );\n            break;\n          }\n\n          // Have to update idx value to skip the array position\n          idx++;\n        }\n      }\n    }\n\n    if (refObject === null || refObject === undefined) {\n      if (!scorm2004) {\n        if (attribute === \"_children\") {\n          this.throwSCORMError(CMIElement, this._error_codes.CHILDREN_ERROR, undefined);\n        } else if (attribute === \"_count\") {\n          this.throwSCORMError(CMIElement, this._error_codes.COUNT_ERROR, undefined);\n        }\n      }\n    } else {\n      return refObject;\n    }\n  }\n\n  /**\n   * Returns true if the API's current state is STATE_INITIALIZED\n   *\n   * @return {boolean}\n   */\n  isInitialized(): boolean {\n    return this.currentState === global_constants.STATE_INITIALIZED;\n  }\n\n  /**\n   * Returns true if the API's current state is STATE_NOT_INITIALIZED\n   *\n   * @return {boolean}\n   */\n  isNotInitialized(): boolean {\n    return this.currentState === global_constants.STATE_NOT_INITIALIZED;\n  }\n\n  /**\n   * Returns true if the API's current state is STATE_TERMINATED\n   *\n   * @return {boolean}\n   */\n  isTerminated(): boolean {\n    return this.currentState === global_constants.STATE_TERMINATED;\n  }\n\n  /**\n   * Provides a mechanism for attaching to a specific SCORM event.\n   * This method allows you to register a callback function that will be executed\n   * when the specified event occurs.\n   *\n   * @param {string} listenerName - The name of the event to listen for (e.g., \"Initialize\", \"Terminate\", \"GetValue\", \"SetValue\", \"Commit\")\n   * @param {function} callback - The function to execute when the event occurs. The callback will receive relevant event data.\n   * @example\n   * // Listen for Initialize events\n   * api.on(\"Initialize\", function() {\n   *   console.log(\"API has been initialized\");\n   * });\n   *\n   * // Listen for SetValue events\n   * api.on(\"SetValue\", function(element, value) {\n   *   console.log(\"Setting \" + element + \" to \" + value);\n   * });\n   */\n  on(listenerName: string, callback: Function) {\n    this._eventService.on(listenerName, callback);\n  }\n\n  /**\n   * Provides a mechanism for detaching a specific SCORM event listener.\n   * This method removes a previously registered callback for an event.\n   * Both the event name and the callback reference must match what was used in the 'on' method.\n   *\n   * @param {string} listenerName - The name of the event to stop listening for\n   * @param {function} callback - The callback function to remove\n   * @example\n   * // Remove a specific listener\n   * const myCallback = function() { console.log(\"API initialized\"); };\n   * api.on(\"Initialize\", myCallback);\n   * // Later, when you want to remove it:\n   * api.off(\"Initialize\", myCallback);\n   */\n  off(listenerName: string, callback: Function) {\n    this._eventService.off(listenerName, callback);\n  }\n\n  /**\n   * Provides a mechanism for clearing all listeners from a specific SCORM event.\n   * This method removes all callbacks registered for the specified event.\n   *\n   * @param {string} listenerName - The name of the event to clear all listeners for\n   * @example\n   * // Remove all listeners for the Initialize event\n   * api.clear(\"Initialize\");\n   */\n  clear(listenerName: string) {\n    this._eventService.clear(listenerName);\n  }\n\n  /**\n   * Processes any 'on' listeners that have been created for a specific event.\n   * This method is called internally when SCORM events occur to notify all registered listeners.\n   * It triggers all callback functions registered for the specified event.\n   *\n   * @param {string} functionName - The name of the function/event that occurred\n   * @param {string} CMIElement - Optional CMI element involved in the event\n   * @param {any} value - Optional value associated with the event\n   */\n  processListeners(functionName: string, CMIElement?: string, value?: any) {\n    this._eventService.processListeners(functionName, CMIElement, value);\n  }\n\n  /**\n   * Throws a SCORM error with the specified error number and optional message.\n   * This method sets the last error code and can be used to indicate that an operation failed.\n   * The error number should correspond to one of the standard SCORM error codes.\n   *\n   * @param {string} CMIElement\n   * @param {number} errorNumber - The SCORM error code to set\n   * @param {string} message - Optional custom error message to provide additional context\n   * @example\n   * // Throw a \"not initialized\" error\n   * this.throwSCORMError(301, \"The API must be initialized before calling GetValue\");\n   */\n  throwSCORMError(\n    CMIElement: string | undefined,\n    errorNumber: number | undefined,\n    message?: string\n  ) {\n    this._errorHandlingService.throwSCORMError(CMIElement, errorNumber ?? 0, message);\n  }\n\n  /**\n   * Clears the last SCORM error code when an operation succeeds.\n   * This method is typically called after successful API operations to reset the error state.\n   * It only clears the error if the success parameter is \"true\".\n   *\n   * @param {string} success - A string indicating whether the operation succeeded (\"true\" or \"false\")\n   * @example\n   * // Clear error after successful operation\n   * this.clearSCORMError(\"true\");\n   */\n  clearSCORMError(success: string) {\n    this._errorHandlingService.clearSCORMError(success);\n  }\n\n  /**\n   * Load the CMI from a flattened JSON object.\n   * This method populates the CMI data model from a flattened JSON structure\n   * where keys represent CMI element paths (e.g., \"cmi.core.student_id\").\n   *\n   * @param {StringKeyMap} json - The flattened JSON object containing CMI data\n   * @param {string} CMIElement - Optional base CMI element path to prepend to all keys\n   * @example\n   * // Load data from a flattened JSON structure\n   * api.loadFromFlattenedJSON({\n   *   \"cmi.core.student_id\": \"12345\",\n   *   \"cmi.core.student_name\": \"John Doe\",\n   *   \"cmi.core.lesson_status\": \"incomplete\"\n   * });\n   */\n  loadFromFlattenedJSON(json: StringKeyMap, CMIElement?: string) {\n    if (!CMIElement) {\n      // by default, we start from a blank string because we're expecting each element to start with `cmi`\n      CMIElement = \"\";\n    }\n\n    this._serializationService.loadFromFlattenedJSON(\n      json,\n      CMIElement,\n      (CMIElement, value) => this.setCMIValue(CMIElement, value),\n      () => this.isNotInitialized(),\n      (data: StringKeyMap) => {\n        this.startingData = data;\n      }\n    );\n  }\n\n  /**\n   * Returns a flattened JSON object representing the current CMI data.\n   */\n  getFlattenedCMI(): StringKeyMap {\n    return Utilities.flatten(this.renderCMIToJSONObject());\n  }\n\n  /**\n   * Loads CMI data from a hierarchical JSON object.\n   * This method populates the CMI data model from a nested JSON structure\n   * that mirrors the CMI object hierarchy.\n   *\n   * @param {StringKeyMap} json - The hierarchical JSON object containing CMI data\n   * @param {string} CMIElement - Optional base CMI element path to prepend to all keys\n   * @example\n   * // Load data from a hierarchical JSON structure\n   * api.loadFromJSON({\n   *   core: {\n   *     student_id: \"12345\",\n   *     student_name: \"John Doe\",\n   *     lesson_status: \"incomplete\"\n   *   },\n   *   objectives: [\n   *     { id: \"obj1\", score: { raw: 85 } }\n   *   ]\n   * });\n   */\n  loadFromJSON(json: StringKeyMap, CMIElement: string = \"\") {\n    if (\n      (!CMIElement || CMIElement === \"\") &&\n      !Object.hasOwnProperty.call(json, \"cmi\") &&\n      !Object.hasOwnProperty.call(json, \"adl\")\n    ) {\n      // providing a backward compatibility for the old v1 API\n      CMIElement = \"cmi\";\n    }\n    this._serializationService.loadFromJSON(\n      json,\n      CMIElement,\n      (CMIElement, value) => this.setCMIValue(CMIElement, value),\n      () => this.isNotInitialized(),\n      (data: StringKeyMap) => {\n        this.startingData = data;\n      }\n    );\n  }\n\n  /**\n   * Render the CMI object to a JSON string for sending to an LMS.\n   * This method serializes the current CMI data model to a JSON string.\n   * The output format is controlled by the sendFullCommit setting.\n   *\n   * @return {string} A JSON string representation of the CMI data\n   * @example\n   * // Get the current CMI data as a JSON string\n   * const jsonString = api.renderCMIToJSONString();\n   * console.log(jsonString); // '{\"core\":{\"student_id\":\"12345\",...}}'\n   */\n  renderCMIToJSONString(): string {\n    return this._serializationService.renderCMIToJSONString(this.cmi, this.settings.sendFullCommit);\n  }\n\n  /**\n   * Returns a JavaScript object representing the current CMI data.\n   * This method creates a plain JavaScript object that mirrors the\n   * structure of the CMI data model, suitable for further processing.\n   *\n   * @return {StringKeyMap} A JavaScript object representing the CMI data\n   * @example\n   * // Get the current CMI data as a JavaScript object\n   * const cmiObject = api.renderCMIToJSONObject();\n   * console.log(cmiObject.core.student_id); // \"12345\"\n   */\n  renderCMIToJSONObject(): StringKeyMap {\n    return this._serializationService.renderCMIToJSONObject(this.cmi, this.settings.sendFullCommit);\n  }\n\n  /**\n   * Process an HTTP request\n   *\n   * @param {string} url - The URL to send the request to\n   * @param {CommitObject | StringKeyMap | Array<any>} params - The parameters to send\n   * @param {boolean} immediate - Whether to send the request immediately without waiting\n   * @returns {Promise<ResultObject>} - The result of the request\n   * @async\n   */\n  async processHttpRequest(\n    url: string,\n    params: CommitObject | StringKeyMap | Array<any>,\n    immediate: boolean = false\n  ): Promise<ResultObject> {\n    // If offline support is enabled and device is offline, store data locally instead of sending\n    if (\n      this.settings.enableOfflineSupport &&\n      this._offlineStorageService &&\n      !this._offlineStorageService.isDeviceOnline() &&\n      this._courseId\n    ) {\n      this.apiLog(\n        \"processHttpRequest\",\n        \"Device is offline, storing data locally\",\n        LogLevelEnum.INFO\n      );\n\n      if (params && typeof params === \"object\" && \"cmi\" in params) {\n        return await this._offlineStorageService.storeOffline(\n          this._courseId,\n          params as CommitObject\n        );\n      } else {\n        this.apiLog(\n          \"processHttpRequest\",\n          \"Invalid commit data format for offline storage\",\n          LogLevelEnum.ERROR\n        );\n        return {\n          result: global_constants.SCORM_FALSE,\n          errorCode: this._error_codes.GENERAL ?? 101 // Fallback to a default error code if GENERAL is undefined\n        };\n      }\n    }\n\n    // Otherwise, proceed with normal HTTP request\n    return await this._httpService.processHttpRequest(\n      url,\n      params,\n      immediate,\n      (functionName, message, level, element) => this.apiLog(functionName, message, level, element),\n      (functionName, CMIElement, value) => this.processListeners(functionName, CMIElement, value)\n    );\n  }\n\n  /**\n   * Schedules a commit operation to occur after a specified delay.\n   * This method is used to implement auto-commit functionality, where data\n   * is periodically sent to the LMS without requiring explicit commit calls.\n   *\n   * @param {number} when - The number of milliseconds to wait before committing\n   * @param {string} callback - The name of the commit event callback\n   * @example\n   * // Schedule a commit to happen in 60 seconds\n   * api.scheduleCommit(60000, \"commit\");\n   */\n  scheduleCommit(when: number, callback: string) {\n    if (!this._timeout) {\n      this._timeout = new ScheduledCommit(this, when, callback);\n      this.apiLog(\"scheduleCommit\", \"scheduled\", LogLevelEnum.DEBUG, \"\");\n    }\n  }\n\n  /**\n   * Clears and cancels any currently scheduled commits.\n   * This method is typically called when an explicit commit is performed\n   * or when the API is terminated, to prevent redundant commits.\n   *\n   * @example\n   * // Cancel any pending scheduled commits\n   * api.clearScheduledCommit();\n   */\n  clearScheduledCommit() {\n    if (this._timeout) {\n      this._timeout.cancel();\n      this._timeout = undefined;\n      this.apiLog(\"clearScheduledCommit\", \"cleared\", LogLevelEnum.DEBUG, \"\");\n    }\n  }\n\n  /**\n   * Checks if an object has a specific property, using multiple detection methods.\n   * This method performs a thorough check for property existence by:\n   * 1. Checking if it's an own property using Object.hasOwnProperty\n   * 2. Checking if it's defined in the prototype with a property descriptor\n   * 3. Checking if it's accessible via the 'in' operator (includes inherited properties)\n   *\n   * @param {StringKeyMap} StringKeyMap - The object to check for the property\n   * @param {string} attribute - The property name to look for\n   * @return {boolean} True if the property exists on the object or its prototype chain\n   * @private\n   *\n   * @example\n   * // Check for an own property\n   * const obj = { name: \"John\" };\n   * this._checkObjectHasProperty(obj, \"name\"); // Returns true\n   *\n   * @example\n   * // Check for an inherited property\n   * class Parent { get type() { return \"parent\"; } }\n   * const child = Object.create(new Parent());\n   * this._checkObjectHasProperty(child, \"type\"); // Returns true\n   *\n   * @example\n   * // Check for a non-existent property\n   * const obj = { name: \"John\" };\n   * this._checkObjectHasProperty(obj, \"age\"); // Returns false\n   */\n  private _checkObjectHasProperty(StringKeyMap: StringKeyMap, attribute: string): boolean {\n    return (\n      Object.hasOwnProperty.call(StringKeyMap, attribute) ||\n      Object.getOwnPropertyDescriptor(Object.getPrototypeOf(StringKeyMap), attribute) != null ||\n      attribute in StringKeyMap\n    );\n  }\n\n  /**\n   * Handles exceptions that occur when accessing CMI values.\n   * This method delegates to the ErrorHandlingService to process exceptions\n   * that occur during CMI data operations, ensuring consistent error handling\n   * throughout the API.\n   *\n   * @param {string} CMIElement\n   * @param {any} e - The exception that was thrown\n   * @param {string} returnValue - The default return value to use if an error occurs\n   * @return {string} Either the original returnValue or SCORM_FALSE if an error occurred\n   * @private\n   *\n   * @example\n   * // Handle a validation error when getting a CMI value\n   * try {\n   *   return this.getCMIValue(\"cmi.core.score.raw\");\n   * } catch (e) {\n   *   return this.handleValueAccessException(e, \"\");\n   * }\n   *\n   * @example\n   * // Handle a general error when setting a CMI value\n   * try {\n   *   this.setCMIValue(\"cmi.core.lesson_status\", \"completed\");\n   *   return \"true\";\n   * } catch (e) {\n   *   return this.handleValueAccessException(e, \"false\");\n   * }\n   */\n  private handleValueAccessException(CMIElement: string, e: any, returnValue: string): string {\n    if (e instanceof ValidationError) {\n      this.lastErrorCode = String(e.errorCode);\n      returnValue = global_constants.SCORM_FALSE;\n      this.throwSCORMError(CMIElement, e.errorCode, e.errorMessage);\n    } else {\n      if (e instanceof Error && e.message) {\n        this.throwSCORMError(CMIElement, this._error_codes.GENERAL, e.message);\n      } else {\n        this.throwSCORMError(CMIElement, this._error_codes.GENERAL, \"Unknown error\");\n      }\n    }\n    return returnValue;\n  }\n\n  /**\n   * Builds the commit object to be sent to the LMS.\n   * This method delegates to the SerializationService to create a properly\n   * formatted object containing the CMI data that needs to be sent to the LMS.\n   * The format and content of the commit object depend on whether this is a\n   * regular commit or a termination commit.\n   *\n   * @param {boolean} terminateCommit - Whether this is a termination commit\n   * @return {CommitObject|StringKeyMap|Array} The formatted commit object\n   * @protected\n   *\n   * @example\n   * // Create a regular commit object\n   * const regularCommit = this.getCommitObject(false);\n   * // Result might be: { cmi: { core: { lesson_status: \"incomplete\" } } }\n   *\n   * @example\n   * // Create a termination commit object (includes total_time)\n   * const terminationCommit = this.getCommitObject(true);\n   * // Result might be: { cmi: { core: { lesson_status: \"completed\", total_time: \"PT1H30M\" } } }\n   */\n  protected getCommitObject(terminateCommit: boolean): CommitObject | StringKeyMap | Array<any> {\n    return this._serializationService.getCommitObject(\n      terminateCommit,\n      this.settings.alwaysSendTotalTime,\n      this.settings.renderCommonCommitFields,\n      (terminateCommit: boolean, includeTotalTime?: boolean) =>\n        this.renderCommitObject(terminateCommit, includeTotalTime),\n      (terminateCommit: boolean, includeTotalTime?: boolean) =>\n        this.renderCommitCMI(terminateCommit, includeTotalTime),\n      this.settings.logLevel\n    );\n  }\n}\n","import { ValidationError } from \"../exceptions\";\nimport { scorm2004_constants } from \"../constants/api_constants\";\n\nconst scorm2004_errors = scorm2004_constants.error_descriptions;\n\n/**\n * SCORM 2004 Validation Error\n */\nexport class Scorm2004ValidationError extends ValidationError {\n  /**\n   * Constructor to take in an error code\n   * @param {string} CMIElement\n   * @param {number} errorCode\n   */\n  constructor(CMIElement: string, errorCode: number) {\n    if ({}.hasOwnProperty.call(scorm2004_errors, String(errorCode))) {\n      super(\n        CMIElement,\n        errorCode,\n        scorm2004_errors[String(errorCode)]?.basicMessage || \"Unknown error\",\n        scorm2004_errors[String(errorCode)]?.detailMessage,\n      );\n    } else {\n      super(\n        CMIElement,\n        101,\n        scorm2004_errors[\"101\"]?.basicMessage || \"General error\",\n        scorm2004_errors[\"101\"]?.detailMessage,\n      );\n    }\n\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, Scorm2004ValidationError.prototype);\n  }\n}\n","import { BaseScormValidationError } from \"../../exceptions\";\nimport { memoize } from \"../../utilities\";\n\n/**\n * Check if the value matches the proper format. If not, throw proper error code.\n *\n * @param {string} value\n * @param {string} regexPattern\n * @param {number} errorCode\n * @param {typeof BaseScormValidationError} errorClass\n * @param {boolean} [allowEmptyString]\n * @return {boolean}\n */\nexport const checkValidFormat = memoize(\n  (\n    CMIElement: string,\n    value: string,\n    regexPattern: string,\n    errorCode: number,\n    errorClass: typeof BaseScormValidationError,\n    allowEmptyString?: boolean,\n  ): boolean => {\n    // noinspection SuspiciousTypeOfGuard\n    if (typeof value !== \"string\") {\n      return false;\n    }\n    const formatRegex = new RegExp(regexPattern);\n    const matches = value.match(formatRegex);\n    if (allowEmptyString && value === \"\") {\n      return true;\n    }\n    if (value === undefined || !matches || matches[0] === \"\") {\n      throw new errorClass(CMIElement, errorCode);\n    }\n    return true;\n  },\n  // Custom key function that excludes the error class from the cache key\n  // since it can't be stringified and doesn't affect the validation result\n  (CMIElement, value, regexPattern, errorCode, _errorClass, allowEmptyString) => {\n    // Use typeof for non-string values to ensure consistent cache keys\n    // noinspection SuspiciousTypeOfGuard\n    const valueKey = typeof value === \"string\" ? value : `[${typeof value}]`;\n    return `${CMIElement}:${valueKey}:${regexPattern}:${errorCode}:${allowEmptyString || false}`;\n  },\n);\n\n/**\n * Check if the value matches the proper range. If not, throw proper error code.\n *\n * @param {any} value\n * @param {string} rangePattern\n * @param {number} errorCode\n * @param {typeof BaseScormValidationError} errorClass\n * @return {boolean}\n */\nexport const checkValidRange = memoize(\n  (\n    CMIElement: string,\n    value: any,\n    rangePattern: string,\n    errorCode: number,\n    errorClass: typeof BaseScormValidationError,\n  ): boolean => {\n    const ranges = rangePattern.split(\"#\");\n    value = value * 1.0;\n    if (ranges[0] && value >= ranges[0]) {\n      if (ranges[1] && (ranges[1] === \"*\" || value <= ranges[1])) {\n        return true;\n      } else {\n        throw new errorClass(CMIElement, errorCode);\n      }\n    } else {\n      throw new errorClass(CMIElement, errorCode);\n    }\n  },\n  // Custom key function that excludes the error class from the cache key\n  // since it can't be stringified and doesn't affect the validation result\n  (CMIElement, value, rangePattern, errorCode, _errorClass) =>\n    `${CMIElement}:${value}:${rangePattern}:${errorCode}`,\n);\n","import { checkValidFormat, checkValidRange } from \"../common/validation\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\n\n/**\n * Helper method, no reason to have to pass the same error codes every time\n * @param {string} CMIElement\n * @param {string} value\n * @param {string} regexPattern\n * @param {boolean} allowEmptyString\n * @return {boolean}\n */\nexport function check2004ValidFormat(\n  CMIElement: string,\n  value: string,\n  regexPattern: string,\n  allowEmptyString?: boolean,\n): boolean {\n  return checkValidFormat(\n    CMIElement,\n    value,\n    regexPattern,\n    scorm2004_errors.TYPE_MISMATCH as number,\n    Scorm2004ValidationError,\n    allowEmptyString,\n  );\n}\n\n/**\n * Helper method, no reason to have to pass the same error codes every time\n * @param {string} CMIElement\n * @param {string} value\n * @param {string} rangePattern\n * @return {boolean}\n */\nexport function check2004ValidRange(\n  CMIElement: string,\n  value: string,\n  rangePattern: string,\n): boolean {\n  return checkValidRange(\n    CMIElement,\n    value,\n    rangePattern,\n    scorm2004_errors.VALUE_OUT_OF_RANGE as number,\n    Scorm2004ValidationError,\n  );\n}\n","export const scorm12_regex = {\n  CMIString256: \"^.{0,255}$\",\n  CMIString4096: \"^.{0,4096}$\",\n  CMITime: \"^(?:[01]\\\\d|2[0123]):(?:[012345]\\\\d):(?:[012345]\\\\d)$\",\n  CMITimespan: \"^([0-9]{2,}):([0-9]{2}):([0-9]{2})(.[0-9]{1,2})?$\",\n\n  CMIInteger: \"^\\\\d+$\",\n  CMISInteger: \"^-?([0-9]+)$\",\n  CMIDecimal: \"^-?([0-9]{0,3})(\\\\.[0-9]*)?$\",\n\n  CMIIdentifier: \"^[\\\\u0021-\\\\u007E\\\\s]{0,255}$\",\n  // Allow storing larger responses for interactions\n  // Some content packages may exceed the 255 character limit\n  // defined in the SCORM 1.2 specification.  The previous\n  // expression truncated these values which resulted in\n  // a \"101: General Exception\" being thrown when long\n  // answers were supplied.  To support these packages we\n  // relax the limitation and accept any length string.\n  CMIFeedback: \"^.*$\",\n  // This must be redefined\n  CMIIndex: \"[._](\\\\d+).\",\n  // Vocabulary Data Type Definition\n  CMIStatus: \"^(passed|completed|failed|incomplete|browsed)$\",\n  CMIStatus2: \"^(passed|completed|failed|incomplete|browsed|not attempted)$\",\n  CMIExit: \"^(time-out|suspend|logout|)$\",\n  CMIType: \"^(true-false|choice|fill-in|matching|performance|sequencing|likert|numeric)$\",\n  CMIResult: \"^(correct|wrong|unanticipated|neutral|([0-9]{0,3})?(\\\\.[0-9]*)?)$\",\n  NAVEvent:\n    \"^(previous|continue|start|resumeAll|choice|jump|exit|exitAll|abandon|abandonAll|suspendAll|retry|retryAll|_none_)$\",\n  // Data ranges\n  score_range: \"0#100\",\n  audio_range: \"-1#100\",\n  speed_range: \"-100#100\",\n  weighting_range: \"-100#100\",\n  text_range: \"-1#1\",\n};\nexport const aicc_regex = {\n  ...scorm12_regex,\n  ...{\n    // AICC identifiers may contain letters, numbers, underscores,\n    // periods, and hyphens up to 255 characters in length.\n    // The previous expression only allowed \"\\w\" characters which\n    // excluded periods and hyphens.\n    CMIIdentifier: \"^[A-Za-z0-9._-]{1,255}$\",\n  },\n};\nexport const scorm2004_regex = {\n  CMIString200: \"^[\\\\u0000-\\\\uFFFF]{0,200}$\",\n  CMIString250: \"^[\\\\u0000-\\\\uFFFF]{0,250}$\",\n  CMIString1000: \"^[\\\\u0000-\\\\uFFFF]{0,1000}$\",\n  CMIString4000: \"^[\\\\u0000-\\\\uFFFF]{0,4000}$\",\n  CMIString64000: \"^[\\\\u0000-\\\\uFFFF]{0,64000}$\",\n  CMILang: \"^([a-zA-Z]{2,3}|i|x)(-[a-zA-Z0-9-]{2,8})?$|^$\",\n\n  CMILangString250: \"^({lang=([a-zA-Z]{2,3}|i|x)(-[a-zA-Z0-9-]{2,8})?})?((?!{.*$).{0,250}$)?$\",\n\n  CMILangcr: \"^(({lang=([a-zA-Z]{2,3}|i|x)?(-[a-zA-Z0-9-]{2,8})?}))(.*?)$\",\n\n  CMILangString250cr: \"^(({lang=([a-zA-Z]{2,3}|i|x)?(-[a-zA-Z0-9-]{2,8})?})?(.{0,250})?)?$\",\n\n  CMILangString4000: \"^({lang=([a-zA-Z]{2,3}|i|x)(-[a-zA-Z0-9-]{2,8})?})?((?!{.*$).{0,4000}$)?$\",\n\n  CMITime:\n    \"^(19[7-9]{1}[0-9]{1}|20[0-2]{1}[0-9]{1}|203[0-8]{1})((-(0[1-9]{1}|1[0-2]{1}))((-(0[1-9]{1}|[1-2]{1}[0-9]{1}|3[0-1]{1}))(T([0-1]{1}[0-9]{1}|2[0-3]{1})((:[0-5]{1}[0-9]{1})((:[0-5]{1}[0-9]{1})((\\\\.[0-9]{1,6})((Z|([+|-]([0-1]{1}[0-9]{1}|2[0-3]{1})))(:[0-5]{1}[0-9]{1})?)?)?)?)?)?)?)?$\",\n  CMITimespan:\n    \"^P(?:([.,\\\\d]+)Y)?(?:([.,\\\\d]+)M)?(?:([.,\\\\d]+)W)?(?:([.,\\\\d]+)D)?(?:T?(?:([.,\\\\d]+)H)?(?:([.,\\\\d]+)M)?(?:([.,\\\\d]+)S)?)?$\",\n  CMIInteger: \"^\\\\d+$\",\n  CMISInteger: \"^-?([0-9]+)$\",\n  CMIDecimal: \"^-?([0-9]{1,5})(\\\\.[0-9]{1,18})?$\",\n  CMIIdentifier: \"^\\\\S{1,250}[a-zA-Z0-9]$\",\n  CMIShortIdentifier: \"^[\\\\w\\\\.\\\\-\\\\_]{1,250}$\",\n  CMILongIdentifier: \"^(?:(?!urn:)\\\\S{1,4000}|urn:[A-Za-z0-9-]{1,31}:\\\\S{1,4000}|.{1,4000})$\",\n  // need to re-examine this\n  CMIFeedback: \"^.*$\",\n  // This must be redefined\n  CMIIndex: \"[._](\\\\d+).\",\n  CMIIndexStore: \".N(\\\\d+).\",\n  // Vocabulary Data Type Definition\n  CMICStatus: \"^(completed|incomplete|not attempted|unknown)$\",\n  CMISStatus: \"^(passed|failed|unknown)$\",\n  CMIExit: \"^(time-out|suspend|logout|normal)$\",\n  CMIType:\n    \"^(true-false|choice|fill-in|long-fill-in|matching|performance|sequencing|likert|numeric|other)$\",\n  CMIResult: \"^(correct|incorrect|unanticipated|neutral|-?([0-9]{1,4})(\\\\.[0-9]{1,18})?)$\",\n  NAVEvent:\n    \"^(start|resumeAll|previous|continue|exit|exitAll|abandon|abandonAll|suspendAll|retry|retryAll|_none_|(\\\\{target=(?<choice_target>\\\\S{0,}[a-zA-Z0-9-_]+)})?choice|(\\\\{target=(?<jump_target>\\\\S{0,}[a-zA-Z0-9-_]+)})?jump)$\",\n\n  NAVBoolean: \"^(unknown|true|false)$\",\n  NAVTarget: \"^{target=\\\\S{0,}[a-zA-Z0-9-_]+}$\",\n  // Data ranges\n  scaled_range: \"-1#1\",\n  audio_range: \"0#999.9999999\",\n  speed_range: \"0#999.9999999\",\n  text_range: \"-1#1\",\n  progress_range: \"0#1\",\n};\n","/**\n * Class for SCORM 2004's cmi.learner_preference object\n */\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { scorm2004_constants } from \"../../constants/api_constants\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { check2004ValidFormat, check2004ValidRange } from \"./validation\";\nimport { scorm2004_regex } from \"../../constants/regex\";\n\nexport class CMILearnerPreference extends BaseCMI {\n  private __children = scorm2004_constants.student_preference_children;\n  private _audio_level = \"1\";\n  private _language = \"\";\n  private _delivery_speed = \"1\";\n  private _audio_captioning = \"0\";\n\n  /**\n   * Constructor for cmi.learner_preference\n   */\n  constructor() {\n    super(\"cmi.learner_preference\");\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  override reset() {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for __children\n   * @return {string}\n   * @private\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for __children. Just throws an error.\n   * @param {string} _children\n   * @private\n   */\n  set _children(_children: string) {\n    throw new Scorm2004ValidationError(\n      this._cmi_element + \"._children\",\n      scorm2004_errors.READ_ONLY_ELEMENT as number,\n    );\n  }\n\n  /**\n   * Getter for _audio_level\n   * @return {string}\n   */\n  get audio_level(): string {\n    return this._audio_level;\n  }\n\n  /**\n   * Setter for _audio_level\n   * @param {string} audio_level\n   */\n  set audio_level(audio_level: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".audio_level\",\n        audio_level,\n        scorm2004_regex.CMIDecimal,\n      ) &&\n      check2004ValidRange(\n        this._cmi_element + \".audio_level\",\n        audio_level,\n        scorm2004_regex.audio_range,\n      )\n    ) {\n      this._audio_level = audio_level;\n    }\n  }\n\n  /**\n   * Getter for _language\n   * @return {string}\n   */\n  get language(): string {\n    return this._language;\n  }\n\n  /**\n   * Setter for _language\n   * @param {string} language\n   */\n  set language(language: string) {\n    if (check2004ValidFormat(this._cmi_element + \".language\", language, scorm2004_regex.CMILang)) {\n      this._language = language;\n    }\n  }\n\n  /**\n   * Getter for _delivery_speed\n   * @return {string}\n   */\n  get delivery_speed(): string {\n    return this._delivery_speed;\n  }\n\n  /**\n   * Setter for _delivery_speed\n   * @param {string} delivery_speed\n   */\n  set delivery_speed(delivery_speed: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".delivery_speed\",\n        delivery_speed,\n        scorm2004_regex.CMIDecimal,\n      ) &&\n      check2004ValidRange(\n        this._cmi_element + \".delivery_speed\",\n        delivery_speed,\n        scorm2004_regex.speed_range,\n      )\n    ) {\n      this._delivery_speed = delivery_speed;\n    }\n  }\n\n  /**\n   * Getter for _audio_captioning\n   * @return {string}\n   */\n  get audio_captioning(): string {\n    return this._audio_captioning;\n  }\n\n  /**\n   * Setter for _audio_captioning\n   * @param {string} audio_captioning\n   */\n  set audio_captioning(audio_captioning: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".audio_captioning\",\n        audio_captioning,\n        scorm2004_regex.CMISInteger,\n      ) &&\n      check2004ValidRange(\n        this._cmi_element + \".audio_captioning\",\n        audio_captioning,\n        scorm2004_regex.text_range,\n      )\n    ) {\n      this._audio_captioning = audio_captioning;\n    }\n  }\n\n  /**\n   * toJSON for cmi.learner_preference\n   *\n   * @return {\n   *    {\n   *      audio_level: string,\n   *      language: string,\n   *      delivery_speed: string,\n   *      audio_captioning: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    audio_level: string;\n    language: string;\n    delivery_speed: string;\n    audio_captioning: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      audio_level: this.audio_level,\n      language: this.language,\n      delivery_speed: this.delivery_speed,\n      audio_captioning: this.audio_captioning,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { scorm2004_regex } from \"./regex\";\n\nexport const LearnerResponses: Responses = {\n  \"true-false\": {\n    format: \"^true$|^false$\",\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n  },\n  choice: {\n    format: scorm2004_regex.CMILongIdentifier,\n    max: 36,\n    delimiter: \"[,]\",\n    unique: true,\n  },\n  \"fill-in\": {\n    format: scorm2004_regex.CMILangString250,\n    max: 10,\n    delimiter: \"[,]\",\n    unique: false,\n  },\n  \"long-fill-in\": {\n    format: scorm2004_regex.CMILangString4000,\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n  },\n  matching: {\n    format: scorm2004_regex.CMIShortIdentifier,\n    format2: scorm2004_regex.CMIShortIdentifier,\n    max: 36,\n    delimiter: \"[,]\",\n    delimiter2: \"[.]\",\n    unique: false,\n  },\n  performance: {\n    format: \"^$|\" + scorm2004_regex.CMIShortIdentifier,\n    format2: scorm2004_regex.CMIDecimal + \"|^$|\" + scorm2004_regex.CMIShortIdentifier,\n    max: 250,\n    delimiter: \"[,]\",\n    delimiter2: \"[.]\",\n    unique: false,\n  },\n  sequencing: {\n    format: scorm2004_regex.CMIShortIdentifier,\n    max: 36,\n    delimiter: \"[,]\",\n    unique: false,\n  },\n  likert: {\n    format: scorm2004_regex.CMIShortIdentifier,\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n  },\n  numeric: {\n    format: scorm2004_regex.CMIDecimal,\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n  },\n  other: {\n    format: scorm2004_regex.CMIString4000,\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n  },\n};\nexport const CorrectResponses: Responses = {\n  \"true-false\": {\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n    duplicate: false,\n    format: \"^true$|^false$\",\n    limit: 1,\n  },\n  choice: {\n    max: 36,\n    delimiter: \"[,]\",\n    unique: true,\n    duplicate: false,\n    format: scorm2004_regex.CMILongIdentifier,\n  },\n  \"fill-in\": {\n    max: 10,\n    delimiter: \"[,]\",\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMILangString250cr,\n  },\n  \"long-fill-in\": {\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n    duplicate: true,\n    format: scorm2004_regex.CMILangString4000,\n  },\n  matching: {\n    max: 36,\n    delimiter: \"[,]\",\n    delimiter2: \"[.]\",\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIShortIdentifier,\n    format2: scorm2004_regex.CMIShortIdentifier,\n  },\n  performance: {\n    max: 250,\n    delimiter: \"[,]\",\n    delimiter2: \"[.]\",\n    delimiter3: \"[:]\",\n    unique: false,\n    duplicate: false,\n    // step_name must be a non-empty short identifier\n    format: scorm2004_regex.CMIShortIdentifier,\n    // step_answer may be short identifier or numeric range (<decimal>[:<decimal>])\n    format2: `^(${scorm2004_regex.CMIShortIdentifier})$|^(?:\\\\d+(?:\\\\.\\\\d+)?(?::\\\\d+(?:\\\\.\\\\d+)?)?)$`,\n  },\n  sequencing: {\n    max: 36,\n    delimiter: \"[,]\",\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIShortIdentifier,\n  },\n  likert: {\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIShortIdentifier,\n    limit: 1,\n  },\n  numeric: {\n    max: 2,\n    delimiter: \"[:]\",\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIDecimal,\n    limit: 1,\n  },\n  other: {\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIString4000,\n    limit: 1,\n  },\n};\n\nexport type ResponseType = {\n  format: string;\n  max: number;\n  delimiter: string;\n  unique: boolean;\n  duplicate?: boolean;\n  format2?: string;\n  delimiter2?: string;\n  limit?: number;\n  delimiter3?: string;\n};\n\nexport type Responses = {\n  [key: string]: ResponseType;\n};\n","/**\n * Class representing SCORM 2004's `cmi.interactions` object\n */\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { CMIArray } from \"../common/array\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { scorm2004_constants } from \"../../constants/api_constants\";\nimport { check2004ValidFormat } from \"./validation\";\nimport { scorm2004_regex } from \"../../constants/regex\";\nimport {\n  CorrectResponses,\n  LearnerResponses,\n  ResponseType,\n} from \"../../constants/response_constants\";\n\nexport class CMIInteractions extends CMIArray {\n  /**\n   * Constructor for `cmi.objectives` Array\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.interactions\",\n      children: scorm2004_constants.interactions_children,\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT as number,\n      errorClass: Scorm2004ValidationError,\n    });\n  }\n}\n\n/**\n * Class for SCORM 2004's cmi.interaction.n object\n */\n\nexport class CMIInteractionsObject extends BaseCMI {\n  private _id = \"\";\n  private _type = \"\";\n  private _timestamp = \"\";\n  private _weighting = \"\";\n  private _learner_response = \"\";\n  private _result = \"\";\n  private _latency = \"\";\n  private _description = \"\";\n\n  /**\n   * Constructor for cmi.interaction.n\n   */\n  constructor() {\n    super(\"cmi.interactions.n\");\n    this.objectives = new CMIArray({\n      CMIElement: \"cmi.interactions.n.objectives\",\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT as number,\n      errorClass: Scorm2004ValidationError,\n      children: scorm2004_constants.objectives_children,\n    });\n    this.correct_responses = new CMIArray({\n      CMIElement: \"cmi.interactions.n.correct_responses\",\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT as number,\n      errorClass: Scorm2004ValidationError,\n      children: scorm2004_constants.correct_responses_children,\n    });\n  }\n\n  public objectives: CMIArray;\n  public correct_responses: CMIArray;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.objectives?.initialize();\n    this.correct_responses?.initialize();\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  override reset() {\n    this._initialized = false;\n    this._id = \"\";\n    this._type = \"\";\n    this._timestamp = \"\";\n    this._weighting = \"\";\n    this._learner_response = \"\";\n    this._result = \"\";\n    this._latency = \"\";\n    this._description = \"\";\n    this.objectives = new CMIArray({\n      CMIElement: \"cmi.interactions.n.objectives\",\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT as number,\n      errorClass: Scorm2004ValidationError,\n      children: scorm2004_constants.objectives_children,\n    });\n    this.correct_responses = new CMIArray({\n      CMIElement: \"cmi.interactions.n.correct_responses\",\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT as number,\n      errorClass: Scorm2004ValidationError,\n      children: scorm2004_constants.correct_responses_children,\n    });\n  }\n\n  /**\n   * Getter for _id\n   * @return {string}\n   */\n  get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Setter for _id\n   * @param {string} id\n   */\n  set id(id: string) {\n    if (check2004ValidFormat(this._cmi_element + \".id\", id, scorm2004_regex.CMILongIdentifier)) {\n      this._id = id;\n    }\n  }\n\n  /**\n   * Getter for _type\n   * @return {string}\n   */\n  get type(): string {\n    return this._type;\n  }\n\n  /**\n   * Setter for _type\n   * @param {string} type\n   */\n  set type(type: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".type\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED as number,\n      );\n    } else {\n      if (check2004ValidFormat(this._cmi_element + \".type\", type, scorm2004_regex.CMIType)) {\n        this._type = type;\n      }\n    }\n  }\n\n  /**\n   * Getter for _timestamp\n   * @return {string}\n   */\n  get timestamp(): string {\n    return this._timestamp;\n  }\n\n  /**\n   * Setter for _timestamp\n   * @param {string} timestamp\n   */\n  set timestamp(timestamp: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".timestamp\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED as number,\n      );\n    } else {\n      if (\n        check2004ValidFormat(this._cmi_element + \".timestamp\", timestamp, scorm2004_regex.CMITime)\n      ) {\n        this._timestamp = timestamp;\n      }\n    }\n  }\n\n  /**\n   * Getter for _weighting\n   * @return {string}\n   */\n  get weighting(): string {\n    return this._weighting;\n  }\n\n  /**\n   * Setter for _weighting\n   * @param {string} weighting\n   */\n  set weighting(weighting: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".weighting\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED as number,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".weighting\",\n          weighting,\n          scorm2004_regex.CMIDecimal,\n        )\n      ) {\n        this._weighting = weighting;\n      }\n    }\n  }\n\n  /**\n   * Getter for _learner_response\n   * @return {string}\n   */\n  get learner_response(): string {\n    return this._learner_response;\n  }\n\n  /**\n   * Setter for _learner_response. Does type validation to make sure response\n   * matches SCORM 2004's spec\n   * @param {string} learner_response\n   */\n  set learner_response(learner_response: string) {\n    if (this.initialized && (this._type === \"\" || this._id === \"\")) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".learner_response\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED as number,\n      );\n    } else {\n      let nodes = [];\n      const response_type = LearnerResponses[this.type];\n\n      if (response_type) {\n        if (response_type?.delimiter) {\n          // Convert regex-style delimiter to actual character\n          const delimiter = response_type.delimiter === \"[,]\" ? \",\" : response_type.delimiter;\n          nodes = learner_response.split(delimiter);\n        } else {\n          nodes[0] = learner_response;\n        }\n\n        if (nodes.length > 0 && nodes.length <= response_type.max) {\n          const formatRegex = new RegExp(response_type.format);\n\n          for (let i = 0; i < nodes.length; i++) {\n            if (response_type?.delimiter2) {\n              // Convert regex-style delimiter to actual character\n              const delimiter2 =\n                response_type.delimiter2 === \"[.]\" ? \".\" : response_type.delimiter2;\n              const values = nodes[i]?.split(delimiter2);\n\n              if (values?.length === 2) {\n                // For performance type, both parts must be non-empty\n                if (this.type === \"performance\" && (values[0] === \"\" || values[1] === \"\")) {\n                  throw new Scorm2004ValidationError(\n                    this._cmi_element + \".learner_response\",\n                    scorm2004_errors.TYPE_MISMATCH as number,\n                  );\n                }\n\n                if (!values[0]?.match(formatRegex)) {\n                  throw new Scorm2004ValidationError(\n                    this._cmi_element + \".learner_response\",\n                    scorm2004_errors.TYPE_MISMATCH as number,\n                  );\n                } else {\n                  if (\n                    !response_type.format2 ||\n                    !values[1]?.match(new RegExp(response_type.format2))\n                  ) {\n                    throw new Scorm2004ValidationError(\n                      this._cmi_element + \".learner_response\",\n                      scorm2004_errors.TYPE_MISMATCH as number,\n                    );\n                  }\n                }\n              } else {\n                throw new Scorm2004ValidationError(\n                  this._cmi_element + \".learner_response\",\n                  scorm2004_errors.TYPE_MISMATCH as number,\n                );\n              }\n            } else {\n              if (!nodes[i]?.match(formatRegex)) {\n                throw new Scorm2004ValidationError(\n                  this._cmi_element + \".learner_response\",\n                  scorm2004_errors.TYPE_MISMATCH as number,\n                );\n              } else {\n                if (nodes[i] !== \"\" && response_type.unique) {\n                  for (let j = 0; j < i; j++) {\n                    if (nodes[i] === nodes[j]) {\n                      throw new Scorm2004ValidationError(\n                        this._cmi_element + \".learner_response\",\n                        scorm2004_errors.TYPE_MISMATCH as number,\n                      );\n                    }\n                  }\n                }\n              }\n            }\n          }\n        } else {\n          throw new Scorm2004ValidationError(\n            this._cmi_element + \".learner_response\",\n            scorm2004_errors.GENERAL_SET_FAILURE as number,\n          );\n        }\n\n        this._learner_response = learner_response;\n      } else {\n        throw new Scorm2004ValidationError(\n          this._cmi_element + \".learner_response\",\n          scorm2004_errors.TYPE_MISMATCH as number,\n        );\n      }\n    }\n  }\n\n  /**\n   * Getter for _result\n   * @return {string}\n   */\n  get result(): string {\n    return this._result;\n  }\n\n  /**\n   * Setter for _result\n   * @param {string} result\n   */\n  set result(result: string) {\n    if (check2004ValidFormat(this._cmi_element + \".result\", result, scorm2004_regex.CMIResult)) {\n      this._result = result;\n    }\n  }\n\n  /**\n   * Getter for _latency\n   * @return {string}\n   */\n  get latency(): string {\n    return this._latency;\n  }\n\n  /**\n   * Setter for _latency\n   * @param {string} latency\n   */\n  set latency(latency: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".latency\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED as number,\n      );\n    } else {\n      if (\n        check2004ValidFormat(this._cmi_element + \".latency\", latency, scorm2004_regex.CMITimespan)\n      ) {\n        this._latency = latency;\n      }\n    }\n  }\n\n  /**\n   * Getter for _description\n   * @return {string}\n   */\n  get description(): string {\n    return this._description;\n  }\n\n  /**\n   * Setter for _description\n   * @param {string} description\n   */\n  set description(description: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".description\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED as number,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".description\",\n          description,\n          scorm2004_regex.CMILangString250,\n          true,\n        )\n      ) {\n        this._description = description;\n      }\n    }\n  }\n\n  // noinspection JSUnusedGlobalSymbols\n  /**\n   * toJSON for cmi.interactions.n\n   *\n   * @return {\n   *    {\n   *      id: string,\n   *      type: string,\n   *      objectives: CMIArray,\n   *      timestamp: string,\n   *      correct_responses: CMIArray,\n   *      weighting: string,\n   *      learner_response: string,\n   *      result: string,\n   *      latency: string,\n   *      description: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    id: string;\n    type: string;\n    objectives: CMIArray;\n    timestamp: string;\n    correct_responses: CMIArray;\n    weighting: string;\n    learner_response: string;\n    result: string;\n    latency: string;\n    description: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      id: this.id,\n      type: this.type,\n      objectives: this.objectives,\n      timestamp: this.timestamp,\n      weighting: this.weighting,\n      learner_response: this.learner_response,\n      result: this.result,\n      latency: this.latency,\n      description: this.description,\n      correct_responses: this.correct_responses,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.interactions.n.objectives.n object\n */\nexport class CMIInteractionsObjectivesObject extends BaseCMI {\n  private _id = \"\";\n\n  /**\n   * Constructor for cmi.interactions.n.objectives.n\n   */\n  constructor() {\n    super(\"cmi.interactions.n.objectives.n\");\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  override reset() {\n    this._initialized = false;\n    this._id = \"\";\n  }\n\n  /**\n   * Getter for _id\n   * @return {string}\n   */\n  get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Setter for _id\n   * @param {string} id\n   */\n  set id(id: string) {\n    if (check2004ValidFormat(this._cmi_element + \".id\", id, scorm2004_regex.CMILongIdentifier)) {\n      this._id = id;\n    }\n  }\n\n  /**\n   * toJSON for cmi.interactions.n.objectives.n\n   * @return {\n   *    {\n   *      id: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    id: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      id: this.id,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Helper: strip the square-bracket notation (e.g. \"[,]\") down to the character (\",\")\n */\nfunction stripBrackets(delim: string): string {\n  return delim.replace(/[[\\]]/g, \"\");\n}\n\n// Helper to escape a string for use in a RegExp\nfunction escapeRegex(s: string): string {\n  // Only , and . are expected, but escape any regex special chars for safety\n  return s.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\n}\n\n/**\n * Split on unescaped delimiter and unescape the delimiter in resulting parts.\n * @param text - the input string\n * @param delim - the delimiter character, e.g. ',' or '.'\n */\nfunction splitUnescaped(text: string, delim: string): string[] {\n  const reDelim = escapeRegex(delim);\n  const splitRe = new RegExp(`(?<!\\\\\\\\)${reDelim}`, \"g\");\n  const unescapeRe = new RegExp(`\\\\\\\\${reDelim}`, \"g\");\n  return text.split(splitRe).map((part) => part.replace(unescapeRe, delim));\n}\n\n/**\n * Helper: validate a `pattern` string against its SCORM definition\n */\nfunction validatePattern(type: string, pattern: string, responseDef: ResponseType) {\n  // Reject patterns with leading or trailing whitespace\n  if (pattern.trim() !== pattern) {\n    throw new Scorm2004ValidationError(\n      \"cmi.interactions.n.correct_responses.n.pattern\",\n      scorm2004_errors.TYPE_MISMATCH as number,\n    );\n  }\n\n  // Reject any nodes with leading/trailing whitespace around tokens\n  const subDelim1 = responseDef.delimiter ? stripBrackets(responseDef.delimiter) : null;\n  const rawNodes = subDelim1 ? splitUnescaped(pattern, subDelim1) : [pattern];\n  for (const raw of rawNodes) {\n    if (raw.trim() !== raw) {\n      throw new Scorm2004ValidationError(\n        \"cmi.interactions.n.correct_responses.n.pattern\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n  }\n\n  // Allow empty fill-in patterns\n  if (type === \"fill-in\" && pattern === \"\") {\n    return;\n  }\n  // Split into nodes on the primary delimiter (if any)\n  const delim1 = responseDef.delimiter ? stripBrackets(responseDef.delimiter) : null;\n  let nodes: string[];\n  if (delim1) {\n    nodes = splitUnescaped(pattern, delim1);\n  } else {\n    nodes = [pattern];\n  }\n\n  // If no primary delimiter but pattern contains comma, reject multiple entries\n  if (!responseDef.delimiter && pattern.includes(\",\")) {\n    throw new Scorm2004ValidationError(\n      \"cmi.interactions.n.correct_responses.n.pattern\",\n      scorm2004_errors.TYPE_MISMATCH as number,\n    );\n  }\n\n  // Enforce uniqueness or disallow duplicates if required\n  if (responseDef.unique || responseDef.duplicate === false) {\n    const seen = new Set(nodes);\n    if (seen.size !== nodes.length) {\n      throw new Scorm2004ValidationError(\n        \"cmi.interactions.n.correct_responses.n.pattern\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n  }\n\n  // Must have at least 1 node, and no more than max\n  if (nodes.length === 0 || nodes.length > responseDef.max) {\n    throw new Scorm2004ValidationError(\n      \"cmi.interactions.n.correct_responses.n.pattern\",\n      scorm2004_errors.GENERAL_SET_FAILURE as number,\n    );\n  }\n\n  const fmt1 = new RegExp(responseDef.format);\n  const fmt2 = responseDef.format2 ? new RegExp(responseDef.format2) : null;\n\n  const checkSingle = (value: string) => {\n    if (!fmt1.test(value)) {\n      throw new Scorm2004ValidationError(\n        \"cmi.interactions.n.correct_responses.n.pattern\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n  };\n\n  const checkPair = (value: string, delimBracketed?: string) => {\n    if (!delimBracketed) {\n      throw new Scorm2004ValidationError(\n        \"cmi.interactions.n.correct_responses.n.pattern\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n    const delim = stripBrackets(delimBracketed);\n    const parts = value\n      .split(new RegExp(`(?<!\\\\\\\\)${escapeRegex(delim)}`, \"g\"))\n      .map((n) => n.replace(new RegExp(`\\\\\\\\${escapeRegex(delim)}`, \"g\"), delim));\n    if (parts.length !== 2 || parts[0] === \"\" || parts[1] === \"\") {\n      throw new Scorm2004ValidationError(\n        \"cmi.interactions.n.correct_responses.n.pattern\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n    // test both parts\n    if (\n      (parts[0] !== undefined && !fmt1.test(parts[0])) ||\n      (fmt2 && parts[1] !== undefined && !fmt2.test(parts[1]))\n    ) {\n      throw new Scorm2004ValidationError(\n        \"cmi.interactions.n.correct_responses.n.pattern\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n  };\n\n  for (const node of nodes) {\n    switch (type) {\n      case \"numeric\": {\n        // 1 or 2 numeric values separated by \":\"\n        const numDelim = responseDef.delimiter ? stripBrackets(responseDef.delimiter) : \":\";\n        const nums = node.split(numDelim);\n        if (nums.length < 1 || nums.length > 2) {\n          throw new Scorm2004ValidationError(\n            \"cmi.interactions.n.correct_responses.n.pattern\",\n            scorm2004_errors.TYPE_MISMATCH as number,\n          );\n        }\n        nums.forEach(checkSingle);\n        break;\n      }\n\n      case \"performance\": {\n        // split into parts on unescaped dot\n        const delimBracketed = responseDef.delimiter2;\n        if (!delimBracketed) {\n          throw new Scorm2004ValidationError(\n            \"cmi.interactions.n.correct_responses.n.pattern\",\n            scorm2004_errors.TYPE_MISMATCH as number,\n          );\n        }\n        const delim = stripBrackets(delimBracketed);\n        // split into parts on unescaped dot\n        const allParts = splitUnescaped(node, delim);\n        if (!node.includes(\":\") && allParts.length !== 2) {\n          throw new Scorm2004ValidationError(\n            \"cmi.interactions.n.correct_responses.n.pattern\",\n            scorm2004_errors.TYPE_MISMATCH as number,\n          );\n        }\n        // use splitUnescaped to get [part1, part2]\n        const [part1, part2] = splitUnescaped(node, delim);\n        // Validate non-empty\n        if (part1 === \"\" || part2 === \"\" || part1 === part2) {\n          throw new Scorm2004ValidationError(\n            \"cmi.interactions.n.correct_responses.n.pattern\",\n            scorm2004_errors.TYPE_MISMATCH as number,\n          );\n        }\n        // part1 against format1\n        if (part1 === undefined || !fmt1.test(part1)) {\n          throw new Scorm2004ValidationError(\n            \"cmi.interactions.n.correct_responses.n.pattern\",\n            scorm2004_errors.TYPE_MISMATCH as number,\n          );\n        }\n        // part2 against format2\n        if (fmt2 && part2 !== undefined && !fmt2.test(part2)) {\n          throw new Scorm2004ValidationError(\n            \"cmi.interactions.n.correct_responses.n.pattern\",\n            scorm2004_errors.TYPE_MISMATCH as number,\n          );\n        }\n        break;\n      }\n\n      default:\n        if (responseDef.delimiter2) {\n          // matching and other two-part types\n          checkPair(node, responseDef.delimiter2);\n        } else {\n          // simple single-value types (true-false, choice, fill-in, etc.)\n          checkSingle(node);\n        }\n    }\n  }\n}\n\nexport class CMIInteractionsCorrectResponsesObject extends BaseCMI {\n  private _pattern = \"\";\n  private readonly _interactionType?: string | undefined;\n\n  /**\n   * Constructor for cmi.interactions.n.correct_responses.n\n   * @param interactionType The type of interaction (e.g. \"numeric\", \"choice\", etc.)\n   */\n  constructor(interactionType?: string) {\n    super(\"cmi.interactions.n.correct_responses.n\");\n    this._interactionType = interactionType;\n  }\n\n  override reset() {\n    this._initialized = false;\n    this._pattern = \"\";\n  }\n\n  get pattern(): string {\n    return this._pattern;\n  }\n\n  set pattern(pattern: string) {\n    // Allow empty fill-in patterns\n    if (this._interactionType === \"fill-in\" && pattern === \"\") {\n      this._pattern = \"\";\n      return;\n    }\n    // 1) Basic SCORM‐pattern format check\n    if (\n      !check2004ValidFormat(this._cmi_element + \".pattern\", pattern, scorm2004_regex.CMIFeedback)\n    ) {\n      return;\n    }\n\n    // 2) If we know the interaction type, run the detailed validator\n    if (this._interactionType) {\n      const responseDef = CorrectResponses[this._interactionType];\n      if (responseDef) {\n        // Skip detailed validation for matching when pattern contains escaped comma or dot\n        if (this._interactionType === \"matching\" && /\\\\[.,]/.test(pattern)) {\n          // accept escaped comma or dot patterns without further validation\n        } else {\n          validatePattern(this._interactionType, pattern, responseDef);\n        }\n      }\n    }\n\n    // 3) Finally, set\n    this._pattern = pattern;\n  }\n\n  toJSON(): { pattern: string } {\n    this.jsonString = true;\n    const result = { pattern: this.pattern };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { ValidationError } from \"../exceptions\";\nimport { scorm12_constants } from \"../constants/api_constants\";\n\nconst scorm12_errors = scorm12_constants.error_descriptions;\n\n/**\n * SCORM 1.2 Validation Error\n */\nexport class Scorm12ValidationError extends ValidationError {\n  /**\n   * Constructor to take in an error code\n   * @param {string} CMIElement\n   * @param {number} errorCode\n   */\n  constructor(CMIElement: string, errorCode: number) {\n    if ({}.hasOwnProperty.call(scorm12_errors, String(errorCode))) {\n      super(\n        CMIElement,\n        errorCode,\n        scorm12_errors[String(errorCode)]?.basicMessage || \"Unknown error\",\n        scorm12_errors[String(errorCode)]?.detailMessage,\n      );\n    } else {\n      super(\n        CMIElement,\n        101,\n        scorm12_errors[\"101\"]?.basicMessage ?? \"General error\",\n        scorm12_errors[\"101\"]?.detailMessage,\n      );\n    }\n\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, Scorm12ValidationError.prototype);\n  }\n}\n","import { checkValidFormat, checkValidRange } from \"../common/validation\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { Scorm12ValidationError } from \"../../exceptions/scorm12_exceptions\";\n\n/**\n * Helper method, no reason to have to pass the same error codes every time\n * @param {string} CMIElement\n * @param {string} value\n * @param {string} regexPattern\n * @param {boolean} allowEmptyString\n * @return {boolean}\n */\nexport function check12ValidFormat(\n  CMIElement: string,\n  value: string,\n  regexPattern: string,\n  allowEmptyString?: boolean,\n): boolean {\n  return checkValidFormat(\n    CMIElement,\n    value,\n    regexPattern,\n    scorm12_errors.TYPE_MISMATCH as number,\n    Scorm12ValidationError,\n    allowEmptyString,\n  );\n}\n\n/**\n * Helper method, no reason to have to pass the same error codes every time\n * @param {string} CMIElement\n * @param {string} value\n * @param {string} rangePattern\n * @param {boolean} allowEmptyString\n * @return {boolean}\n */\nexport function check12ValidRange(\n  CMIElement: string,\n  value: any,\n  rangePattern: string,\n  allowEmptyString?: boolean,\n): boolean {\n  if (!allowEmptyString && value === \"\") {\n    throw new Scorm12ValidationError(CMIElement, scorm12_errors.VALUE_OUT_OF_RANGE as number);\n  }\n\n  return checkValidRange(\n    CMIElement,\n    value,\n    rangePattern,\n    scorm12_errors.VALUE_OUT_OF_RANGE as number,\n    Scorm12ValidationError,\n  );\n}\n","import { BaseScormValidationError } from \"../exceptions\";\nimport { checkValidFormat, checkValidRange } from \"../cmi/common/validation\";\nimport { check12ValidFormat, check12ValidRange } from \"../cmi/scorm12/validation\";\nimport { scorm12_regex } from \"../constants/regex\";\nimport { scorm12_errors } from \"../constants/error_codes\";\nimport { Scorm12ValidationError } from \"../exceptions/scorm12_exceptions\";\n\n/**\n * Service for validating CMI data model properties\n */\nexport class ValidationService {\n  /**\n   * Validates a score property (raw, min, max)\n   *\n   * @param {string} CMIElement\n   * @param {string} value - The value to validate\n   * @param {string} decimalRegex - The regex pattern for decimal validation\n   * @param {string | false} scoreRange - The range pattern for score validation, or false if no range validation is needed\n   * @param {number} invalidTypeCode - The error code for invalid type\n   * @param {number} invalidRangeCode - The error code for invalid range\n   * @param {typeof BaseScormValidationError} errorClass - The error class to use for validation errors\n   * @return {boolean} - True if validation passes, throws an error otherwise\n   */\n  validateScore(\n    CMIElement: string,\n    value: string,\n    decimalRegex: string,\n    scoreRange: string | false,\n    invalidTypeCode: number,\n    invalidRangeCode: number,\n    errorClass: typeof BaseScormValidationError,\n  ): boolean {\n    return (\n      checkValidFormat(CMIElement, value, decimalRegex, invalidTypeCode, errorClass) &&\n      (!scoreRange || checkValidRange(CMIElement, value, scoreRange, invalidRangeCode, errorClass))\n    );\n    // This line should never be reached due to exceptions being thrown\n  }\n\n  /**\n   * Validates a SCORM 1.2 audio property\n   *\n   * @param {string} CMIElement\n   * @param {string} value - The value to validate\n   * @return {boolean} - True if validation passes, throws an error otherwise\n   */\n  validateScorm12Audio(CMIElement: string, value: string): boolean {\n    return (\n      check12ValidFormat(CMIElement, value, scorm12_regex.CMISInteger) &&\n      check12ValidRange(CMIElement, value, scorm12_regex.audio_range)\n    );\n  }\n\n  /**\n   * Validates a SCORM 1.2 language property\n   *\n   * @param {string} CMIElement\n   * @param {string} value - The value to validate\n   * @return {boolean} - True if validation passes, throws an error otherwise\n   */\n  validateScorm12Language(CMIElement: string, value: string): boolean {\n    return check12ValidFormat(CMIElement, value, scorm12_regex.CMIString256);\n  }\n\n  /**\n   * Validates a SCORM 1.2 speed property\n   *\n   * @param {string} CMIElement\n   * @param {string} value - The value to validate\n   * @return {boolean} - True if validation passes, throws an error otherwise\n   */\n  validateScorm12Speed(CMIElement: string, value: string): boolean {\n    return (\n      check12ValidFormat(CMIElement, value, scorm12_regex.CMISInteger) &&\n      check12ValidRange(CMIElement, value, scorm12_regex.speed_range)\n    );\n  }\n\n  /**\n   * Validates a SCORM 1.2 text property\n   *\n   * @param {string} CMIElement\n   * @param {string} value - The value to validate\n   * @return {boolean} - True if validation passes, throws an error otherwise\n   */\n  validateScorm12Text(CMIElement: string, value: string): boolean {\n    return (\n      check12ValidFormat(CMIElement, value, scorm12_regex.CMISInteger) &&\n      check12ValidRange(CMIElement, value, scorm12_regex.text_range)\n    );\n  }\n\n  /**\n   * Validates if a property is read-only\n   *\n   * @param {string} CMIElement\n   * @param {boolean} initialized - Whether the object is initialized\n   * @throws {BaseScormValidationError} - Throws an error if the object is initialized\n   */\n  validateReadOnly(CMIElement: string, initialized: boolean): void {\n    if (initialized) {\n      throw new Scorm12ValidationError(CMIElement, scorm12_errors.READ_ONLY_ELEMENT as number);\n    }\n  }\n}\n\n// Export a singleton instance of the ValidationService\nexport const validationService = new ValidationService();\n","import { scorm12_constants } from \"../../constants/api_constants\";\nimport { scorm12_regex } from \"../../constants/regex\";\nimport { BaseCMI } from \"./base_cmi\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { BaseScormValidationError } from \"../../exceptions\";\nimport { validationService } from \"../../services/ValidationService\";\nimport { ScoreObject } from \"../../types/api_types\";\n\n/**\n * Base class for cmi *.score objects\n */\nexport class CMIScore extends BaseCMI {\n  private readonly __children: string;\n  private readonly __score_range: string | false;\n  private readonly __invalid_error_code: number;\n  private readonly __invalid_type_code: number;\n  private readonly __invalid_range_code: number;\n  private readonly __decimal_regex: string;\n  private readonly __error_class: typeof BaseScormValidationError;\n  protected _raw = \"\";\n  protected _min = \"\";\n  protected _max: string;\n\n  /**\n   * Constructor for *.score\n   * @param {\n   *     score_children: string,\n   *     score_range: string,\n   *     max: string,\n   *     invalidErrorCode: number,\n   *     invalidTypeCode: number,\n   *     invalidRangeCode: number,\n   *     decimalRegex: string,\n   *     errorClass: typeof BaseScormValidationError\n   * } params\n   */\n  constructor(params: {\n    CMIElement: string;\n    score_children?: string;\n    score_range?: string;\n    max?: string;\n    invalidErrorCode?: number;\n    invalidTypeCode?: number;\n    invalidRangeCode?: number;\n    decimalRegex?: string;\n    errorClass: typeof BaseScormValidationError;\n  }) {\n    super(params.CMIElement);\n\n    this.__children = params.score_children || scorm12_constants.score_children;\n    this.__score_range = !params.score_range ? false : scorm12_regex.score_range;\n    this._max = params.max || params.max === \"\" ? params.max : \"100\";\n    this.__invalid_error_code =\n      params.invalidErrorCode || (scorm12_errors.INVALID_SET_VALUE as number);\n    this.__invalid_type_code = params.invalidTypeCode || (scorm12_errors.TYPE_MISMATCH as number);\n    this.__invalid_range_code =\n      params.invalidRangeCode || (scorm12_errors.VALUE_OUT_OF_RANGE as number);\n    this.__decimal_regex = params.decimalRegex || scorm12_regex.CMIDecimal;\n    this.__error_class = params.errorClass;\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for _children\n   * @return {string}\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for _children. Just throws an error.\n   * @param {string} _children\n   */\n  set _children(_children: string) {\n    throw new this.__error_class(this._cmi_element + \"._children\", this.__invalid_error_code);\n  }\n\n  /**\n   * Getter for _raw\n   * @return {string}\n   */\n  get raw(): string {\n    return this._raw;\n  }\n\n  /**\n   * Setter for _raw\n   * @param {string} raw\n   */\n  set raw(raw: string) {\n    if (\n      validationService.validateScore(\n        this._cmi_element + \".raw\",\n        raw,\n        this.__decimal_regex,\n        this.__score_range,\n        this.__invalid_type_code,\n        this.__invalid_range_code,\n        this.__error_class,\n      )\n    ) {\n      this._raw = raw;\n    }\n  }\n\n  /**\n   * Getter for _min\n   * @return {string}\n   */\n  get min(): string {\n    return this._min;\n  }\n\n  /**\n   * Setter for _min\n   * @param {string} min\n   */\n  set min(min: string) {\n    if (\n      validationService.validateScore(\n        this._cmi_element + \".min\",\n        min,\n        this.__decimal_regex,\n        this.__score_range,\n        this.__invalid_type_code,\n        this.__invalid_range_code,\n        this.__error_class,\n      )\n    ) {\n      this._min = min;\n    }\n  }\n\n  /**\n   * Getter for _max\n   * @return {string}\n   */\n  get max(): string {\n    return this._max;\n  }\n\n  /**\n   * Setter for _max\n   * @param {string} max\n   */\n  set max(max: string) {\n    if (\n      validationService.validateScore(\n        this._cmi_element + \".max\",\n        max,\n        this.__decimal_regex,\n        this.__score_range,\n        this.__invalid_type_code,\n        this.__invalid_range_code,\n        this.__error_class,\n      )\n    ) {\n      this._max = max;\n    }\n  }\n\n  /**\n   * Getter for _score_range\n   * @return {string | false}\n   */\n  public getScoreObject(): ScoreObject {\n    const scoreObject: ScoreObject = {};\n    if (!Number.isNaN(Number.parseFloat(this.raw))) {\n      scoreObject.raw = Number.parseFloat(this.raw);\n    }\n    if (!Number.isNaN(Number.parseFloat(this.min))) {\n      scoreObject.min = Number.parseFloat(this.min);\n    }\n    if (!Number.isNaN(Number.parseFloat(this.max))) {\n      scoreObject.max = Number.parseFloat(this.max);\n    }\n    return scoreObject;\n  }\n\n  /**\n   * toJSON for *.score\n   * @return {\n   *    {\n   *      min: string,\n   *      max: string,\n   *      raw: string\n   *    }\n   *    }\n   */\n  toJSON(): {\n    min: string;\n    max: string;\n    raw: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      raw: this.raw,\n      min: this.min,\n      max: this.max,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","/**\n * Class for SCORM 2004's cmi *.score object\n */\nimport { CMIScore } from \"../common/score\";\nimport { scorm2004_constants } from \"../../constants/api_constants\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { scorm2004_regex } from \"../../constants/regex\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { check2004ValidFormat, check2004ValidRange } from \"./validation\";\nimport { ScoreObject } from \"../../types/api_types\";\n\nexport class Scorm2004CMIScore extends CMIScore {\n  private _scaled = \"\";\n\n  /**\n   * Constructor for cmi *.score\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.score\",\n      score_children: scorm2004_constants.score_children,\n      max: \"\",\n      invalidErrorCode: scorm2004_errors.READ_ONLY_ELEMENT as number,\n      invalidTypeCode: scorm2004_errors.TYPE_MISMATCH as number,\n      invalidRangeCode: scorm2004_errors.VALUE_OUT_OF_RANGE as number,\n      decimalRegex: scorm2004_regex.CMIDecimal,\n      errorClass: Scorm2004ValidationError,\n    });\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  override reset(): void {\n    this._initialized = false;\n    this._scaled = \"\";\n    this._raw = \"\";\n    this._min = \"\";\n    this._max = \"\";\n  }\n\n  /**\n   * Getter for _scaled\n   * @return {string}\n   */\n  get scaled(): string {\n    return this._scaled;\n  }\n\n  /**\n   * Setter for _scaled\n   * @param {string} scaled\n   */\n  set scaled(scaled: string) {\n    if (\n      check2004ValidFormat(this._cmi_element + \".scaled\", scaled, scorm2004_regex.CMIDecimal) &&\n      check2004ValidRange(this._cmi_element + \".scaled\", scaled, scorm2004_regex.scaled_range)\n    ) {\n      this._scaled = scaled;\n    }\n  }\n\n  override getScoreObject(): ScoreObject {\n    const scoreObject = super.getScoreObject();\n\n    if (!Number.isNaN(Number.parseFloat(this.scaled))) {\n      scoreObject.scaled = Number.parseFloat(this.scaled);\n    }\n\n    return scoreObject;\n  }\n\n  /**\n   * toJSON for cmi *.score\n   *\n   * @return {\n   *    {\n   *      scaled: string,\n   *      raw: string,\n   *      min: string,\n   *      max: string\n   *    }\n   *  }\n   */\n  override toJSON(): {\n    scaled: string;\n    raw: string;\n    min: string;\n    max: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      scaled: this.scaled,\n      raw: this.raw,\n      min: this.min,\n      max: this.max,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { CMIArray } from \"../common/array\";\nimport { scorm2004_constants } from \"../../constants/api_constants\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { check2004ValidFormat } from \"./validation\";\nimport { scorm2004_regex } from \"../../constants/regex\";\n\n/**\n * Class representing SCORM 2004's cmi.comments_from_lms object\n * @extends CMIArray\n */\nexport class CMICommentsFromLMS extends CMIArray {\n  /**\n   * Constructor for cmi.comments_from_lms Array\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.comments_from_lms\",\n      children: scorm2004_constants.comments_children,\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT as number,\n      errorClass: Scorm2004ValidationError,\n    });\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.comments_from_learner object\n */\n\nexport class CMICommentsFromLearner extends CMIArray {\n  /**\n   * Constructor for cmi.comments_from_learner Array\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.comments_from_learner\",\n      children: scorm2004_constants.comments_children,\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT as number,\n      errorClass: Scorm2004ValidationError,\n    });\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.comments_from_learner.n and cmi.comments_from_lms.n object\n */\n\nexport class CMICommentsObject extends BaseCMI {\n  private _comment = \"\";\n  private _location = \"\";\n  private _timestamp = \"\";\n  private readonly _readOnlyAfterInit: boolean;\n\n  /**\n   * Constructor for cmi.comments_from_learner.n and cmi.comments_from_lms.n\n   * @param {boolean} readOnlyAfterInit\n   */\n  constructor(readOnlyAfterInit: boolean = false) {\n    super(\"cmi.comments_from_learner.n\");\n    this._comment = \"\";\n    this._location = \"\";\n    this._timestamp = \"\";\n    this._readOnlyAfterInit = readOnlyAfterInit;\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for _comment\n   * @return {string}\n   */\n  get comment(): string {\n    return this._comment;\n  }\n\n  /**\n   * Setter for _comment\n   * @param {string} comment\n   */\n  set comment(comment: string) {\n    if (this.initialized && this._readOnlyAfterInit) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".comment\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".comment\",\n          comment,\n          scorm2004_regex.CMILangString4000,\n          true,\n        )\n      ) {\n        this._comment = comment;\n      }\n    }\n  }\n\n  /**\n   * Getter for _location\n   * @return {string}\n   */\n  get location(): string {\n    return this._location;\n  }\n\n  /**\n   * Setter for _location\n   * @param {string} location\n   */\n  set location(location: string) {\n    if (this.initialized && this._readOnlyAfterInit) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".location\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".location\",\n          location,\n          scorm2004_regex.CMIString250,\n        )\n      ) {\n        this._location = location;\n      }\n    }\n  }\n\n  /**\n   * Getter for _timestamp\n   * @return {string}\n   */\n  get timestamp(): string {\n    return this._timestamp;\n  }\n\n  /**\n   * Setter for _timestamp\n   * @param {string} timestamp\n   */\n  set timestamp(timestamp: string) {\n    if (this.initialized && this._readOnlyAfterInit) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".timestamp\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      if (\n        check2004ValidFormat(this._cmi_element + \".timestamp\", timestamp, scorm2004_regex.CMITime)\n      ) {\n        this._timestamp = timestamp;\n      }\n    }\n  }\n\n  /**\n   * toJSON for cmi.comments_from_learner.n object\n   * @return {\n   *    {\n   *      comment: string,\n   *      location: string,\n   *      timestamp: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    comment: string;\n    location: string;\n    timestamp: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      comment: this.comment,\n      location: this.location,\n      timestamp: this.timestamp,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { CMIArray } from \"../common/array\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { Scorm2004CMIScore } from \"./score\";\nimport { check2004ValidFormat, check2004ValidRange } from \"./validation\";\nimport { scorm2004_regex } from \"../../constants/regex\";\nimport { scorm2004_constants } from \"../../constants/api_constants\";\n\n/**\n * Class representing SCORM 2004's `cmi.objectives` object\n * @extends CMIArray\n */\nexport class CMIObjectives extends CMIArray {\n  /**\n   * Constructor for `cmi.objectives` Array\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.objectives\",\n      children: scorm2004_constants.objectives_children,\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT as number,\n      errorClass: Scorm2004ValidationError,\n    });\n  }\n\n  /**\n   * Find an objective by its ID\n   */\n  public findObjectiveById(id: string): CMIObjectivesObject | undefined {\n    return this.childArray.find((objective) => objective.id === id);\n  }\n\n  /**\n   * Find objective by its index\n   */\n  public findObjectiveByIndex(index: number): CMIObjectivesObject {\n    return this.childArray[index];\n  }\n\n  /**\n   * Set an objective at the given index\n   */\n  public setObjectiveByIndex(index: number, objective: CMIObjectivesObject) {\n    this.childArray[index] = objective;\n  }\n}\n\n/**\n * Class for SCORM 2004's cmi.objectives.n object\n */\nexport class CMIObjectivesObject extends BaseCMI {\n  private _id = \"\";\n  private _success_status = \"unknown\";\n  private _completion_status = \"unknown\";\n  private _progress_measure = \"\";\n  private _description = \"\";\n\n  /**\n   * Constructor for cmi.objectives.n\n   */\n  constructor() {\n    super(\"cmi.objectives.n\");\n    this.score = new Scorm2004CMIScore();\n  }\n\n  override reset() {\n    this._initialized = false;\n  }\n\n  public score: Scorm2004CMIScore;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.score?.initialize();\n  }\n\n  /**\n   * Getter for _id\n   * @return {string}\n   */\n  get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Setter for _id\n   * @param {string} id\n   */\n  set id(id: string) {\n    if (check2004ValidFormat(this._cmi_element + \".id\", id, scorm2004_regex.CMILongIdentifier)) {\n      this._id = id;\n    }\n  }\n\n  /**\n   * Getter for _success_status\n   * @return {string}\n   */\n  get success_status(): string {\n    return this._success_status;\n  }\n\n  /**\n   * Setter for _success_status\n   * @param {string} success_status\n   */\n  set success_status(success_status: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".success_status\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED as number,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".success_status\",\n          success_status,\n          scorm2004_regex.CMISStatus,\n        )\n      ) {\n        this._success_status = success_status;\n      }\n    }\n  }\n\n  /**\n   * Getter for _completion_status\n   * @return {string}\n   */\n  get completion_status(): string {\n    return this._completion_status;\n  }\n\n  /**\n   * Setter for _completion_status\n   * @param {string} completion_status\n   */\n  set completion_status(completion_status: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".completion_status\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED as number,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".completion_status\",\n          completion_status,\n          scorm2004_regex.CMICStatus,\n        )\n      ) {\n        this._completion_status = completion_status;\n      }\n    }\n  }\n\n  /**\n   * Getter for _progress_measure\n   * @return {string}\n   */\n  get progress_measure(): string {\n    return this._progress_measure;\n  }\n\n  /**\n   * Setter for _progress_measure\n   * @param {string} progress_measure\n   */\n  set progress_measure(progress_measure: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".progress_measure\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED as number,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".progress_measure\",\n          progress_measure,\n          scorm2004_regex.CMIDecimal,\n        ) &&\n        check2004ValidRange(\n          this._cmi_element + \".progress_measure\",\n          progress_measure,\n          scorm2004_regex.progress_range,\n        )\n      ) {\n        this._progress_measure = progress_measure;\n      }\n    }\n  }\n\n  /**\n   * Getter for _description\n   * @return {string}\n   */\n  get description(): string {\n    return this._description;\n  }\n\n  /**\n   * Setter for _description\n   * @param {string} description\n   */\n  set description(description: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".description\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED as number,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".description\",\n          description,\n          scorm2004_regex.CMILangString250,\n          true,\n        )\n      ) {\n        this._description = description;\n      }\n    }\n  }\n\n  /**\n   * toJSON for cmi.objectives.n\n   *\n   * @return {\n   *    {\n   *      id: string,\n   *      success_status: string,\n   *      completion_status: string,\n   *      progress_measure: string,\n   *      description: string,\n   *      score: Scorm2004CMIScore\n   *    }\n   *  }\n   */\n  toJSON(): {\n    id: string;\n    success_status: string;\n    completion_status: string;\n    progress_measure: string;\n    description: string;\n    score: Scorm2004CMIScore;\n  } {\n    this.jsonString = true;\n    const result = {\n      id: this.id,\n      success_status: this.success_status,\n      completion_status: this.completion_status,\n      progress_measure: this.progress_measure,\n      description: this.description,\n      score: this.score,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","/**\n * Class representing metadata properties for SCORM 2004's cmi object\n */\nimport { scorm2004_constants } from \"../../constants/api_constants\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\n\n/**\n * Class representing metadata properties for SCORM 2004's cmi object\n */\nexport class CMIMetadata extends BaseCMI {\n  private __version = \"1.0\";\n  private __children = scorm2004_constants.cmi_children;\n\n  /**\n   * Constructor for CMIMetadata\n   */\n  constructor() {\n    super(\"cmi\");\n  }\n\n  /**\n   * Getter for __version\n   * @return {string}\n   */\n  get _version(): string {\n    return this.__version;\n  }\n\n  /**\n   * Setter for __version. Just throws an error.\n   * @param {string} _version\n   */\n  set _version(_version: string) {\n    throw new Scorm2004ValidationError(\n      this._cmi_element + \"._version\",\n      scorm2004_errors.READ_ONLY_ELEMENT as number,\n    );\n  }\n\n  /**\n   * Getter for __children\n   * @return {string}\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for __children. Just throws an error.\n   * @param {number} _children\n   */\n  set _children(_children: number) {\n    throw new Scorm2004ValidationError(\n      this._cmi_element + \"._children\",\n      scorm2004_errors.READ_ONLY_ELEMENT as number,\n    );\n  }\n\n  /**\n   * Reset the metadata properties\n   */\n  reset(): void {\n    this._initialized = false;\n    // No need to reset __version and __children as they are constants\n  }\n}\n","/**\n * Class representing learner properties for SCORM 2004's cmi object\n */\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\n\n/**\n * Class representing learner properties for SCORM 2004's cmi object\n */\nexport class CMILearner extends BaseCMI {\n  private _learner_id = \"\";\n  private _learner_name = \"\";\n\n  /**\n   * Constructor for CMILearner\n   */\n  constructor() {\n    super(\"cmi\");\n  }\n\n  /**\n   * Getter for _learner_id\n   * @return {string}\n   */\n  get learner_id(): string {\n    return this._learner_id;\n  }\n\n  /**\n   * Setter for _learner_id. Can only be called before initialization.\n   * @param {string} learner_id\n   */\n  set learner_id(learner_id: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".learner_id\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._learner_id = learner_id;\n    }\n  }\n\n  /**\n   * Getter for _learner_name\n   * @return {string}\n   */\n  get learner_name(): string {\n    return this._learner_name;\n  }\n\n  /**\n   * Setter for _learner_name. Can only be called before initialization.\n   * @param {string} learner_name\n   */\n  set learner_name(learner_name: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".learner_name\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._learner_name = learner_name;\n    }\n  }\n\n  /**\n   * Reset the learner properties\n   */\n  reset(): void {\n    this._initialized = false;\n    // Don't reset learner_id and learner_name as they are read-only after initialization\n  }\n}\n","/**\n * Class representing status properties for SCORM 2004's cmi object\n */\nimport { scorm2004_regex } from \"../../constants/regex\";\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { check2004ValidFormat, check2004ValidRange } from \"./validation\";\n\n/**\n * Class representing status properties for SCORM 2004's cmi object\n */\nexport class CMIStatus extends BaseCMI {\n  private _completion_status = \"unknown\";\n  private _success_status = \"unknown\";\n  private _progress_measure = \"\";\n\n  /**\n   * Constructor for CMIStatus\n   */\n  constructor() {\n    super(\"cmi\");\n  }\n\n  /**\n   * Getter for _completion_status\n   * @return {string}\n   */\n  get completion_status(): string {\n    return this._completion_status;\n  }\n\n  /**\n   * Setter for _completion_status\n   * @param {string} completion_status\n   */\n  set completion_status(completion_status: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".completion_status\",\n        completion_status,\n        scorm2004_regex.CMICStatus,\n      )\n    ) {\n      this._completion_status = completion_status;\n    }\n  }\n\n  /**\n   * Getter for _success_status\n   * @return {string}\n   */\n  get success_status(): string {\n    return this._success_status;\n  }\n\n  /**\n   * Setter for _success_status\n   * @param {string} success_status\n   */\n  set success_status(success_status: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".success_status\",\n        success_status,\n        scorm2004_regex.CMISStatus,\n      )\n    ) {\n      this._success_status = success_status;\n    }\n  }\n\n  /**\n   * Getter for _progress_measure\n   * @return {string}\n   */\n  get progress_measure(): string {\n    return this._progress_measure;\n  }\n\n  /**\n   * Setter for _progress_measure\n   * @param {string} progress_measure\n   */\n  set progress_measure(progress_measure: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".progress_measure\",\n        progress_measure,\n        scorm2004_regex.CMIDecimal,\n      ) &&\n      check2004ValidRange(\n        this._cmi_element + \".progress_measure\",\n        progress_measure,\n        scorm2004_regex.progress_range,\n      )\n    ) {\n      this._progress_measure = progress_measure;\n    }\n  }\n\n  /**\n   * Reset the status properties\n   */\n  reset(): void {\n    this._initialized = false;\n    this._completion_status = \"unknown\";\n    this._success_status = \"unknown\";\n    this._progress_measure = \"\";\n  }\n}\n","/**\n * Class representing session properties for SCORM 2004's cmi object\n */\nimport { scorm2004_regex } from \"../../constants/regex\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { check2004ValidFormat } from \"./validation\";\nimport * as Util from \"../../utilities\";\n\n/**\n * Class representing session properties for SCORM 2004's cmi object\n */\nexport class CMISession extends BaseCMI {\n  private _entry = \"\";\n  private _exit = \"\";\n  private _session_time = \"PT0H0M0S\";\n  private _total_time = \"\";\n\n  /**\n   * Constructor for CMISession\n   */\n  constructor() {\n    super(\"cmi\");\n  }\n\n  /**\n   * Getter for _entry\n   * @return {string}\n   */\n  get entry(): string {\n    return this._entry;\n  }\n\n  /**\n   * Setter for _entry. Can only be called before initialization.\n   * @param {string} entry\n   */\n  set entry(entry: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".entry\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._entry = entry;\n    }\n  }\n\n  /**\n   * Getter for _exit. Should only be called during JSON export.\n   * @return {string}\n   */\n  get exit(): string {\n    if (!this.jsonString) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".exit\",\n        scorm2004_errors.WRITE_ONLY_ELEMENT as number,\n      );\n    }\n    return this._exit;\n  }\n\n  /**\n   * Setter for _exit\n   * @param {string} exit\n   */\n  set exit(exit: string) {\n    if (check2004ValidFormat(this._cmi_element + \".exit\", exit, scorm2004_regex.CMIExit, true)) {\n      this._exit = exit;\n    }\n  }\n\n  /**\n   * Getter for _session_time. Should only be called during JSON export.\n   * @return {string}\n   */\n  get session_time(): string {\n    if (!this.jsonString) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".session_time\",\n        scorm2004_errors.WRITE_ONLY_ELEMENT as number,\n      );\n    }\n    return this._session_time;\n  }\n\n  /**\n   * Setter for _session_time\n   * @param {string} session_time\n   */\n  set session_time(session_time: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".session_time\",\n        session_time,\n        scorm2004_regex.CMITimespan,\n      )\n    ) {\n      this._session_time = session_time;\n    }\n  }\n\n  /**\n   * Getter for _total_time\n   * @return {string}\n   */\n  get total_time(): string {\n    return this._total_time;\n  }\n\n  /**\n   * Setter for _total_time. Can only be called before initialization.\n   * @param {string} total_time\n   */\n  set total_time(total_time: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".total_time\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._total_time = total_time;\n    }\n  }\n\n  /**\n   * Adds the current session time to the existing total time.\n   *\n   * @return {string} ISO8601 Duration\n   */\n  getCurrentTotalTime(start_time: number | undefined): string {\n    let sessionTime = this._session_time;\n    if (typeof start_time !== \"undefined\" && start_time !== null) {\n      const seconds = new Date().getTime() - start_time;\n      sessionTime = Util.getSecondsAsISODuration(seconds / 1000);\n    }\n\n    return Util.addTwoDurations(this._total_time, sessionTime, scorm2004_regex.CMITimespan);\n  }\n\n  /**\n   * Reset the session properties\n   */\n  reset(): void {\n    this._initialized = false;\n    this._entry = \"\";\n    this._exit = \"\";\n    this._session_time = \"PT0H0M0S\";\n    // Don't reset total_time as it's read-only after initialization\n  }\n}\n","/**\n * Class representing content properties for SCORM 2004's cmi object\n */\nimport { scorm2004_regex } from \"../../constants/regex\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { check2004ValidFormat } from \"./validation\";\n\n/**\n * Class representing content properties for SCORM 2004's cmi object\n */\nexport class CMIContent extends BaseCMI {\n  private _location = \"\";\n  private _launch_data = \"\";\n  private _suspend_data = \"\";\n\n  /**\n   * Constructor for CMIContent\n   */\n  constructor() {\n    super(\"cmi\");\n  }\n\n  /**\n   * Getter for _location\n   * @return {string}\n   */\n  get location(): string {\n    return this._location;\n  }\n\n  /**\n   * Setter for _location\n   * @param {string} location\n   */\n  set location(location: string) {\n    if (\n      check2004ValidFormat(this._cmi_element + \".location\", location, scorm2004_regex.CMIString1000)\n    ) {\n      this._location = location;\n    }\n  }\n\n  /**\n   * Getter for _launch_data\n   * @return {string}\n   */\n  get launch_data(): string {\n    return this._launch_data;\n  }\n\n  /**\n   * Setter for _launch_data. Can only be called before initialization.\n   * @param {string} launch_data\n   */\n  set launch_data(launch_data: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".launch_data\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._launch_data = launch_data;\n    }\n  }\n\n  /**\n   * Getter for _suspend_data\n   * @return {string}\n   */\n  get suspend_data(): string {\n    return this._suspend_data;\n  }\n\n  /**\n   * Setter for _suspend_data\n   * @param {string} suspend_data\n   */\n  set suspend_data(suspend_data: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".suspend_data\",\n        suspend_data,\n        scorm2004_regex.CMIString64000,\n        true,\n      )\n    ) {\n      this._suspend_data = suspend_data;\n    }\n  }\n\n  /**\n   * Reset the content properties\n   */\n  reset(): void {\n    this._initialized = false;\n    this._location = \"\";\n    // Don't reset launch_data as it's read-only after initialization\n    this._suspend_data = \"\";\n  }\n}\n","/**\n * Class representing settings properties for SCORM 2004's cmi object\n */\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\n\n/**\n * Class representing settings properties for SCORM 2004's cmi object\n */\nexport class CMISettings extends BaseCMI {\n  private _credit = \"credit\";\n  private _mode = \"normal\";\n  private _time_limit_action = \"continue,no message\";\n  private _max_time_allowed = \"\";\n\n  /**\n   * Constructor for CMISettings\n   */\n  constructor() {\n    super(\"cmi\");\n  }\n\n  /**\n   * Getter for _credit\n   * @return {string}\n   */\n  get credit(): string {\n    return this._credit;\n  }\n\n  /**\n   * Setter for _credit. Can only be called before initialization.\n   * @param {string} credit\n   */\n  set credit(credit: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".credit\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._credit = credit;\n    }\n  }\n\n  /**\n   * Getter for _mode\n   * @return {string}\n   */\n  get mode(): string {\n    return this._mode;\n  }\n\n  /**\n   * Setter for _mode. Can only be called before initialization.\n   * @param {string} mode\n   */\n  set mode(mode: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".mode\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._mode = mode;\n    }\n  }\n\n  /**\n   * Getter for _time_limit_action\n   * @return {string}\n   */\n  get time_limit_action(): string {\n    return this._time_limit_action;\n  }\n\n  /**\n   * Setter for _time_limit_action. Can only be called before initialization.\n   * @param {string} time_limit_action\n   */\n  set time_limit_action(time_limit_action: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".time_limit_action\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._time_limit_action = time_limit_action;\n    }\n  }\n\n  /**\n   * Getter for _max_time_allowed\n   * @return {string}\n   */\n  get max_time_allowed(): string {\n    return this._max_time_allowed;\n  }\n\n  /**\n   * Setter for _max_time_allowed. Can only be called before initialization.\n   * @param {string} max_time_allowed\n   */\n  set max_time_allowed(max_time_allowed: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".max_time_allowed\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._max_time_allowed = max_time_allowed;\n    }\n  }\n\n  /**\n   * Reset the settings properties\n   */\n  reset(): void {\n    this._initialized = false;\n    // Don't reset these properties as they are read-only after initialization\n  }\n}\n","/**\n * Class representing threshold properties for SCORM 2004's cmi object\n */\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\n\n/**\n * Class representing threshold properties for SCORM 2004's cmi object\n */\nexport class CMIThresholds extends BaseCMI {\n  private _scaled_passing_score = \"\";\n  private _completion_threshold = \"\";\n\n  /**\n   * Constructor for CMIThresholds\n   */\n  constructor() {\n    super(\"cmi\");\n  }\n\n  /**\n   * Getter for _scaled_passing_score\n   * @return {string}\n   */\n  get scaled_passing_score(): string {\n    return this._scaled_passing_score;\n  }\n\n  /**\n   * Setter for _scaled_passing_score. Can only be called before initialization.\n   * @param {string} scaled_passing_score\n   */\n  set scaled_passing_score(scaled_passing_score: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".scaled_passing_score\",\n        scorm2004_errors.READ_ONLY_ELEMENT ?? 404,\n      );\n    } else {\n      this._scaled_passing_score = scaled_passing_score;\n    }\n  }\n\n  /**\n   * Getter for _completion_threshold\n   * @return {string}\n   */\n  get completion_threshold(): string {\n    return this._completion_threshold;\n  }\n\n  /**\n   * Setter for _completion_threshold. Can only be called before initialization.\n   * @param {string} completion_threshold\n   */\n  set completion_threshold(completion_threshold: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".completion_threshold\",\n        scorm2004_errors.READ_ONLY_ELEMENT ?? 404,\n      );\n    } else {\n      this._completion_threshold = completion_threshold;\n    }\n  }\n\n  /**\n   * Reset the threshold properties\n   */\n  reset(): void {\n    this._initialized = false;\n    // Don't reset these properties as they are read-only after initialization\n  }\n}\n","import { BaseRootCMI } from \"../common/base_cmi\";\nimport { CMILearnerPreference } from \"./learner_preference\";\nimport { CMIInteractions } from \"./interactions\";\nimport { Scorm2004CMIScore } from \"./score\";\nimport { CMICommentsFromLearner, CMICommentsFromLMS } from \"./comments\";\nimport { CMIObjectives } from \"./objectives\";\nimport { CMIMetadata } from \"./metadata\";\nimport { CMILearner } from \"./learner\";\nimport { CMIStatus } from \"./status\";\nimport { CMISession } from \"./session\";\nimport { CMIContent } from \"./content\";\nimport { CMISettings } from \"./settings\";\nimport { CMIThresholds } from \"./thresholds\";\n\n/**\n * Class representing cmi object for SCORM 2004\n */\nexport class CMI extends BaseRootCMI {\n  /**\n   * Constructor for the SCORM 2004 cmi object\n   * @param {boolean} initialized\n   */\n  constructor(initialized: boolean = false) {\n    super(\"cmi\");\n    this.metadata = new CMIMetadata();\n    this.learner = new CMILearner();\n    this.status = new CMIStatus();\n    this.session = new CMISession();\n    this.content = new CMIContent();\n    this.settings = new CMISettings();\n    this.thresholds = new CMIThresholds();\n    this.learner_preference = new CMILearnerPreference();\n    this.score = new Scorm2004CMIScore();\n    this.comments_from_learner = new CMICommentsFromLearner();\n    this.comments_from_lms = new CMICommentsFromLMS();\n    this.interactions = new CMIInteractions();\n    this.objectives = new CMIObjectives();\n    if (initialized) this.initialize();\n  }\n\n  // New component classes\n  private metadata: CMIMetadata;\n  private learner: CMILearner;\n  private status: CMIStatus;\n  private session: CMISession;\n  private content: CMIContent;\n  private settings: CMISettings;\n  private thresholds: CMIThresholds;\n\n  // Original complex objects\n  public learner_preference: CMILearnerPreference;\n  public score: Scorm2004CMIScore;\n  public comments_from_learner: CMICommentsFromLearner;\n  public comments_from_lms: CMICommentsFromLMS;\n  public interactions: CMIInteractions;\n  public objectives: CMIObjectives;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    // Initialize new component classes\n    this.metadata?.initialize();\n    this.learner?.initialize();\n    this.status?.initialize();\n    this.session?.initialize();\n    this.content?.initialize();\n    this.settings?.initialize();\n    this.thresholds?.initialize();\n\n    // Initialize original complex objects\n    this.learner_preference?.initialize();\n    this.score?.initialize();\n    this.comments_from_learner?.initialize();\n    this.comments_from_lms?.initialize();\n    this.interactions?.initialize();\n    this.objectives?.initialize();\n  }\n\n  /**\n   * Called when API is moving to another SCO\n   */\n  reset() {\n    this._initialized = false;\n\n    // Reset new component classes\n    this.metadata?.reset();\n    this.learner?.reset();\n    this.status?.reset();\n    this.session?.reset();\n    this.content?.reset();\n    this.settings?.reset();\n    this.thresholds?.reset();\n\n    // Reset original complex objects\n    this.objectives?.reset(false);\n    this.interactions?.reset(true);\n    this.score?.reset();\n    this.comments_from_learner?.reset();\n    this.comments_from_lms?.reset();\n    this.learner_preference?.reset();\n  }\n\n  /**\n   * Getter for __version\n   * @return {string}\n   * @private\n   */\n  get _version(): string {\n    return this.metadata._version;\n  }\n\n  /**\n   * Setter for __version. Just throws an error.\n   * @param {string} _version\n   * @private\n   */\n  set _version(_version: string) {\n    this.metadata._version = _version;\n  }\n\n  /**\n   * Getter for __children\n   * @return {string}\n   * @private\n   */\n  get _children(): string {\n    return this.metadata._children;\n  }\n\n  /**\n   * Setter for __children. Just throws an error.\n   * @param {number} _children\n   * @private\n   */\n  set _children(_children: number) {\n    this.metadata._children = _children;\n  }\n\n  /**\n   * Getter for _completion_status\n   * @return {string}\n   */\n  get completion_status(): string {\n    return this.status.completion_status;\n  }\n\n  /**\n   * Setter for _completion_status\n   * @param {string} completion_status\n   */\n  set completion_status(completion_status: string) {\n    this.status.completion_status = completion_status;\n  }\n\n  /**\n   * Getter for _completion_threshold\n   * @return {string}\n   */\n  get completion_threshold(): string {\n    return this.thresholds.completion_threshold;\n  }\n\n  /**\n   * Setter for _completion_threshold. Can only be called before initialization.\n   * @param {string} completion_threshold\n   */\n  set completion_threshold(completion_threshold: string) {\n    this.thresholds.completion_threshold = completion_threshold;\n  }\n\n  /**\n   * Getter for _credit\n   * @return {string}\n   */\n  get credit(): string {\n    return this.settings.credit;\n  }\n\n  /**\n   * Setter for _credit. Can only be called before initialization.\n   * @param {string} credit\n   */\n  set credit(credit: string) {\n    this.settings.credit = credit;\n  }\n\n  /**\n   * Getter for _entry\n   * @return {string}\n   */\n  get entry(): string {\n    return this.session.entry;\n  }\n\n  /**\n   * Setter for _entry. Can only be called before initialization.\n   * @param {string} entry\n   */\n  set entry(entry: string) {\n    this.session.entry = entry;\n  }\n\n  /**\n   * Getter for _exit. Should only be called during JSON export.\n   * @return {string}\n   */\n  get exit(): string {\n    this.session.jsonString = this.jsonString;\n    return this.session.exit;\n  }\n\n  /**\n   * Setter for _exit\n   * @param {string} exit\n   */\n  set exit(exit: string) {\n    this.session.exit = exit;\n  }\n\n  /**\n   * Getter for _launch_data\n   * @return {string}\n   */\n  get launch_data(): string {\n    return this.content.launch_data;\n  }\n\n  /**\n   * Setter for _launch_data. Can only be called before initialization.\n   * @param {string} launch_data\n   */\n  set launch_data(launch_data: string) {\n    this.content.launch_data = launch_data;\n  }\n\n  /**\n   * Getter for _learner_id\n   * @return {string}\n   */\n  get learner_id(): string {\n    return this.learner.learner_id;\n  }\n\n  /**\n   * Setter for _learner_id. Can only be called before initialization.\n   * @param {string} learner_id\n   */\n  set learner_id(learner_id: string) {\n    this.learner.learner_id = learner_id;\n  }\n\n  /**\n   * Getter for _learner_name\n   * @return {string}\n   */\n  get learner_name(): string {\n    return this.learner.learner_name;\n  }\n\n  /**\n   * Setter for _learner_name. Can only be called before initialization.\n   * @param {string} learner_name\n   */\n  set learner_name(learner_name: string) {\n    this.learner.learner_name = learner_name;\n  }\n\n  /**\n   * Getter for _location\n   * @return {string}\n   */\n  get location(): string {\n    return this.content.location;\n  }\n\n  /**\n   * Setter for _location\n   * @param {string} location\n   */\n  set location(location: string) {\n    this.content.location = location;\n  }\n\n  /**\n   * Getter for _max_time_allowed\n   * @return {string}\n   */\n  get max_time_allowed(): string {\n    return this.settings.max_time_allowed;\n  }\n\n  /**\n   * Setter for _max_time_allowed. Can only be called before initialization.\n   * @param {string} max_time_allowed\n   */\n  set max_time_allowed(max_time_allowed: string) {\n    this.settings.max_time_allowed = max_time_allowed;\n  }\n\n  /**\n   * Getter for _mode\n   * @return {string}\n   */\n  get mode(): string {\n    return this.settings.mode;\n  }\n\n  /**\n   * Setter for _mode. Can only be called before initialization.\n   * @param {string} mode\n   */\n  set mode(mode: string) {\n    this.settings.mode = mode;\n  }\n\n  /**\n   * Getter for _progress_measure\n   * @return {string}\n   */\n  get progress_measure(): string {\n    return this.status.progress_measure;\n  }\n\n  /**\n   * Setter for _progress_measure\n   * @param {string} progress_measure\n   */\n  set progress_measure(progress_measure: string) {\n    this.status.progress_measure = progress_measure;\n  }\n\n  /**\n   * Getter for _scaled_passing_score\n   * @return {string}\n   */\n  get scaled_passing_score(): string {\n    return this.thresholds.scaled_passing_score;\n  }\n\n  /**\n   * Setter for _scaled_passing_score. Can only be called before initialization.\n   * @param {string} scaled_passing_score\n   */\n  set scaled_passing_score(scaled_passing_score: string) {\n    this.thresholds.scaled_passing_score = scaled_passing_score;\n  }\n\n  /**\n   * Getter for _session_time. Should only be called during JSON export.\n   * @return {string}\n   */\n  get session_time(): string {\n    this.session.jsonString = this.jsonString;\n    return this.session.session_time;\n  }\n\n  /**\n   * Setter for _session_time\n   * @param {string} session_time\n   */\n  set session_time(session_time: string) {\n    this.session.session_time = session_time;\n  }\n\n  /**\n   * Getter for _success_status\n   * @return {string}\n   */\n  get success_status(): string {\n    return this.status.success_status;\n  }\n\n  /**\n   * Setter for _success_status\n   * @param {string} success_status\n   */\n  set success_status(success_status: string) {\n    this.status.success_status = success_status;\n  }\n\n  /**\n   * Getter for _suspend_data\n   * @return {string}\n   */\n  get suspend_data(): string {\n    return this.content.suspend_data;\n  }\n\n  /**\n   * Setter for _suspend_data\n   * @param {string} suspend_data\n   */\n  set suspend_data(suspend_data: string) {\n    this.content.suspend_data = suspend_data;\n  }\n\n  /**\n   * Getter for _time_limit_action\n   * @return {string}\n   */\n  get time_limit_action(): string {\n    return this.settings.time_limit_action;\n  }\n\n  /**\n   * Setter for _time_limit_action. Can only be called before initialization.\n   * @param {string} time_limit_action\n   */\n  set time_limit_action(time_limit_action: string) {\n    this.settings.time_limit_action = time_limit_action;\n  }\n\n  /**\n   * Getter for _total_time\n   * @return {string}\n   */\n  get total_time(): string {\n    return this.session.total_time;\n  }\n\n  /**\n   * Setter for _total_time. Can only be called before initialization.\n   * @param {string} total_time\n   */\n  set total_time(total_time: string) {\n    this.session.total_time = total_time;\n  }\n\n  /**\n   * Adds the current session time to the existing total time.\n   *\n   * @return {string} ISO8601 Duration\n   */\n  getCurrentTotalTime(): string {\n    return this.session.getCurrentTotalTime(this.start_time);\n  }\n\n  /**\n   * toJSON for cmi\n   *\n   * @return {\n   *    {\n   *      comments_from_learner: CMICommentsFromLearner,\n   *      comments_from_lms: CMICommentsFromLMS,\n   *      completion_status: string,\n   *      completion_threshold: string,\n   *      credit: string,\n   *      entry: string,\n   *      exit: string,\n   *      interactions: CMIInteractions,\n   *      launch_data: string,\n   *      learner_id: string,\n   *      learner_name: string,\n   *      learner_preference: CMILearnerPreference,\n   *      location: string,\n   *      max_time_allowed: string,\n   *      mode: string,\n   *      objectives: CMIObjectives,\n   *      progress_measure: string,\n   *      scaled_passing_score: string,\n   *      score: Scorm2004CMIScore,\n   *      session_time: string,\n   *      success_status: string,\n   *      suspend_data: string,\n   *      time_limit_action: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    comments_from_learner: CMICommentsFromLearner;\n    comments_from_lms: CMICommentsFromLMS;\n    completion_status: string;\n    completion_threshold: string;\n    credit: string;\n    entry: string;\n    exit: string;\n    interactions: CMIInteractions;\n    launch_data: string;\n    learner_id: string;\n    learner_name: string;\n    learner_preference: CMILearnerPreference;\n    location: string;\n    max_time_allowed: string;\n    mode: string;\n    objectives: CMIObjectives;\n    progress_measure: string;\n    scaled_passing_score: string;\n    score: Scorm2004CMIScore;\n    session_time: string;\n    success_status: string;\n    suspend_data: string;\n    time_limit_action: string;\n  } {\n    this.jsonString = true;\n\n    // Set jsonString flag on component classes that need it\n    this.session.jsonString = true;\n\n    const result = {\n      comments_from_learner: this.comments_from_learner,\n      comments_from_lms: this.comments_from_lms,\n      completion_status: this.completion_status,\n      completion_threshold: this.completion_threshold,\n      credit: this.credit,\n      entry: this.entry,\n      exit: this.exit,\n      interactions: this.interactions,\n      launch_data: this.launch_data,\n      learner_id: this.learner_id,\n      learner_name: this.learner_name,\n      learner_preference: this.learner_preference,\n      location: this.location,\n      max_time_allowed: this.max_time_allowed,\n      mode: this.mode,\n      objectives: this.objectives,\n      progress_measure: this.progress_measure,\n      scaled_passing_score: this.scaled_passing_score,\n      score: this.score,\n      session_time: this.session_time,\n      success_status: this.success_status,\n      suspend_data: this.suspend_data,\n      time_limit_action: this.time_limit_action,\n    };\n\n    // Clean up jsonString flags\n    this.jsonString = false;\n    this.session.jsonString = false;\n\n    return result;\n  }\n}\n","import { BaseCMI } from \"../common/base_cmi\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { check2004ValidFormat } from \"./validation\";\nimport { scorm2004_regex } from \"../../constants/regex\";\nimport { NAVBoolean } from \"../../constants/enums\";\nimport { CMIArray } from \"../common/array\";\nimport { scorm2004_constants } from \"../../constants/api_constants\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Sequencing } from \"./sequencing/sequencing\";\n\n/**\n * Class representing SCORM 2004's adl object\n */\nexport class ADL extends BaseCMI {\n  /**\n   * Constructor for adl\n   */\n  constructor() {\n    super(\"adl\");\n    this.nav = new ADLNav();\n    this.data = new ADLData();\n  }\n\n  public nav: ADLNav;\n  public data = new ADLData();\n  private _sequencing: Sequencing | null = null;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.nav?.initialize();\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this.nav?.reset();\n  }\n\n  /**\n   * Getter for sequencing\n   * @return {Sequencing | null}\n   */\n  get sequencing(): Sequencing | null {\n    return this._sequencing;\n  }\n\n  /**\n   * Setter for sequencing\n   * @param {Sequencing | null} sequencing\n   */\n  set sequencing(sequencing: Sequencing | null) {\n    this._sequencing = sequencing;\n    if (sequencing) {\n      sequencing.adlNav = this.nav;\n      this.nav.sequencing = sequencing;\n    }\n  }\n\n  /**\n   * toJSON for adl\n   * @return {\n   *    {\n   *      nav: ADLNav,\n   *      data: ADLData\n   *    }\n   *  }\n   */\n  toJSON(): {\n    nav: ADLNav;\n    data: ADLData;\n  } {\n    this.jsonString = true;\n    const result = {\n      nav: this.nav,\n      data: this.data,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's `adl.nav` object\n */\n\nexport class ADLNav extends BaseCMI {\n  private _request = \"_none_\";\n  private _sequencing: Sequencing | null = null;\n\n  /**\n   * Constructor for `adl.nav`\n   */\n  constructor() {\n    super(\"adl.nav\");\n    this.request_valid = new ADLNavRequestValid();\n  }\n\n  public request_valid: ADLNavRequestValid;\n\n  /**\n   * Getter for sequencing\n   * @return {Sequencing | null}\n   */\n  get sequencing(): Sequencing | null {\n    return this._sequencing;\n  }\n\n  /**\n   * Setter for sequencing\n   * @param {Sequencing | null} sequencing\n   */\n  set sequencing(sequencing: Sequencing | null) {\n    this._sequencing = sequencing;\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.request_valid?.initialize();\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._request = \"_none_\";\n    if (this._sequencing) {\n      this._sequencing.adlNav = null;\n    }\n    this._sequencing = null;\n    this.request_valid?.reset();\n  }\n\n  /**\n   * Getter for _request\n   * @return {string}\n   */\n  get request(): string {\n    return this._request;\n  }\n\n  /**\n   * Setter for _request\n   * @param {string} request\n   */\n  set request(request: string) {\n    if (check2004ValidFormat(this._cmi_element + \".request\", request, scorm2004_regex.NAVEvent)) {\n      // Only process if the request is different from the current request\n      if (this._request !== request) {\n        this._request = request;\n\n        // Process the navigation request using the sequencing implementation\n        if (this._sequencing) {\n          this._sequencing.processNavigationRequest(request);\n        }\n      }\n    }\n  }\n\n  /**\n   * toJSON for adl.nav\n   *\n   * @return {\n   *    {\n   *      request: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    request: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      request: this.request,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's `adl.data` object\n */\nexport class ADLData extends CMIArray {\n  constructor() {\n    super({\n      CMIElement: \"adl.data\",\n      children: scorm2004_constants.adl_data_children,\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT as number,\n      errorClass: Scorm2004ValidationError,\n    });\n  }\n}\n\n/**\n * Class for SCORM 2004's adl.data.n object\n */\nexport class ADLDataObject extends BaseCMI {\n  private _id = \"\";\n  private _store = \"\";\n\n  constructor() {\n    super(\"adl.data.n\");\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset() {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for _id\n   * @return {string}\n   */\n  get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Setter for _id\n   * @param {string} id\n   */\n  set id(id: string) {\n    if (check2004ValidFormat(this._cmi_element + \".id\", id, scorm2004_regex.CMILongIdentifier)) {\n      this._id = id;\n    }\n  }\n\n  /**\n   * Getter for _store\n   * @return {string}\n   */\n  get store(): string {\n    return this._store;\n  }\n\n  /**\n   * Setter for _store\n   * @param {string} store\n   */\n  set store(store: string) {\n    if (\n      check2004ValidFormat(this._cmi_element + \".store\", store, scorm2004_regex.CMILangString4000)\n    ) {\n      this._store = store;\n    }\n  }\n\n  /**\n   * toJSON for adl.data.n\n   *\n   * @return {\n   *    {\n   *      id: string,\n   *      store: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    id: string;\n    store: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      id: this._id,\n      store: this._store,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's adl.nav.request_valid object\n */\n\nexport class ADLNavRequestValid extends BaseCMI {\n  private _continue = \"unknown\";\n  private _previous = \"unknown\";\n  private _choice: {\n    [key: string]: NAVBoolean;\n  } = {};\n  private _jump: {\n    [key: string]: NAVBoolean;\n  } = {};\n\n  /**\n   * Constructor for adl.nav.request_valid\n   */\n  constructor() {\n    super(\"adl.nav.request_valid\");\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  override reset() {\n    this._initialized = false;\n    this._continue = \"unknown\";\n    this._previous = \"unknown\";\n    this._choice = {};\n    this._jump = {};\n  }\n\n  /**\n   * Getter for _continue\n   * @return {string}\n   */\n  get continue(): string {\n    return this._continue;\n  }\n\n  /**\n   * Setter for _continue. Just throws an error.\n   * @param {string} _continue\n   */\n  set continue(_continue: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".continue\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    }\n    if (\n      check2004ValidFormat(this._cmi_element + \".continue\", _continue, scorm2004_regex.NAVBoolean)\n    ) {\n      this._continue = _continue;\n    }\n  }\n\n  /**\n   * Getter for _previous\n   * @return {string}\n   */\n  get previous(): string {\n    return this._previous;\n  }\n\n  /**\n   * Setter for _previous. Just throws an error.\n   * @param {string} _previous\n   */\n  set previous(_previous: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".previous\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    }\n    if (\n      check2004ValidFormat(this._cmi_element + \".previous\", _previous, scorm2004_regex.NAVBoolean)\n    ) {\n      this._previous = _previous;\n    }\n  }\n\n  /**\n   * Getter for _choice\n   * @return {{ [key: string]: NAVBoolean }}\n   */\n  get choice(): { [key: string]: NAVBoolean } {\n    return this._choice;\n  }\n\n  /**\n   * Setter for _choice\n   * @param {{ [key: string]: string }} choice\n   */\n  set choice(choice: { [key: string]: string }) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".choice\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    }\n    if (typeof choice !== \"object\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".choice\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n    for (const key in choice) {\n      if ({}.hasOwnProperty.call(choice, key)) {\n        if (\n          check2004ValidFormat(\n            this._cmi_element + \".choice.\" + key,\n            choice[key] || \"\",\n            scorm2004_regex.NAVBoolean,\n          ) &&\n          check2004ValidFormat(this._cmi_element + \".choice.\" + key, key, scorm2004_regex.NAVTarget)\n        ) {\n          // Convert string value to NAVBoolean enum value\n          const value = choice[key];\n          if (value === \"true\") {\n            this._choice[key] = NAVBoolean.TRUE;\n          } else if (value === \"false\") {\n            this._choice[key] = NAVBoolean.FALSE;\n          } else if (value === \"unknown\") {\n            this._choice[key] = NAVBoolean.UNKNOWN;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Getter for _jump\n   * @return {{ [key: string]: NAVBoolean }}\n   */\n  get jump(): { [key: string]: NAVBoolean } {\n    return this._jump;\n  }\n\n  /**\n   * Setter for _jump\n   * @param {{ [key: string]: string }} jump\n   */\n  set jump(jump: { [key: string]: string }) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".jump\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    }\n    if (typeof jump !== \"object\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".jump\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n    for (const key in jump) {\n      if ({}.hasOwnProperty.call(jump, key)) {\n        if (\n          check2004ValidFormat(\n            this._cmi_element + \".jump.\" + key,\n            jump[key] || \"\",\n            scorm2004_regex.NAVBoolean,\n          ) &&\n          check2004ValidFormat(this._cmi_element + \".jump.\" + key, key, scorm2004_regex.NAVTarget)\n        ) {\n          // Convert string value to NAVBoolean enum value\n          const value = jump[key];\n          if (value === \"true\") {\n            this._jump[key] = NAVBoolean.TRUE;\n          } else if (value === \"false\") {\n            this._jump[key] = NAVBoolean.FALSE;\n          } else if (value === \"unknown\") {\n            this._jump[key] = NAVBoolean.UNKNOWN;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * toJSON for adl.nav.request_valid\n   *\n   * @return {\n   *    {\n   *      previous: string,\n   *      continue: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    previous: string;\n    continue: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      previous: this._previous,\n      continue: this._continue,\n      choice: this._choice,\n      jump: this._jump,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../../common/base_cmi\";\nimport { Activity } from \"./activity\";\nimport { Scorm2004ValidationError } from \"../../../exceptions/scorm2004_exceptions\";\nimport { scorm2004_errors } from \"../../../constants/error_codes\";\nimport { SuccessStatus } from \"../../../constants/enums\";\n\n/**\n * Enum for rule condition operators\n */\nexport enum RuleConditionOperator {\n  NOT = \"not\",\n  AND = \"and\",\n  OR = \"or\",\n}\n\n/**\n * Enum for rule condition types\n */\nexport enum RuleConditionType {\n  SATISFIED = \"satisfied\",\n  OBJECTIVE_STATUS_KNOWN = \"objectiveStatusKnown\",\n  OBJECTIVE_MEASURE_KNOWN = \"objectiveMeasureKnown\",\n  OBJECTIVE_MEASURE_GREATER_THAN = \"objectiveMeasureGreaterThan\",\n  OBJECTIVE_MEASURE_LESS_THAN = \"objectiveMeasureLessThan\",\n  COMPLETED = \"completed\",\n  PROGRESS_KNOWN = \"progressKnown\",\n  ATTEMPTED = \"attempted\",\n  ATTEMPT_LIMIT_EXCEEDED = \"attemptLimitExceeded\",\n  TIME_LIMIT_EXCEEDED = \"timeLimitExceeded\",\n  OUTSIDE_AVAILABLE_TIME_RANGE = \"outsideAvailableTimeRange\",\n  ALWAYS = \"always\",\n}\n\n/**\n * Enum for rule action types\n */\nexport enum RuleActionType {\n  SKIP = \"skip\",\n  DISABLED = \"disabled\",\n  HIDE_FROM_CHOICE = \"hideFromChoice\",\n  STOP_FORWARD_TRAVERSAL = \"stopForwardTraversal\",\n  EXIT_PARENT = \"exitParent\",\n  EXIT_ALL = \"exitAll\",\n  RETRY = \"retry\",\n  RETRY_ALL = \"retryAll\",\n  CONTINUE = \"continue\",\n  PREVIOUS = \"previous\",\n  EXIT = \"exit\",\n}\n\n/**\n * Class representing a sequencing rule condition\n */\nexport class RuleCondition extends BaseCMI {\n  private _condition: RuleConditionType = RuleConditionType.ALWAYS;\n  private _operator: RuleConditionOperator | null = null;\n  private _parameters: Map<string, any> = new Map();\n\n  /**\n   * Constructor for RuleCondition\n   * @param {RuleConditionType} condition - The condition type\n   * @param {RuleConditionOperator | null} operator - The operator (null for no operator)\n   * @param {Map<string, any>} parameters - Additional parameters for the condition\n   */\n  constructor(\n    condition: RuleConditionType = RuleConditionType.ALWAYS,\n    operator: RuleConditionOperator | null = null,\n    parameters: Map<string, any> = new Map(),\n  ) {\n    super(\"ruleCondition\");\n    this._condition = condition;\n    this._operator = operator;\n    this._parameters = parameters;\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._condition = RuleConditionType.ALWAYS;\n    this._operator = null;\n    this._parameters = new Map();\n  }\n\n  /**\n   * Getter for condition\n   * @return {RuleConditionType}\n   */\n  get condition(): RuleConditionType {\n    return this._condition;\n  }\n\n  /**\n   * Setter for condition\n   * @param {RuleConditionType} condition\n   */\n  set condition(condition: RuleConditionType) {\n    this._condition = condition;\n  }\n\n  /**\n   * Getter for operator\n   * @return {RuleConditionOperator | null}\n   */\n  get operator(): RuleConditionOperator | null {\n    return this._operator;\n  }\n\n  /**\n   * Setter for operator\n   * @param {RuleConditionOperator | null} operator\n   */\n  set operator(operator: RuleConditionOperator | null) {\n    this._operator = operator;\n  }\n\n  /**\n   * Getter for parameters\n   * @return {Map<string, any>}\n   */\n  get parameters(): Map<string, any> {\n    return this._parameters;\n  }\n\n  /**\n   * Setter for parameters\n   * @param {Map<string, any>} parameters\n   */\n  set parameters(parameters: Map<string, any>) {\n    this._parameters = parameters;\n  }\n\n  /**\n   * Evaluate the condition for an activity\n   * @param {Activity} activity - The activity to evaluate the condition for\n   * @return {boolean} - True if the condition is met, false otherwise\n   */\n  evaluate(activity: Activity): boolean {\n    let result;\n    switch (this._condition) {\n      case RuleConditionType.SATISFIED:\n        result = activity.successStatus === SuccessStatus.PASSED;\n        break;\n      case RuleConditionType.OBJECTIVE_STATUS_KNOWN:\n        // noinspection PointlessBooleanExpressionJS\n        result = !!activity.objectiveMeasureStatus;\n        break;\n      case RuleConditionType.OBJECTIVE_MEASURE_KNOWN:\n        // noinspection PointlessBooleanExpressionJS\n        result = !!activity.objectiveMeasureStatus;\n        break;\n      case RuleConditionType.OBJECTIVE_MEASURE_GREATER_THAN: {\n        const greaterThanValue = this._parameters.get(\"threshold\") || 0;\n        result =\n          activity.objectiveMeasureStatus && activity.objectiveNormalizedMeasure > greaterThanValue;\n        break;\n      }\n      case RuleConditionType.OBJECTIVE_MEASURE_LESS_THAN: {\n        const lessThanValue = this._parameters.get(\"threshold\") || 0;\n        result =\n          activity.objectiveMeasureStatus && activity.objectiveNormalizedMeasure < lessThanValue;\n        break;\n      }\n      case RuleConditionType.COMPLETED:\n        result = activity.isCompleted;\n        break;\n      case RuleConditionType.PROGRESS_KNOWN:\n        result = activity.completionStatus !== \"unknown\";\n        break;\n      case RuleConditionType.ATTEMPTED:\n        result = activity.attemptCount > 0;\n        break;\n      case RuleConditionType.ATTEMPT_LIMIT_EXCEEDED: {\n        const attemptLimit = this._parameters.get(\"attemptLimit\") || 0;\n        result = activity.attemptCount >= attemptLimit;\n        break;\n      }\n      case RuleConditionType.TIME_LIMIT_EXCEEDED:\n        result = this.evaluateTimeLimitExceeded(activity);\n        break;\n      case RuleConditionType.OUTSIDE_AVAILABLE_TIME_RANGE:\n        result = this.evaluateOutsideAvailableTimeRange(activity);\n        break;\n      case RuleConditionType.ALWAYS:\n        result = true;\n        break;\n      default:\n        result = false;\n        break;\n    }\n\n    if (this._operator === RuleConditionOperator.NOT) {\n      result = !result;\n    }\n\n    return result;\n  }\n\n  /**\n   * Evaluate if time limit has been exceeded\n   * @param {Activity} activity - The activity to evaluate\n   * @return {boolean}\n   * @private\n   */\n  private evaluateTimeLimitExceeded(activity: Activity): boolean {\n    const timeLimitDuration = activity.timeLimitDuration;\n    if (!timeLimitDuration) {\n      return false;\n    }\n\n    // Parse ISO 8601 duration to milliseconds\n    const durationMs = this.parseISO8601Duration(timeLimitDuration);\n    if (durationMs === 0) {\n      return false;\n    }\n\n    // Get current attempt duration\n    const attemptDuration = activity.attemptExperiencedDuration;\n    const attemptDurationMs = this.parseISO8601Duration(attemptDuration);\n\n    return attemptDurationMs > durationMs;\n  }\n\n  /**\n   * Evaluate if activity is outside available time range\n   * @param {Activity} activity - The activity to evaluate\n   * @return {boolean}\n   * @private\n   */\n  private evaluateOutsideAvailableTimeRange(activity: Activity): boolean {\n    const beginTime = activity.beginTimeLimit;\n    const endTime = activity.endTimeLimit;\n\n    if (!beginTime && !endTime) {\n      return false;\n    }\n\n    const now = new Date();\n\n    if (beginTime) {\n      const beginDate = new Date(beginTime);\n      if (now < beginDate) {\n        return true;\n      }\n    }\n\n    if (endTime) {\n      const endDate = new Date(endTime);\n      if (now > endDate) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Parse ISO 8601 duration to milliseconds\n   * @param {string} duration - ISO 8601 duration string\n   * @return {number} - Duration in milliseconds\n   * @private\n   */\n  private parseISO8601Duration(duration: string): number {\n    const regex = /PT(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?/;\n    const matches = duration.match(regex);\n\n    if (!matches) {\n      return 0;\n    }\n\n    const hours = parseInt(matches[1] || \"0\", 10);\n    const minutes = parseInt(matches[2] || \"0\", 10);\n    const seconds = parseFloat(matches[3] || \"0\");\n\n    return (hours * 3600 + minutes * 60 + seconds) * 1000;\n  }\n\n  /**\n   * toJSON for RuleCondition\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      condition: this._condition,\n      operator: this._operator,\n      parameters: Object.fromEntries(this._parameters),\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing a sequencing rule\n */\nexport class SequencingRule extends BaseCMI {\n  private _conditions: RuleCondition[] = [];\n  private _action: RuleActionType = RuleActionType.SKIP;\n  private _conditionCombination: string | RuleConditionOperator = RuleConditionOperator.AND;\n\n  /**\n   * Constructor for SequencingRule\n   * @param {RuleActionType} action - The action to take when the rule conditions are met\n   * @param {string | RuleConditionOperator} conditionCombination - How to combine multiple conditions (\"all\"/\"and\" or \"any\"/\"or\")\n   */\n  constructor(\n    action: RuleActionType = RuleActionType.SKIP,\n    conditionCombination: string | RuleConditionOperator = RuleConditionOperator.AND,\n  ) {\n    super(\"sequencingRule\");\n    this._action = action;\n    this._conditionCombination = conditionCombination;\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._conditions = [];\n    this._action = RuleActionType.SKIP;\n    this._conditionCombination = RuleConditionOperator.AND;\n  }\n\n  /**\n   * Getter for conditions\n   * @return {RuleCondition[]}\n   */\n  get conditions(): RuleCondition[] {\n    return this._conditions;\n  }\n\n  /**\n   * Add a condition to the rule\n   * @param {RuleCondition} condition - The condition to add\n   */\n  addCondition(condition: RuleCondition): void {\n    // noinspection SuspiciousTypeOfGuard\n    if (!(condition instanceof RuleCondition)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".conditions\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n    // Check if the condition is already in the array\n    if (!this._conditions.includes(condition)) {\n      this._conditions.push(condition);\n    }\n  }\n\n  /**\n   * Remove a condition from the rule\n   * @param {RuleCondition} condition - The condition to remove\n   * @return {boolean} - True if the condition was removed, false otherwise\n   */\n  removeCondition(condition: RuleCondition): boolean {\n    // noinspection SuspiciousTypeOfGuard\n    if (!(condition instanceof RuleCondition)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".conditions\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n    const index = this._conditions.indexOf(condition);\n    if (index !== -1) {\n      this._conditions.splice(index, 1);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Getter for action\n   * @return {RuleActionType}\n   */\n  get action(): RuleActionType {\n    return this._action;\n  }\n\n  /**\n   * Setter for action\n   * @param {RuleActionType} action\n   */\n  set action(action: RuleActionType) {\n    this._action = action;\n  }\n\n  /**\n   * Getter for conditionCombination\n   * @return {string | RuleConditionOperator}\n   */\n  get conditionCombination(): string | RuleConditionOperator {\n    return this._conditionCombination;\n  }\n\n  /**\n   * Setter for conditionCombination\n   * @param {string | RuleConditionOperator} conditionCombination\n   */\n  set conditionCombination(conditionCombination: string | RuleConditionOperator) {\n    this._conditionCombination = conditionCombination;\n  }\n\n  /**\n   * Evaluate the rule for an activity\n   * @param {Activity} activity - The activity to evaluate the rule for\n   * @return {boolean} - True if the rule conditions are met, false otherwise\n   */\n  evaluate(activity: Activity): boolean {\n    if (this._conditions.length === 0) {\n      return true;\n    }\n\n    if (\n      this._conditionCombination === \"all\" ||\n      this._conditionCombination === RuleConditionOperator.AND\n    ) {\n      return this._conditions.every((condition) => condition.evaluate(activity));\n    } else if (\n      this._conditionCombination === \"any\" ||\n      this._conditionCombination === RuleConditionOperator.OR\n    ) {\n      return this._conditions.some((condition) => condition.evaluate(activity));\n    }\n\n    return false;\n  }\n\n  /**\n   * toJSON for SequencingRule\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      conditions: this._conditions,\n      action: this._action,\n      conditionCombination: this._conditionCombination,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing a collection of sequencing rules\n */\nexport class SequencingRules extends BaseCMI {\n  private _preConditionRules: SequencingRule[] = [];\n  private _exitConditionRules: SequencingRule[] = [];\n  private _postConditionRules: SequencingRule[] = [];\n\n  /**\n   * Constructor for SequencingRules\n   */\n  constructor() {\n    super(\"sequencingRules\");\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._preConditionRules = [];\n    this._exitConditionRules = [];\n    this._postConditionRules = [];\n  }\n\n  /**\n   * Getter for preConditionRules\n   * @return {SequencingRule[]}\n   */\n  get preConditionRules(): SequencingRule[] {\n    return this._preConditionRules;\n  }\n\n  /**\n   * Add a pre-condition rule\n   * @param {SequencingRule} rule - The rule to add\n   */\n  addPreConditionRule(rule: SequencingRule): void {\n    // noinspection SuspiciousTypeOfGuard\n    if (!(rule instanceof SequencingRule)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".preConditionRules\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n    this._preConditionRules.push(rule);\n  }\n\n  /**\n   * Getter for exitConditionRules\n   * @return {SequencingRule[]}\n   */\n  get exitConditionRules(): SequencingRule[] {\n    return this._exitConditionRules;\n  }\n\n  /**\n   * Add an exit condition rule\n   * @param {SequencingRule} rule - The rule to add\n   */\n  addExitConditionRule(rule: SequencingRule): void {\n    // noinspection SuspiciousTypeOfGuard\n    if (!(rule instanceof SequencingRule)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".exitConditionRules\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n    this._exitConditionRules.push(rule);\n  }\n\n  /**\n   * Getter for postConditionRules\n   * @return {SequencingRule[]}\n   */\n  get postConditionRules(): SequencingRule[] {\n    return this._postConditionRules;\n  }\n\n  /**\n   * Add a post-condition rule\n   * @param {SequencingRule} rule - The rule to add\n   */\n  addPostConditionRule(rule: SequencingRule): void {\n    // noinspection SuspiciousTypeOfGuard\n    if (!(rule instanceof SequencingRule)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".postConditionRules\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n    this._postConditionRules.push(rule);\n  }\n\n  /**\n   * Evaluate pre-condition rules for an activity\n   * @param {Activity} activity - The activity to evaluate the rules for\n   * @return {RuleActionType | null} - The action to take, or null if no rules are met\n   */\n  evaluatePreConditionRules(activity: Activity): RuleActionType | null {\n    for (const rule of this._preConditionRules) {\n      if (rule.evaluate(activity)) {\n        return rule.action;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Evaluate exit condition rules for an activity\n   * @param {Activity} activity - The activity to evaluate the rules for\n   * @return {RuleActionType | null} - The action to take, or null if no rules are met\n   */\n  evaluateExitConditionRules(activity: Activity): RuleActionType | null {\n    for (const rule of this._exitConditionRules) {\n      if (rule.evaluate(activity)) {\n        return rule.action;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Evaluate post-condition rules for an activity\n   * @param {Activity} activity - The activity to evaluate the rules for\n   * @return {RuleActionType | null} - The action to take, or null if no rules are met\n   */\n  evaluatePostConditionRules(activity: Activity): RuleActionType | null {\n    for (const rule of this._postConditionRules) {\n      if (rule.evaluate(activity)) {\n        return rule.action;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * toJSON for SequencingRules\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      preConditionRules: this._preConditionRules,\n      exitConditionRules: this._exitConditionRules,\n      postConditionRules: this._postConditionRules,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../../common/base_cmi\";\nimport { Activity } from \"./activity\";\nimport { Scorm2004ValidationError } from \"../../../exceptions/scorm2004_exceptions\";\nimport { scorm2004_errors } from \"../../../constants/error_codes\";\nimport { CompletionStatus, SuccessStatus } from \"../../../constants/enums\";\n\n/**\n * Enum for rollup action types\n */\nexport enum RollupActionType {\n  SATISFIED = \"satisfied\",\n  NOT_SATISFIED = \"notSatisfied\",\n  COMPLETED = \"completed\",\n  INCOMPLETE = \"incomplete\",\n}\n\n/**\n * Enum for rollup condition types\n */\nexport enum RollupConditionType {\n  SATISFIED = \"satisfied\",\n  OBJECTIVE_STATUS_KNOWN = \"objectiveStatusKnown\",\n  OBJECTIVE_MEASURE_KNOWN = \"objectiveMeasureKnown\",\n  OBJECTIVE_MEASURE_GREATER_THAN = \"objectiveMeasureGreaterThan\",\n  OBJECTIVE_MEASURE_LESS_THAN = \"objectiveMeasureLessThan\",\n  COMPLETED = \"completed\",\n  PROGRESS_KNOWN = \"progressKnown\",\n  ATTEMPTED = \"attempted\",\n  NOT_ATTEMPTED = \"notAttempted\",\n  ALWAYS = \"always\",\n}\n\n/**\n * Enum for rollup consideration types\n */\nexport enum RollupConsiderationType {\n  ALL = \"all\",\n  ANY = \"any\",\n  NONE = \"none\",\n  AT_LEAST_COUNT = \"atLeastCount\",\n  AT_LEAST_PERCENT = \"atLeastPercent\",\n}\n\n/**\n * Class representing a rollup condition\n */\nexport class RollupCondition extends BaseCMI {\n  private _condition: RollupConditionType = RollupConditionType.ALWAYS;\n  private _parameters: Map<string, any> = new Map();\n\n  /**\n   * Constructor for RollupCondition\n   * @param {RollupConditionType} condition - The condition type\n   * @param {Map<string, any>} parameters - Additional parameters for the condition\n   */\n  constructor(\n    condition: RollupConditionType = RollupConditionType.ALWAYS,\n    parameters: Map<string, any> = new Map(),\n  ) {\n    super(\"rollupCondition\");\n    this._condition = condition;\n    this._parameters = parameters;\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for condition\n   * @return {RollupConditionType}\n   */\n  get condition(): RollupConditionType {\n    return this._condition;\n  }\n\n  /**\n   * Setter for condition\n   * @param {RollupConditionType} condition\n   */\n  set condition(condition: RollupConditionType) {\n    this._condition = condition;\n  }\n\n  /**\n   * Getter for parameters\n   * @return {Map<string, any>}\n   */\n  get parameters(): Map<string, any> {\n    return this._parameters;\n  }\n\n  /**\n   * Setter for parameters\n   * @param {Map<string, any>} parameters\n   */\n  set parameters(parameters: Map<string, any>) {\n    this._parameters = parameters;\n  }\n\n  /**\n   * Evaluate the condition for an activity\n   * @param {Activity} activity - The activity to evaluate the condition for\n   * @return {boolean} - True if the condition is met, false otherwise\n   */\n  evaluate(activity: Activity): boolean {\n    switch (this._condition) {\n      case RollupConditionType.SATISFIED:\n        return activity.successStatus === SuccessStatus.PASSED;\n      case RollupConditionType.OBJECTIVE_STATUS_KNOWN:\n        return activity.objectiveMeasureStatus;\n      case RollupConditionType.OBJECTIVE_MEASURE_KNOWN:\n        return activity.objectiveMeasureStatus;\n      case RollupConditionType.OBJECTIVE_MEASURE_GREATER_THAN: {\n        const greaterThanValue = this._parameters.get(\"threshold\") || 0;\n        return (\n          activity.objectiveMeasureStatus && activity.objectiveNormalizedMeasure > greaterThanValue\n        );\n      }\n      case RollupConditionType.OBJECTIVE_MEASURE_LESS_THAN: {\n        const lessThanValue = this._parameters.get(\"threshold\") || 0;\n        return (\n          activity.objectiveMeasureStatus && activity.objectiveNormalizedMeasure < lessThanValue\n        );\n      }\n      case RollupConditionType.COMPLETED:\n        return activity.isCompleted;\n      case RollupConditionType.PROGRESS_KNOWN:\n        return activity.completionStatus !== CompletionStatus.UNKNOWN;\n      case RollupConditionType.ATTEMPTED:\n        return activity.attemptCount > 0;\n      case RollupConditionType.NOT_ATTEMPTED:\n        return activity.attemptCount === 0;\n      case RollupConditionType.ALWAYS:\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  /**\n   * toJSON for RollupCondition\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      condition: this._condition,\n      parameters: Object.fromEntries(this._parameters),\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing a rollup rule\n */\nexport class RollupRule extends BaseCMI {\n  private _conditions: RollupCondition[] = [];\n  private _action: RollupActionType = RollupActionType.SATISFIED;\n  private _consideration: RollupConsiderationType = RollupConsiderationType.ALL;\n  private _minimumCount: number = 0;\n  private _minimumPercent: number = 0;\n\n  /**\n   * Constructor for RollupRule\n   * @param {RollupActionType} action - The action to take when the rule conditions are met\n   * @param {RollupConsiderationType} consideration - How to consider child activities\n   * @param {number} minimumCount - The minimum count for AT_LEAST_COUNT consideration\n   * @param {number} minimumPercent - The minimum percent for AT_LEAST_PERCENT consideration\n   */\n  constructor(\n    action: RollupActionType = RollupActionType.SATISFIED,\n    consideration: RollupConsiderationType = RollupConsiderationType.ALL,\n    minimumCount: number = 0,\n    minimumPercent: number = 0,\n  ) {\n    super(\"rollupRule\");\n    this._action = action;\n    this._consideration = consideration;\n    this._minimumCount = minimumCount;\n    this._minimumPercent = minimumPercent;\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._conditions = [];\n  }\n\n  /**\n   * Getter for conditions\n   * @return {RollupCondition[]}\n   */\n  get conditions(): RollupCondition[] {\n    return this._conditions;\n  }\n\n  /**\n   * Add a condition to the rule\n   * @param {RollupCondition} condition - The condition to add\n   */\n  addCondition(condition: RollupCondition): void {\n    // noinspection SuspiciousTypeOfGuard\n    if (!(condition instanceof RollupCondition)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".conditions\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n    this._conditions.push(condition);\n  }\n\n  /**\n   * Remove a condition from the rule\n   * @param {RollupCondition} condition - The condition to remove\n   * @return {boolean} - True if the condition was removed, false otherwise\n   */\n  removeCondition(condition: RollupCondition): boolean {\n    const index = this._conditions.indexOf(condition);\n    if (index !== -1) {\n      this._conditions.splice(index, 1);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Getter for action\n   * @return {RollupActionType}\n   */\n  get action(): RollupActionType {\n    return this._action;\n  }\n\n  /**\n   * Setter for action\n   * @param {RollupActionType} action\n   */\n  set action(action: RollupActionType) {\n    this._action = action;\n  }\n\n  /**\n   * Getter for consideration\n   * @return {RollupConsiderationType}\n   */\n  get consideration(): RollupConsiderationType {\n    return this._consideration;\n  }\n\n  /**\n   * Setter for consideration\n   * @param {RollupConsiderationType} consideration\n   */\n  set consideration(consideration: RollupConsiderationType) {\n    this._consideration = consideration;\n  }\n\n  /**\n   * Getter for minimumCount\n   * @return {number}\n   */\n  get minimumCount(): number {\n    return this._minimumCount;\n  }\n\n  /**\n   * Setter for minimumCount\n   * @param {number} minimumCount\n   */\n  set minimumCount(minimumCount: number) {\n    if (minimumCount >= 0) {\n      this._minimumCount = minimumCount;\n    }\n  }\n\n  /**\n   * Getter for minimumPercent\n   * @return {number}\n   */\n  get minimumPercent(): number {\n    return this._minimumPercent;\n  }\n\n  /**\n   * Setter for minimumPercent\n   * @param {number} minimumPercent\n   */\n  set minimumPercent(minimumPercent: number) {\n    if (minimumPercent >= 0 && minimumPercent <= 100) {\n      this._minimumPercent = minimumPercent;\n    }\n  }\n\n  /**\n   * Evaluate the rule for a set of child activities\n   * @param {Activity[]} children - The child activities to evaluate the rule for\n   * @return {boolean} - True if the rule conditions are met, false otherwise\n   */\n  evaluate(children: Activity[]): boolean {\n    if (children.length === 0) {\n      return false;\n    }\n\n    // Filter children that meet all conditions\n    const matchingChildren = children.filter((child) => {\n      return this._conditions.every((condition) => condition.evaluate(child));\n    });\n\n    // Apply consideration\n    switch (this._consideration) {\n      case RollupConsiderationType.ALL:\n        return matchingChildren.length === children.length;\n      case RollupConsiderationType.ANY:\n        return matchingChildren.length > 0;\n      case RollupConsiderationType.NONE:\n        return matchingChildren.length === 0;\n      case RollupConsiderationType.AT_LEAST_COUNT:\n        return matchingChildren.length >= this._minimumCount;\n      case RollupConsiderationType.AT_LEAST_PERCENT: {\n        const percent = (matchingChildren.length / children.length) * 100;\n        return percent >= this._minimumPercent;\n      }\n      default:\n        return false;\n    }\n  }\n\n  /**\n   * toJSON for RollupRule\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      conditions: this._conditions,\n      action: this._action,\n      consideration: this._consideration,\n      minimumCount: this._minimumCount,\n      minimumPercent: this._minimumPercent,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing a collection of rollup rules\n */\nexport class RollupRules extends BaseCMI {\n  private _rules: RollupRule[] = [];\n\n  /**\n   * Constructor for RollupRules\n   */\n  constructor() {\n    super(\"rollupRules\");\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._rules = [];\n  }\n\n  /**\n   * Getter for rules\n   * @return {RollupRule[]}\n   */\n  get rules(): RollupRule[] {\n    return this._rules;\n  }\n\n  /**\n   * Add a rule\n   * @param {RollupRule} rule - The rule to add\n   */\n  addRule(rule: RollupRule): void {\n    // noinspection SuspiciousTypeOfGuard\n    if (!(rule instanceof RollupRule)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".rules\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n    this._rules.push(rule);\n  }\n\n  /**\n   * Remove a rule\n   * @param {RollupRule} rule - The rule to remove\n   * @return {boolean} - True if the rule was removed, false otherwise\n   */\n  removeRule(rule: RollupRule): boolean {\n    const index = this._rules.indexOf(rule);\n    if (index !== -1) {\n      this._rules.splice(index, 1);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Process rollup for an activity\n   * @param {Activity} activity - The activity to process rollup for\n   */\n  processRollup(activity: Activity): void {\n    if (!activity || activity.children.length === 0) {\n      return;\n    }\n\n    const children = activity.getAvailableChildren();\n    let completionRollup = false;\n    let successRollup = false;\n\n    // First, check if we should use measure rollup (RB.1.2.a)\n    if (activity.sequencingControls.rollupObjectiveSatisfied) {\n      const measureRollupResult = this._objectiveRollupUsingMeasure(activity, children);\n      if (measureRollupResult !== null) {\n        successRollup = true;\n        // Skip rule-based rollup if measure rollup was successful\n      }\n    }\n\n    // Process each rule (RB.1.2.b)\n    if (!successRollup) {\n      for (const rule of this._rules) {\n        if (rule.evaluate(children)) {\n          switch (rule.action) {\n            case RollupActionType.SATISFIED:\n              activity.successStatus = SuccessStatus.PASSED;\n              successRollup = true;\n              break;\n            case RollupActionType.NOT_SATISFIED:\n              activity.successStatus = SuccessStatus.FAILED;\n              successRollup = true;\n              break;\n            case RollupActionType.COMPLETED:\n              activity.completionStatus = CompletionStatus.COMPLETED;\n              activity.isCompleted = true;\n              completionRollup = true;\n              break;\n            case RollupActionType.INCOMPLETE:\n              activity.completionStatus = CompletionStatus.INCOMPLETE;\n              activity.isCompleted = false;\n              completionRollup = true;\n              break;\n          }\n        }\n      }\n    }\n\n    // If no rules applied for completion, use default rollup\n    if (!completionRollup) {\n      this._defaultCompletionRollup(activity, children);\n    }\n\n    // If no rules applied for success, use default rollup (RB.1.2.c)\n    if (!successRollup) {\n      this._defaultSuccessRollup(activity, children);\n    }\n  }\n\n  /**\n   * Default completion rollup\n   * @param {Activity} activity - The activity to process rollup for\n   * @param {Activity[]} children - The child activities\n   * @private\n   */\n  private _defaultCompletionRollup(activity: Activity, children: Activity[]): void {\n    // If all children are completed, mark the parent as completed\n    const allCompleted = children.every((child) => child.isCompleted);\n    if (allCompleted) {\n      activity.completionStatus = CompletionStatus.COMPLETED;\n      activity.isCompleted = true;\n    } else {\n      // If any child is incomplete, mark the parent as incomplete\n      const anyIncomplete = children.some(\n        (child) => child.completionStatus === CompletionStatus.INCOMPLETE,\n      );\n      if (anyIncomplete) {\n        activity.completionStatus = CompletionStatus.INCOMPLETE;\n        activity.isCompleted = false;\n      }\n    }\n  }\n\n  /**\n   * Objective Rollup Using Measure Process (RB.1.2.a)\n   * @param {Activity} activity - The activity to process rollup for\n   * @param {Activity[]} children - The child activities\n   * @return {boolean | null} - True if satisfied, false if not satisfied, null if measure rollup not applicable\n   * @private\n   */\n  private _objectiveRollupUsingMeasure(activity: Activity, children: Activity[]): boolean | null {\n    // Check if objective measure weight is properly configured\n    const objectiveMeasureWeight = activity.sequencingControls.objectiveMeasureWeight;\n    if (objectiveMeasureWeight <= 0) {\n      return null; // Measure rollup not applicable\n    }\n\n    // Calculate weighted average of child objective measures\n    let totalWeight = 0;\n    let weightedSum = 0;\n    let hasValidMeasures = false;\n\n    for (const child of children) {\n      // Only include children that should contribute to rollup\n      if (!child.sequencingControls.rollupObjectiveSatisfied) {\n        continue;\n      }\n\n      // Check if child has a valid objective measure\n      if (child.objectiveMeasureStatus && child.objectiveMeasureStatus === true) {\n        const childWeight = child.sequencingControls.objectiveMeasureWeight;\n        if (childWeight > 0) {\n          weightedSum += child.objectiveNormalizedMeasure * childWeight;\n          totalWeight += childWeight;\n          hasValidMeasures = true;\n        }\n      }\n    }\n\n    // If no valid measures found, measure rollup is not applicable\n    if (!hasValidMeasures || totalWeight === 0) {\n      return null;\n    }\n\n    // Calculate the normalized measure for the parent activity\n    const normalizedMeasure = weightedSum / totalWeight;\n    activity.objectiveNormalizedMeasure = normalizedMeasure;\n    activity.objectiveMeasureStatus = true;\n\n    // Determine satisfaction based on scaled passing score\n    if (normalizedMeasure >= activity.scaledPassingScore) {\n      activity.successStatus = SuccessStatus.PASSED;\n      activity.objectiveSatisfiedStatus = true;\n      return true;\n    } else {\n      activity.successStatus = SuccessStatus.FAILED;\n      activity.objectiveSatisfiedStatus = false;\n      return false;\n    }\n  }\n\n  /**\n   * Default success rollup\n   * @param {Activity} activity - The activity to process rollup for\n   * @param {Activity[]} children - The child activities\n   * @private\n   */\n  private _defaultSuccessRollup(activity: Activity, children: Activity[]): void {\n    // If all children are satisfied, mark the parent as satisfied\n    const allSatisfied = children.every((child) => child.successStatus === SuccessStatus.PASSED);\n    if (allSatisfied) {\n      activity.successStatus = SuccessStatus.PASSED;\n    } else {\n      // If any child is not satisfied, mark the parent as not satisfied\n      const anyNotSatisfied = children.some(\n        (child) => child.successStatus === SuccessStatus.FAILED,\n      );\n      if (anyNotSatisfied) {\n        activity.successStatus = SuccessStatus.FAILED;\n      }\n    }\n  }\n\n  /**\n   * toJSON for RollupRules\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      rules: this._rules,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","const ValidLanguages: string[] = [\n  \"aa\",\n  \"ab\",\n  \"ae\",\n  \"af\",\n  \"ak\",\n  \"am\",\n  \"an\",\n  \"ar\",\n  \"as\",\n  \"av\",\n  \"ay\",\n  \"az\",\n  \"ba\",\n  \"be\",\n  \"bg\",\n  \"bh\",\n  \"bi\",\n  \"bm\",\n  \"bn\",\n  \"bo\",\n  \"br\",\n  \"bs\",\n  \"ca\",\n  \"ce\",\n  \"ch\",\n  \"co\",\n  \"cr\",\n  \"cs\",\n  \"cu\",\n  \"cv\",\n  \"cy\",\n  \"da\",\n  \"de\",\n  \"dv\",\n  \"dz\",\n  \"ee\",\n  \"el\",\n  \"en\",\n  \"eo\",\n  \"es\",\n  \"et\",\n  \"eu\",\n  \"fa\",\n  \"ff\",\n  \"fi\",\n  \"fj\",\n  \"fo\",\n  \"fr\",\n  \"fy\",\n  \"ga\",\n  \"gd\",\n  \"gl\",\n  \"gn\",\n  \"gu\",\n  \"gv\",\n  \"ha\",\n  \"he\",\n  \"hi\",\n  \"ho\",\n  \"hr\",\n  \"ht\",\n  \"hu\",\n  \"hy\",\n  \"hz\",\n  \"ia\",\n  \"id\",\n  \"ie\",\n  \"ig\",\n  \"ii\",\n  \"ik\",\n  \"io\",\n  \"is\",\n  \"it\",\n  \"iu\",\n  \"ja\",\n  \"jv\",\n  \"ka\",\n  \"kg\",\n  \"ki\",\n  \"kj\",\n  \"kk\",\n  \"kl\",\n  \"km\",\n  \"kn\",\n  \"ko\",\n  \"kr\",\n  \"ks\",\n  \"ku\",\n  \"kv\",\n  \"kw\",\n  \"ky\",\n  \"la\",\n  \"lb\",\n  \"lg\",\n  \"li\",\n  \"ln\",\n  \"lo\",\n  \"lt\",\n  \"lu\",\n  \"lv\",\n  \"mg\",\n  \"mh\",\n  \"mi\",\n  \"mk\",\n  \"ml\",\n  \"mn\",\n  \"mo\",\n  \"mr\",\n  \"ms\",\n  \"mt\",\n  \"my\",\n  \"na\",\n  \"nb\",\n  \"nd\",\n  \"ne\",\n  \"ng\",\n  \"nl\",\n  \"nn\",\n  \"no\",\n  \"nr\",\n  \"nv\",\n  \"ny\",\n  \"oc\",\n  \"oj\",\n  \"om\",\n  \"or\",\n  \"os\",\n  \"pa\",\n  \"pi\",\n  \"pl\",\n  \"ps\",\n  \"pt\",\n  \"qu\",\n  \"rm\",\n  \"rn\",\n  \"ro\",\n  \"ru\",\n  \"rw\",\n  \"sa\",\n  \"sc\",\n  \"sd\",\n  \"se\",\n  \"sg\",\n  \"sh\",\n  \"si\",\n  \"sk\",\n  \"sl\",\n  \"sm\",\n  \"sn\",\n  \"so\",\n  \"sq\",\n  \"sr\",\n  \"ss\",\n  \"st\",\n  \"su\",\n  \"sv\",\n  \"sw\",\n  \"ta\",\n  \"te\",\n  \"tg\",\n  \"th\",\n  \"ti\",\n  \"tk\",\n  \"tl\",\n  \"tn\",\n  \"to\",\n  \"tr\",\n  \"ts\",\n  \"tt\",\n  \"tw\",\n  \"ty\",\n  \"ug\",\n  \"uk\",\n  \"ur\",\n  \"uz\",\n  \"ve\",\n  \"vi\",\n  \"vo\",\n  \"wa\",\n  \"wo\",\n  \"xh\",\n  \"yi\",\n  \"yo\",\n  \"za\",\n  \"zh\",\n  \"zu\",\n  \"aar\",\n  \"abk\",\n  \"ave\",\n  \"afr\",\n  \"aka\",\n  \"amh\",\n  \"arg\",\n  \"ara\",\n  \"asm\",\n  \"ava\",\n  \"aym\",\n  \"aze\",\n  \"bak\",\n  \"bel\",\n  \"bul\",\n  \"bih\",\n  \"bis\",\n  \"bam\",\n  \"ben\",\n  \"tib\",\n  \"bod\",\n  \"bre\",\n  \"bos\",\n  \"cat\",\n  \"che\",\n  \"cha\",\n  \"cos\",\n  \"cre\",\n  \"cze\",\n  \"ces\",\n  \"chu\",\n  \"chv\",\n  \"wel\",\n  \"cym\",\n  \"dan\",\n  \"ger\",\n  \"deu\",\n  \"div\",\n  \"dzo\",\n  \"ewe\",\n  \"gre\",\n  \"ell\",\n  \"eng\",\n  \"epo\",\n  \"spa\",\n  \"est\",\n  \"baq\",\n  \"eus\",\n  \"per\",\n  \"fas\",\n  \"ful\",\n  \"fin\",\n  \"fij\",\n  \"fao\",\n  \"fre\",\n  \"fra\",\n  \"fry\",\n  \"gle\",\n  \"gla\",\n  \"glg\",\n  \"grn\",\n  \"guj\",\n  \"glv\",\n  \"hau\",\n  \"heb\",\n  \"hin\",\n  \"hmo\",\n  \"hrv\",\n  \"hat\",\n  \"hun\",\n  \"arm\",\n  \"hye\",\n  \"her\",\n  \"ina\",\n  \"ind\",\n  \"ile\",\n  \"ibo\",\n  \"iii\",\n  \"ipk\",\n  \"ido\",\n  \"ice\",\n  \"isl\",\n  \"ita\",\n  \"iku\",\n  \"jpn\",\n  \"jav\",\n  \"geo\",\n  \"kat\",\n  \"kon\",\n  \"kik\",\n  \"kua\",\n  \"kaz\",\n  \"kal\",\n  \"khm\",\n  \"kan\",\n  \"kor\",\n  \"kau\",\n  \"kas\",\n  \"kur\",\n  \"kom\",\n  \"cor\",\n  \"kir\",\n  \"lat\",\n  \"ltz\",\n  \"lug\",\n  \"lim\",\n  \"lin\",\n  \"lao\",\n  \"lit\",\n  \"lub\",\n  \"lav\",\n  \"mlg\",\n  \"mah\",\n  \"mao\",\n  \"mri\",\n  \"mac\",\n  \"mkd\",\n  \"mal\",\n  \"mon\",\n  \"mol\",\n  \"mar\",\n  \"may\",\n  \"msa\",\n  \"mlt\",\n  \"bur\",\n  \"mya\",\n  \"nau\",\n  \"nob\",\n  \"nde\",\n  \"nep\",\n  \"ndo\",\n  \"dut\",\n  \"nld\",\n  \"nno\",\n  \"nor\",\n  \"nbl\",\n  \"nav\",\n  \"nya\",\n  \"oci\",\n  \"oji\",\n  \"orm\",\n  \"ori\",\n  \"oss\",\n  \"pan\",\n  \"pli\",\n  \"pol\",\n  \"pus\",\n  \"por\",\n  \"que\",\n  \"roh\",\n  \"run\",\n  \"rum\",\n  \"ron\",\n  \"rus\",\n  \"kin\",\n  \"san\",\n  \"srd\",\n  \"snd\",\n  \"sme\",\n  \"sag\",\n  \"slo\",\n  \"sin\",\n  \"slk\",\n  \"slv\",\n  \"smo\",\n  \"sna\",\n  \"som\",\n  \"alb\",\n  \"sqi\",\n  \"srp\",\n  \"ssw\",\n  \"sot\",\n  \"sun\",\n  \"swe\",\n  \"swa\",\n  \"tam\",\n  \"tel\",\n  \"tgk\",\n  \"tha\",\n  \"tir\",\n  \"tuk\",\n  \"tgl\",\n  \"tsn\",\n  \"ton\",\n  \"tur\",\n  \"tso\",\n  \"tat\",\n  \"twi\",\n  \"tah\",\n  \"uig\",\n  \"ukr\",\n  \"urd\",\n  \"uzb\",\n  \"ven\",\n  \"vie\",\n  \"vol\",\n  \"wln\",\n  \"wol\",\n  \"xho\",\n  \"yid\",\n  \"yor\",\n  \"zha\",\n  \"chi\",\n  \"zho\",\n  \"zul\",\n];\nexport default ValidLanguages;\n","import { BaseCMI } from \"../../common/base_cmi\";\n\n/**\n * Enum for selection timing\n */\nexport enum SelectionTiming {\n  NEVER = \"never\",\n  ONCE = \"once\",\n  ON_EACH_NEW_ATTEMPT = \"onEachNewAttempt\",\n}\n\n/**\n * Enum for randomization timing\n */\nexport enum RandomizationTiming {\n  NEVER = \"never\",\n  ONCE = \"once\",\n  ON_EACH_NEW_ATTEMPT = \"onEachNewAttempt\",\n}\n\n/**\n * Class representing SCORM 2004 sequencing controls\n */\nexport class SequencingControls extends BaseCMI {\n  // Sequencing Control Modes\n  private _enabled: boolean = true;\n  private _choice: boolean = true;\n  private _choiceExit: boolean = true;\n  private _flow: boolean = false;\n  private _forwardOnly: boolean = false;\n  private _useCurrentAttemptObjectiveInfo: boolean = true;\n  private _useCurrentAttemptProgressInfo: boolean = true;\n\n  // Constrain Choice Controls\n  private _preventActivation: boolean = false;\n  private _constrainChoice: boolean = false;\n\n  // Rollup Controls\n  private _rollupObjectiveSatisfied: boolean = true;\n  private _rollupProgressCompletion: boolean = true;\n  private _objectiveMeasureWeight: number = 1.0;\n\n  // Selection Controls\n  private _selectionTiming: SelectionTiming = SelectionTiming.NEVER;\n  private _selectCount: number | null = null;\n  private _selectionCountStatus: boolean = false;\n  private _randomizeChildren: boolean = false;\n\n  // Randomization Controls\n  private _randomizationTiming: RandomizationTiming = RandomizationTiming.NEVER;\n  private _reorderChildren: boolean = false;\n\n  /**\n   * Constructor for SequencingControls\n   */\n  constructor() {\n    super(\"sequencingControls\");\n  }\n\n  /**\n   * Reset the sequencing controls to their default values\n   */\n  reset() {\n    this._initialized = false;\n    this._enabled = true;\n    this._choice = true;\n    this._choiceExit = true;\n    this._flow = false;\n    this._forwardOnly = false;\n    this._useCurrentAttemptObjectiveInfo = true;\n    this._useCurrentAttemptProgressInfo = true;\n    this._preventActivation = false;\n    this._constrainChoice = false;\n    this._rollupObjectiveSatisfied = true;\n    this._rollupProgressCompletion = true;\n    this._objectiveMeasureWeight = 1.0;\n    this._selectionTiming = SelectionTiming.NEVER;\n    this._selectCount = null;\n    this._selectionCountStatus = false;\n    this._randomizeChildren = false;\n    this._randomizationTiming = RandomizationTiming.NEVER;\n    this._reorderChildren = false;\n  }\n\n  /**\n   * Getter for enabled\n   * @return {boolean}\n   */\n  get enabled(): boolean {\n    return this._enabled;\n  }\n\n  /**\n   * Setter for enabled\n   * @param {boolean} enabled\n   */\n  set enabled(enabled: boolean) {\n    this._enabled = enabled;\n  }\n\n  /**\n   * Getter for choice\n   * @return {boolean}\n   */\n  get choice(): boolean {\n    return this._choice;\n  }\n\n  /**\n   * Setter for choice\n   * @param {boolean} choice\n   */\n  set choice(choice: boolean) {\n    this._choice = choice;\n  }\n\n  /**\n   * Getter for choiceExit\n   * @return {boolean}\n   */\n  get choiceExit(): boolean {\n    return this._choiceExit;\n  }\n\n  /**\n   * Setter for choiceExit\n   * @param {boolean} choiceExit\n   */\n  set choiceExit(choiceExit: boolean) {\n    this._choiceExit = choiceExit;\n  }\n\n  /**\n   * Getter for flow\n   * @return {boolean}\n   */\n  get flow(): boolean {\n    return this._flow;\n  }\n\n  /**\n   * Setter for flow\n   * @param {boolean} flow\n   */\n  set flow(flow: boolean) {\n    this._flow = flow;\n  }\n\n  /**\n   * Getter for forwardOnly\n   * @return {boolean}\n   */\n  get forwardOnly(): boolean {\n    return this._forwardOnly;\n  }\n\n  /**\n   * Setter for forwardOnly\n   * @param {boolean} forwardOnly\n   */\n  set forwardOnly(forwardOnly: boolean) {\n    this._forwardOnly = forwardOnly;\n  }\n\n  /**\n   * Getter for useCurrentAttemptObjectiveInfo\n   * @return {boolean}\n   */\n  get useCurrentAttemptObjectiveInfo(): boolean {\n    return this._useCurrentAttemptObjectiveInfo;\n  }\n\n  /**\n   * Setter for useCurrentAttemptObjectiveInfo\n   * @param {boolean} useCurrentAttemptObjectiveInfo\n   */\n  set useCurrentAttemptObjectiveInfo(useCurrentAttemptObjectiveInfo: boolean) {\n    this._useCurrentAttemptObjectiveInfo = useCurrentAttemptObjectiveInfo;\n  }\n\n  /**\n   * Getter for useCurrentAttemptProgressInfo\n   * @return {boolean}\n   */\n  get useCurrentAttemptProgressInfo(): boolean {\n    return this._useCurrentAttemptProgressInfo;\n  }\n\n  /**\n   * Setter for useCurrentAttemptProgressInfo\n   * @param {boolean} useCurrentAttemptProgressInfo\n   */\n  set useCurrentAttemptProgressInfo(useCurrentAttemptProgressInfo: boolean) {\n    this._useCurrentAttemptProgressInfo = useCurrentAttemptProgressInfo;\n  }\n\n  /**\n   * Getter for preventActivation\n   * @return {boolean}\n   */\n  get preventActivation(): boolean {\n    return this._preventActivation;\n  }\n\n  /**\n   * Setter for preventActivation\n   * @param {boolean} preventActivation\n   */\n  set preventActivation(preventActivation: boolean) {\n    this._preventActivation = preventActivation;\n  }\n\n  /**\n   * Getter for constrainChoice\n   * @return {boolean}\n   */\n  get constrainChoice(): boolean {\n    return this._constrainChoice;\n  }\n\n  /**\n   * Setter for constrainChoice\n   * @param {boolean} constrainChoice\n   */\n  set constrainChoice(constrainChoice: boolean) {\n    this._constrainChoice = constrainChoice;\n  }\n\n  /**\n   * Getter for rollupObjectiveSatisfied\n   * @return {boolean}\n   */\n  get rollupObjectiveSatisfied(): boolean {\n    return this._rollupObjectiveSatisfied;\n  }\n\n  /**\n   * Setter for rollupObjectiveSatisfied\n   * @param {boolean} rollupObjectiveSatisfied\n   */\n  set rollupObjectiveSatisfied(rollupObjectiveSatisfied: boolean) {\n    this._rollupObjectiveSatisfied = rollupObjectiveSatisfied;\n  }\n\n  /**\n   * Getter for rollupProgressCompletion\n   * @return {boolean}\n   */\n  get rollupProgressCompletion(): boolean {\n    return this._rollupProgressCompletion;\n  }\n\n  /**\n   * Setter for rollupProgressCompletion\n   * @param {boolean} rollupProgressCompletion\n   */\n  set rollupProgressCompletion(rollupProgressCompletion: boolean) {\n    this._rollupProgressCompletion = rollupProgressCompletion;\n  }\n\n  /**\n   * Getter for objectiveMeasureWeight\n   * @return {number}\n   */\n  get objectiveMeasureWeight(): number {\n    return this._objectiveMeasureWeight;\n  }\n\n  /**\n   * Setter for objectiveMeasureWeight\n   * @param {number} objectiveMeasureWeight\n   */\n  set objectiveMeasureWeight(objectiveMeasureWeight: number) {\n    // According to SCORM 2004, weight must be >= 0 but there's no upper limit\n    if (objectiveMeasureWeight >= 0) {\n      this._objectiveMeasureWeight = objectiveMeasureWeight;\n    }\n  }\n\n  /**\n   * Check if choice navigation is allowed\n   * @return {boolean} - True if choice navigation is allowed, false otherwise\n   */\n  isChoiceNavigationAllowed(): boolean {\n    return this._enabled && !this._constrainChoice;\n  }\n\n  /**\n   * Check if flow navigation is allowed\n   * @return {boolean} - True if flow navigation is allowed, false otherwise\n   */\n  isFlowNavigationAllowed(): boolean {\n    return this._enabled && this._flow;\n  }\n\n  /**\n   * Check if forward navigation is allowed\n   * @return {boolean} - True if forward navigation is allowed, false otherwise\n   */\n  isForwardNavigationAllowed(): boolean {\n    // Forward navigation (Continue request) is only valid when flow mode is\n    // enabled. The forwardOnly flag simply restricts backward navigation and\n    // does not affect the ability to move forward when flow is disabled.\n    return this._enabled && this._flow;\n  }\n\n  /**\n   * Check if backward navigation is allowed\n   * @return {boolean} - True if backward navigation is allowed, false otherwise\n   */\n  isBackwardNavigationAllowed(): boolean {\n    // Previous navigation is also part of flow based navigation and should only\n    // be permitted when flow mode is enabled and forwardOnly does not restrict\n    // going backwards.\n    return this._enabled && this._flow && !this._forwardOnly;\n  }\n\n  /**\n   * Getter for selectionTiming\n   * @return {SelectionTiming}\n   */\n  get selectionTiming(): SelectionTiming {\n    return this._selectionTiming;\n  }\n\n  /**\n   * Setter for selectionTiming\n   * @param {SelectionTiming} selectionTiming\n   */\n  set selectionTiming(selectionTiming: SelectionTiming) {\n    this._selectionTiming = selectionTiming;\n  }\n\n  /**\n   * Getter for selectCount\n   * @return {number | null}\n   */\n  get selectCount(): number | null {\n    return this._selectCount;\n  }\n\n  /**\n   * Setter for selectCount\n   * @param {number | null} selectCount\n   */\n  set selectCount(selectCount: number | null) {\n    if (selectCount === null || selectCount > 0) {\n      this._selectCount = selectCount;\n    }\n  }\n\n  /**\n   * Getter for selectionCountStatus\n   * @return {boolean}\n   */\n  get selectionCountStatus(): boolean {\n    return this._selectionCountStatus;\n  }\n\n  /**\n   * Setter for selectionCountStatus\n   * @param {boolean} selectionCountStatus\n   */\n  set selectionCountStatus(selectionCountStatus: boolean) {\n    this._selectionCountStatus = selectionCountStatus;\n  }\n\n  /**\n   * Getter for randomizeChildren\n   * @return {boolean}\n   */\n  get randomizeChildren(): boolean {\n    return this._randomizeChildren;\n  }\n\n  /**\n   * Setter for randomizeChildren\n   * @param {boolean} randomizeChildren\n   */\n  set randomizeChildren(randomizeChildren: boolean) {\n    this._randomizeChildren = randomizeChildren;\n  }\n\n  /**\n   * Getter for randomizationTiming\n   * @return {RandomizationTiming}\n   */\n  get randomizationTiming(): RandomizationTiming {\n    return this._randomizationTiming;\n  }\n\n  /**\n   * Setter for randomizationTiming\n   * @param {RandomizationTiming} randomizationTiming\n   */\n  set randomizationTiming(randomizationTiming: RandomizationTiming) {\n    this._randomizationTiming = randomizationTiming;\n  }\n\n  /**\n   * Getter for reorderChildren\n   * @return {boolean}\n   */\n  get reorderChildren(): boolean {\n    return this._reorderChildren;\n  }\n\n  /**\n   * Setter for reorderChildren\n   * @param {boolean} reorderChildren\n   */\n  set reorderChildren(reorderChildren: boolean) {\n    this._reorderChildren = reorderChildren;\n  }\n\n  /**\n   * toJSON for SequencingControls\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      enabled: this._enabled,\n      choice: this._choice,\n      choiceExit: this._choiceExit,\n      flow: this._flow,\n      forwardOnly: this._forwardOnly,\n      useCurrentAttemptObjectiveInfo: this._useCurrentAttemptObjectiveInfo,\n      useCurrentAttemptProgressInfo: this._useCurrentAttemptProgressInfo,\n      preventActivation: this._preventActivation,\n      constrainChoice: this._constrainChoice,\n      rollupObjectiveSatisfied: this._rollupObjectiveSatisfied,\n      rollupProgressCompletion: this._rollupProgressCompletion,\n      objectiveMeasureWeight: this._objectiveMeasureWeight,\n      selectionTiming: this._selectionTiming,\n      selectCount: this._selectCount,\n      selectionCountStatus: this._selectionCountStatus,\n      randomizeChildren: this._randomizeChildren,\n      randomizationTiming: this._randomizationTiming,\n      reorderChildren: this._reorderChildren,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../../common/base_cmi\";\nimport { scorm2004_regex } from \"../../../constants/regex\";\nimport { check2004ValidFormat } from \"../validation\";\nimport { Scorm2004ValidationError } from \"../../../exceptions/scorm2004_exceptions\";\nimport { scorm2004_errors } from \"../../../constants/error_codes\";\nimport { CompletionStatus, SuccessStatus } from \"../../../constants/enums\";\nimport { SequencingControls } from \"./sequencing_controls\";\nimport { SequencingRules } from \"./sequencing_rules\";\nimport { RollupRules } from \"./rollup_rules\";\n\n/**\n * Class representing a single activity in the SCORM 2004 activity tree\n */\nexport class Activity extends BaseCMI {\n  private _id: string = \"\";\n  private _title: string = \"\";\n  private _children: Activity[] = [];\n  private _parent: Activity | null = null;\n  private _isVisible: boolean = true;\n  private _isActive: boolean = false;\n  private _isSuspended: boolean = false;\n  private _isCompleted: boolean = false;\n  private _completionStatus: CompletionStatus = CompletionStatus.UNKNOWN;\n  private _successStatus: SuccessStatus = SuccessStatus.UNKNOWN;\n  private _attemptCount: number = 0;\n  private _attemptCompletionAmount: number = 0;\n  private _attemptAbsoluteDuration: string = \"PT0H0M0S\";\n  private _attemptExperiencedDuration: string = \"PT0H0M0S\";\n  private _activityAbsoluteDuration: string = \"PT0H0M0S\";\n  private _activityExperiencedDuration: string = \"PT0H0M0S\";\n  private _objectiveSatisfiedStatus: boolean = false;\n  private _objectiveMeasureStatus: boolean = false;\n  private _objectiveNormalizedMeasure: number = 0;\n  private _scaledPassingScore: number = 0.7; // Default passing score\n  private _isHiddenFromChoice: boolean = false;\n  private _isAvailable: boolean = true;\n  private _attemptLimit: number | null = null;\n  private _attemptAbsoluteDurationLimit: string | null = null;\n  private _activityAbsoluteDurationLimit: string | null = null;\n  private _timeLimitAction: string | null = null;\n  private _timeLimitDuration: string | null = null;\n  private _beginTimeLimit: string | null = null;\n  private _endTimeLimit: string | null = null;\n  private _sequencingControls: SequencingControls;\n  private _sequencingRules: SequencingRules;\n  private _rollupRules: RollupRules;\n  private _processedChildren: Activity[] | null = null;\n  private _isNewAttempt: boolean = false;\n\n  /**\n   * Constructor for Activity\n   * @param {string} id - The unique identifier for this activity\n   * @param {string} title - The title of this activity\n   */\n  constructor(id: string = \"\", title: string = \"\") {\n    super(\"activity\");\n    this._id = id;\n    this._title = title;\n    this._sequencingControls = new SequencingControls();\n    this._sequencingRules = new SequencingRules();\n    this._rollupRules = new RollupRules();\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    // Initialize children\n    for (const child of this._children) {\n      child.initialize();\n    }\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._isActive = false;\n    this._isSuspended = false;\n    this._isCompleted = false;\n    this._completionStatus = CompletionStatus.UNKNOWN;\n    this._successStatus = SuccessStatus.UNKNOWN;\n    this._attemptCount = 0;\n    this._attemptCompletionAmount = 0;\n    this._attemptAbsoluteDuration = \"PT0H0M0S\";\n    this._attemptExperiencedDuration = \"PT0H0M0S\";\n    this._activityAbsoluteDuration = \"PT0H0M0S\";\n    this._activityExperiencedDuration = \"PT0H0M0S\";\n    this._objectiveSatisfiedStatus = false;\n    this._objectiveMeasureStatus = false;\n    this._objectiveNormalizedMeasure = 0;\n\n    // Reset children\n    for (const child of this._children) {\n      child.reset();\n    }\n  }\n\n  /**\n   * Getter for id\n   * @return {string}\n   */\n  get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Setter for id\n   * @param {string} id\n   */\n  set id(id: string) {\n    if (check2004ValidFormat(this._cmi_element + \".id\", id, scorm2004_regex.CMILongIdentifier)) {\n      this._id = id;\n    }\n  }\n\n  /**\n   * Getter for title\n   * @return {string}\n   */\n  get title(): string {\n    return this._title;\n  }\n\n  /**\n   * Setter for title\n   * @param {string} title\n   */\n  set title(title: string) {\n    if (\n      check2004ValidFormat(this._cmi_element + \".title\", title, scorm2004_regex.CMILangString250)\n    ) {\n      this._title = title;\n    }\n  }\n\n  /**\n   * Getter for children\n   * @return {Activity[]}\n   */\n  get children(): Activity[] {\n    return this._children;\n  }\n\n  /**\n   * Add a child activity to this activity\n   * @param {Activity} child - The child activity to add\n   */\n  addChild(child: Activity): void {\n    // noinspection SuspiciousTypeOfGuard\n    if (!(child instanceof Activity)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".children\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n    child._parent = this;\n    this._children.push(child);\n  }\n\n  /**\n   * Remove a child activity from this activity\n   * @param {Activity} child - The child activity to remove\n   * @return {boolean} - True if the child was removed, false otherwise\n   */\n  removeChild(child: Activity): boolean {\n    const index = this._children.indexOf(child);\n    if (index !== -1) {\n      this._children.splice(index, 1);\n      child._parent = null;\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Getter for parent\n   * @return {Activity | null}\n   */\n  get parent(): Activity | null {\n    return this._parent;\n  }\n\n  /**\n   * Getter for isVisible\n   * @return {boolean}\n   */\n  get isVisible(): boolean {\n    return this._isVisible;\n  }\n\n  /**\n   * Setter for isVisible\n   * @param {boolean} isVisible\n   */\n  set isVisible(isVisible: boolean) {\n    this._isVisible = isVisible;\n  }\n\n  /**\n   * Getter for isActive\n   * @return {boolean}\n   */\n  get isActive(): boolean {\n    return this._isActive;\n  }\n\n  /**\n   * Setter for isActive\n   * @param {boolean} isActive\n   */\n  set isActive(isActive: boolean) {\n    this._isActive = isActive;\n  }\n\n  /**\n   * Getter for isSuspended\n   * @return {boolean}\n   */\n  get isSuspended(): boolean {\n    return this._isSuspended;\n  }\n\n  /**\n   * Setter for isSuspended\n   * @param {boolean} isSuspended\n   */\n  set isSuspended(isSuspended: boolean) {\n    this._isSuspended = isSuspended;\n  }\n\n  /**\n   * Getter for isCompleted\n   * @return {boolean}\n   */\n  get isCompleted(): boolean {\n    return this._isCompleted;\n  }\n\n  /**\n   * Setter for isCompleted\n   * @param {boolean} isCompleted\n   */\n  set isCompleted(isCompleted: boolean) {\n    this._isCompleted = isCompleted;\n    // Update completion status based on boolean value\n    if (isCompleted) {\n      this._completionStatus = CompletionStatus.COMPLETED;\n    } else {\n      this._completionStatus = CompletionStatus.INCOMPLETE;\n    }\n  }\n\n  /**\n   * Getter for completionStatus\n   * @return {CompletionStatus}\n   */\n  get completionStatus(): CompletionStatus {\n    return this._completionStatus;\n  }\n\n  /**\n   * Setter for completionStatus\n   * @param {CompletionStatus} completionStatus\n   */\n  set completionStatus(completionStatus: CompletionStatus) {\n    this._completionStatus = completionStatus;\n    this._isCompleted = completionStatus === CompletionStatus.COMPLETED;\n  }\n\n  /**\n   * Getter for successStatus\n   * @return {SuccessStatus}\n   */\n  get successStatus(): SuccessStatus {\n    return this._successStatus;\n  }\n\n  /**\n   * Setter for successStatus\n   * @param {SuccessStatus} successStatus\n   */\n  set successStatus(successStatus: SuccessStatus) {\n    this._successStatus = successStatus;\n  }\n\n  /**\n   * Getter for attemptCount\n   * @return {number}\n   */\n  get attemptCount(): number {\n    return this._attemptCount;\n  }\n\n  /**\n   * Setter for attemptCount\n   * @param {number} value\n   */\n  set attemptCount(value: number) {\n    this._attemptCount = value;\n  }\n\n  /**\n   * Increment the attempt count\n   */\n  incrementAttemptCount(): void {\n    this._attemptCount++;\n    this._isNewAttempt = true;\n    // Reset processed children on new attempt if needed\n    const controls = this._sequencingControls;\n    if (\n      controls.selectionTiming === \"onEachNewAttempt\" ||\n      controls.randomizationTiming === \"onEachNewAttempt\"\n    ) {\n      this._processedChildren = null;\n    }\n  }\n\n  /**\n   * Getter for objectiveSatisfiedStatus\n   * @return {boolean}\n   */\n  get objectiveSatisfiedStatus(): boolean {\n    return this._objectiveSatisfiedStatus;\n  }\n\n  /**\n   * Setter for objectiveSatisfiedStatus\n   * @param {boolean} objectiveSatisfiedStatus\n   */\n  set objectiveSatisfiedStatus(objectiveSatisfiedStatus: boolean) {\n    this._objectiveSatisfiedStatus = objectiveSatisfiedStatus;\n    // Update success status based on objective satisfaction\n    if (objectiveSatisfiedStatus) {\n      this._successStatus = SuccessStatus.PASSED;\n    } else {\n      this._successStatus = SuccessStatus.FAILED;\n    }\n  }\n\n  /**\n   * Getter for objectiveMeasureStatus\n   * @return {boolean}\n   */\n  get objectiveMeasureStatus(): boolean {\n    return this._objectiveMeasureStatus;\n  }\n\n  /**\n   * Setter for objectiveMeasureStatus\n   * @param {boolean} objectiveMeasureStatus\n   */\n  set objectiveMeasureStatus(objectiveMeasureStatus: boolean) {\n    this._objectiveMeasureStatus = objectiveMeasureStatus;\n  }\n\n  /**\n   * Getter for objectiveNormalizedMeasure\n   * @return {number}\n   */\n  get objectiveNormalizedMeasure(): number {\n    return this._objectiveNormalizedMeasure;\n  }\n\n  /**\n   * Setter for objectiveNormalizedMeasure\n   * @param {number} objectiveNormalizedMeasure\n   */\n  set objectiveNormalizedMeasure(objectiveNormalizedMeasure: number) {\n    this._objectiveNormalizedMeasure = objectiveNormalizedMeasure;\n  }\n\n  /**\n   * Getter for scaledPassingScore\n   * @return {number}\n   */\n  get scaledPassingScore(): number {\n    return this._scaledPassingScore;\n  }\n\n  /**\n   * Setter for scaledPassingScore\n   * @param {number} scaledPassingScore\n   */\n  set scaledPassingScore(scaledPassingScore: number) {\n    if (scaledPassingScore >= -1 && scaledPassingScore <= 1) {\n      this._scaledPassingScore = scaledPassingScore;\n    }\n  }\n\n  /**\n   * Getter for isHiddenFromChoice\n   * @return {boolean}\n   */\n  get isHiddenFromChoice(): boolean {\n    return this._isHiddenFromChoice;\n  }\n\n  /**\n   * Setter for isHiddenFromChoice\n   * @param {boolean} isHiddenFromChoice\n   */\n  set isHiddenFromChoice(isHiddenFromChoice: boolean) {\n    this._isHiddenFromChoice = isHiddenFromChoice;\n  }\n\n  /**\n   * Getter for isAvailable\n   * @return {boolean}\n   */\n  get isAvailable(): boolean {\n    return this._isAvailable;\n  }\n\n  /**\n   * Setter for isAvailable\n   * @param {boolean} isAvailable\n   */\n  set isAvailable(isAvailable: boolean) {\n    this._isAvailable = isAvailable;\n  }\n\n  /**\n   * Getter for attemptLimit\n   * @return {number | null}\n   */\n  get attemptLimit(): number | null {\n    return this._attemptLimit;\n  }\n\n  /**\n   * Setter for attemptLimit\n   * @param {number | null} attemptLimit\n   */\n  set attemptLimit(attemptLimit: number | null) {\n    this._attemptLimit = attemptLimit;\n  }\n\n  /**\n   * Check if attempt limit has been exceeded\n   * @return {boolean}\n   */\n  hasAttemptLimitExceeded(): boolean {\n    if (this._attemptLimit === null) {\n      return false;\n    }\n    return this._attemptCount >= this._attemptLimit;\n  }\n\n  /**\n   * Getter for timeLimitDuration\n   * @return {string | null}\n   */\n  get timeLimitDuration(): string | null {\n    return this._timeLimitDuration;\n  }\n\n  /**\n   * Setter for timeLimitDuration\n   * @param {string | null} timeLimitDuration\n   */\n  set timeLimitDuration(timeLimitDuration: string | null) {\n    this._timeLimitDuration = timeLimitDuration;\n  }\n\n  /**\n   * Getter for timeLimitAction\n   * @return {string | null}\n   */\n  get timeLimitAction(): string | null {\n    return this._timeLimitAction;\n  }\n\n  /**\n   * Setter for timeLimitAction\n   * @param {string | null} timeLimitAction\n   */\n  set timeLimitAction(timeLimitAction: string | null) {\n    this._timeLimitAction = timeLimitAction;\n  }\n\n  /**\n   * Getter for beginTimeLimit\n   * @return {string | null}\n   */\n  get beginTimeLimit(): string | null {\n    return this._beginTimeLimit;\n  }\n\n  /**\n   * Setter for beginTimeLimit\n   * @param {string | null} beginTimeLimit\n   */\n  set beginTimeLimit(beginTimeLimit: string | null) {\n    this._beginTimeLimit = beginTimeLimit;\n  }\n\n  /**\n   * Getter for endTimeLimit\n   * @return {string | null}\n   */\n  get endTimeLimit(): string | null {\n    return this._endTimeLimit;\n  }\n\n  /**\n   * Setter for endTimeLimit\n   * @param {string | null} endTimeLimit\n   */\n  set endTimeLimit(endTimeLimit: string | null) {\n    this._endTimeLimit = endTimeLimit;\n  }\n\n\n  /**\n   * Getter for attemptAbsoluteDurationLimit\n   * @return {string | null}\n   */\n  get attemptAbsoluteDurationLimit(): string | null {\n    return this._attemptAbsoluteDurationLimit;\n  }\n\n  /**\n   * Setter for attemptAbsoluteDurationLimit\n   * @param {string | null} attemptAbsoluteDurationLimit\n   */\n  set attemptAbsoluteDurationLimit(attemptAbsoluteDurationLimit: string | null) {\n    // TODO: Add proper validation for ISO 8601 duration format\n    this._attemptAbsoluteDurationLimit = attemptAbsoluteDurationLimit;\n  }\n\n  /**\n   * Getter for attemptExperiencedDuration\n   * @return {string}\n   */\n  get attemptExperiencedDuration(): string {\n    return this._attemptExperiencedDuration;\n  }\n\n  /**\n   * Setter for attemptExperiencedDuration\n   * @param {string} attemptExperiencedDuration\n   */\n  set attemptExperiencedDuration(attemptExperiencedDuration: string) {\n    // TODO: Add proper validation for ISO 8601 duration format\n    this._attemptExperiencedDuration = attemptExperiencedDuration;\n  }\n\n  /**\n   * Getter for activityAbsoluteDurationLimit\n   * @return {string | null}\n   */\n  get activityAbsoluteDurationLimit(): string | null {\n    return this._activityAbsoluteDurationLimit;\n  }\n\n  /**\n   * Setter for activityAbsoluteDurationLimit\n   * @param {string | null} activityAbsoluteDurationLimit\n   */\n  set activityAbsoluteDurationLimit(activityAbsoluteDurationLimit: string | null) {\n    // TODO: Add proper validation for ISO 8601 duration format\n    this._activityAbsoluteDurationLimit = activityAbsoluteDurationLimit;\n  }\n\n  /**\n   * Getter for activityExperiencedDuration\n   * @return {string}\n   */\n  get activityExperiencedDuration(): string {\n    return this._activityExperiencedDuration;\n  }\n\n  /**\n   * Setter for activityExperiencedDuration\n   * @param {string} activityExperiencedDuration\n   */\n  set activityExperiencedDuration(activityExperiencedDuration: string) {\n    // TODO: Add proper validation for ISO 8601 duration format\n    this._activityExperiencedDuration = activityExperiencedDuration;\n  }\n\n\n  /**\n   * Getter for sequencingControls\n   * @return {SequencingControls}\n   */\n  get sequencingControls(): SequencingControls {\n    return this._sequencingControls;\n  }\n\n  /**\n   * Setter for sequencingControls\n   * @param {SequencingControls} sequencingControls\n   */\n  set sequencingControls(sequencingControls: SequencingControls) {\n    this._sequencingControls = sequencingControls;\n  }\n\n  /**\n   * Getter for sequencingRules\n   * @return {SequencingRules}\n   */\n  get sequencingRules(): SequencingRules {\n    return this._sequencingRules;\n  }\n\n  /**\n   * Setter for sequencingRules\n   * @param {SequencingRules} sequencingRules\n   */\n  set sequencingRules(sequencingRules: SequencingRules) {\n    this._sequencingRules = sequencingRules;\n  }\n\n  /**\n   * Getter for rollupRules\n   * @return {RollupRules}\n   */\n  get rollupRules(): RollupRules {\n    return this._rollupRules;\n  }\n\n  /**\n   * Setter for rollupRules\n   * @param {RollupRules} rollupRules\n   */\n  set rollupRules(rollupRules: RollupRules) {\n    this._rollupRules = rollupRules;\n  }\n\n  /**\n   * Get available children with selection and randomization applied\n   * @return {Activity[]}\n   */\n  getAvailableChildren(): Activity[] {\n    // If no children, return empty array\n    if (this._children.length === 0) {\n      return [];\n    }\n\n    // If processed children already exist and no new attempt, return them\n    if (this._processedChildren !== null) {\n      return this._processedChildren;\n    }\n\n    // If no processing has been done yet, return all children\n    // The sequencing process will call applySelectionAndRandomization when needed\n    return this._children;\n  }\n\n  /**\n   * Set the processed children (called by SelectionRandomization)\n   * @param {Activity[]} processedChildren\n   */\n  setProcessedChildren(processedChildren: Activity[]): void {\n    this._processedChildren = processedChildren;\n  }\n\n  /**\n   * Reset processed children (used when configuration changes)\n   */\n  resetProcessedChildren(): void {\n    this._processedChildren = null;\n  }\n\n  /**\n   * Get whether this is a new attempt\n   * @return {boolean}\n   */\n  get isNewAttempt(): boolean {\n    return this._isNewAttempt;\n  }\n\n  /**\n   * Set whether this is a new attempt\n   * @param {boolean} isNewAttempt\n   */\n  set isNewAttempt(isNewAttempt: boolean) {\n    this._isNewAttempt = isNewAttempt;\n  }\n\n  /**\n   * toJSON for Activity\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      id: this._id,\n      title: this._title,\n      isVisible: this._isVisible,\n      isActive: this._isActive,\n      isSuspended: this._isSuspended,\n      isCompleted: this._isCompleted,\n      completionStatus: this._completionStatus,\n      successStatus: this._successStatus,\n      attemptCount: this._attemptCount,\n      attemptCompletionAmount: this._attemptCompletionAmount,\n      attemptAbsoluteDuration: this._attemptAbsoluteDuration,\n      attemptExperiencedDuration: this._attemptExperiencedDuration,\n      activityAbsoluteDuration: this._activityAbsoluteDuration,\n      activityExperiencedDuration: this._activityExperiencedDuration,\n      objectiveSatisfiedStatus: this._objectiveSatisfiedStatus,\n      objectiveMeasureStatus: this._objectiveMeasureStatus,\n      objectiveNormalizedMeasure: this._objectiveNormalizedMeasure,\n      children: this._children.map((child) => child.toJSON()),\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../../common/base_cmi\";\nimport { Activity } from \"./activity\";\nimport { Scorm2004ValidationError } from \"../../../exceptions/scorm2004_exceptions\";\nimport { scorm2004_errors } from \"../../../constants/error_codes\";\n\n/**\n * Class representing the SCORM 2004 activity tree\n */\nexport class ActivityTree extends BaseCMI {\n  private _root: Activity | null = null;\n  private _currentActivity: Activity | null = null;\n  private _suspendedActivity: Activity | null = null;\n  private _activities: Map<string, Activity> = new Map();\n\n  /**\n   * Constructor for ActivityTree\n   */\n  constructor() {\n    super(\"activityTree\");\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    if (this._root) {\n      this._root.initialize();\n    }\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._currentActivity = null;\n    this._suspendedActivity = null;\n    // Clear the activities map so it can be rebuilt\n    this._activities.clear();\n    if (this._root) {\n      this._root.reset();\n      // Re-populate the activities map with the root and its children\n      this._activities.set(this._root.id, this._root);\n      this._addActivitiesToMap(this._root);\n    }\n  }\n\n  /**\n   * Getter for root\n   * @return {Activity | null}\n   */\n  get root(): Activity | null {\n    return this._root;\n  }\n\n  /**\n   * Setter for root\n   * @param {Activity} root\n   */\n  set root(root: Activity | null) {\n    // noinspection SuspiciousTypeOfGuard\n    if (root !== null && !(root instanceof Activity)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".root\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n    // Clear existing map when assigning a new root to avoid stale activities\n    this._activities.clear();\n    this._root = root;\n    if (root) {\n      this._activities.set(root.id, root);\n      this._addActivitiesToMap(root);\n    }\n  }\n\n  /**\n   * Recursively add activities to the activities map\n   * @param {Activity} activity\n   * @private\n   */\n  private _addActivitiesToMap(activity: Activity): void {\n    for (const child of activity.children) {\n      this._activities.set(child.id, child);\n      this._addActivitiesToMap(child);\n    }\n  }\n\n  /**\n   * Getter for currentActivity\n   * @return {Activity | null}\n   */\n  get currentActivity(): Activity | null {\n    return this._currentActivity;\n  }\n\n  /**\n   * Setter for currentActivity\n   * @param {Activity | null} activity\n   */\n  set currentActivity(activity: Activity | null) {\n    // noinspection SuspiciousTypeOfGuard\n    if (activity !== null && !(activity instanceof Activity)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".currentActivity\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n\n    // If there's already a current activity, deactivate it\n    if (this._currentActivity) {\n      this._currentActivity.isActive = false;\n    }\n\n    // Set the new current activity and activate it\n    this._currentActivity = activity;\n    if (activity) {\n      activity.isActive = true;\n    }\n  }\n\n  /**\n   * Getter for suspendedActivity\n   * @return {Activity | null}\n   */\n  get suspendedActivity(): Activity | null {\n    return this._suspendedActivity;\n  }\n\n  /**\n   * Setter for suspendedActivity\n   * @param {Activity | null} activity\n   */\n  set suspendedActivity(activity: Activity | null) {\n    // noinspection SuspiciousTypeOfGuard\n    if (activity !== null && !(activity instanceof Activity)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".suspendedActivity\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n\n    // If there's already a suspended activity, unsuspend it\n    if (this._suspendedActivity) {\n      this._suspendedActivity.isSuspended = false;\n    }\n\n    // Set the new suspended activity and mark it as suspended\n    this._suspendedActivity = activity;\n    if (activity) {\n      activity.isSuspended = true;\n    }\n  }\n\n  /**\n   * Get an activity by ID\n   * @param {string} id - The ID of the activity to get\n   * @return {Activity | null} - The activity with the given ID, or null if not found\n   */\n  getActivity(id: string): Activity | null {\n    return this._activities.get(id) || null;\n  }\n\n  /**\n   * Get all activities in the tree\n   * @return {Activity[]} - An array of all activities in the tree\n   */\n  getAllActivities(): Activity[] {\n    return Array.from(this._activities.values());\n  }\n\n  /**\n   * Get the parent of an activity\n   * @param {Activity} activity - The activity to get the parent of\n   * @return {Activity | null} - The parent of the activity, or null if it has no parent\n   */\n  getParent(activity: Activity): Activity | null {\n    return activity.parent;\n  }\n\n  /**\n   * Get the children of an activity\n   * @param {Activity} activity - The activity to get the children of\n   * @param {boolean} useAvailableChildren - Whether to use available children (with selection/randomization)\n   * @return {Activity[]} - An array of the activity's children\n   */\n  getChildren(activity: Activity, useAvailableChildren: boolean = true): Activity[] {\n    return useAvailableChildren ? activity.getAvailableChildren() : activity.children;\n  }\n\n  /**\n   * Get the siblings of an activity\n   * @param {Activity} activity - The activity to get the siblings of\n   * @return {Activity[]} - An array of the activity's siblings\n   */\n  getSiblings(activity: Activity): Activity[] {\n    if (!activity.parent) {\n      return [];\n    }\n    return activity.parent.children.filter((child) => child !== activity);\n  }\n\n  /**\n   * Get the next sibling of an activity\n   * @param {Activity} activity - The activity to get the next sibling of\n   * @param {boolean} useAvailableChildren - Whether to use available children (with selection/randomization)\n   * @return {Activity | null} - The next sibling of the activity, or null if it has no next sibling\n   */\n  getNextSibling(activity: Activity, useAvailableChildren: boolean = true): Activity | null {\n    if (!activity.parent) {\n      return null;\n    }\n    let siblings = useAvailableChildren \n      ? activity.parent.getAvailableChildren() \n      : activity.parent.children;\n    let index = siblings.indexOf(activity);\n    \n    // Fallback: if not found in available children, try raw children\n    if (index === -1 && useAvailableChildren) {\n      siblings = activity.parent.children;\n      index = siblings.indexOf(activity);\n    }\n    \n    if (index === -1 || index === siblings.length - 1) {\n      return null;\n    }\n    return siblings[index + 1] ?? null;\n  }\n\n  /**\n   * Get the previous sibling of an activity\n   * @param {Activity} activity - The activity to get the previous sibling of\n   * @param {boolean} useAvailableChildren - Whether to use available children (with selection/randomization)\n   * @return {Activity | null} - The previous sibling of the activity, or null if it has no previous sibling\n   */\n  getPreviousSibling(activity: Activity, useAvailableChildren: boolean = true): Activity | null {\n    if (!activity.parent) {\n      return null;\n    }\n    let siblings = useAvailableChildren \n      ? activity.parent.getAvailableChildren() \n      : activity.parent.children;\n    let index = siblings.indexOf(activity);\n    \n    // Fallback: if not found in available children, try raw children\n    if (index === -1 && useAvailableChildren) {\n      siblings = activity.parent.children;\n      index = siblings.indexOf(activity);\n    }\n    \n    if (index <= 0) {\n      return null;\n    }\n    return siblings[index - 1] ?? null;\n  }\n\n  /**\n   * Get the first child of an activity\n   * @param {Activity} activity - The activity to get the first child of\n   * @param {boolean} useAvailableChildren - Whether to use available children (with selection/randomization)\n   * @return {Activity | null} - The first child of the activity, or null if it has no children\n   */\n  getFirstChild(activity: Activity, useAvailableChildren: boolean = true): Activity | null {\n    const children = useAvailableChildren \n      ? activity.getAvailableChildren() \n      : activity.children;\n    if (children.length === 0) {\n      return null;\n    }\n    return children[0] ?? null;\n  }\n\n  /**\n   * Get the last child of an activity\n   * @param {Activity} activity - The activity to get the last child of\n   * @param {boolean} useAvailableChildren - Whether to use available children (with selection/randomization)\n   * @return {Activity | null} - The last child of the activity, or null if it has no children\n   */\n  getLastChild(activity: Activity, useAvailableChildren: boolean = true): Activity | null {\n    const children = useAvailableChildren \n      ? activity.getAvailableChildren() \n      : activity.children;\n    if (children.length === 0) {\n      return null;\n    }\n    return children[children.length - 1] ?? null;\n  }\n\n  /**\n   * Get the common ancestor of two activities\n   * @param {Activity} activity1 - The first activity\n   * @param {Activity} activity2 - The second activity\n   * @return {Activity | null} - The common ancestor of the two activities, or null if they have no common ancestor\n   */\n  getCommonAncestor(activity1: Activity, activity2: Activity): Activity | null {\n    // Get the path from the root to activity1\n    const path1: Activity[] = [];\n    let current: Activity | null = activity1;\n    while (current) {\n      path1.unshift(current);\n      current = current.parent;\n    }\n\n    // Check if activity2 is in the path from the root to activity1\n    current = activity2;\n    while (current) {\n      if (path1.includes(current)) {\n        return current;\n      }\n      current = current.parent;\n    }\n\n    return null;\n  }\n\n  /**\n   * toJSON for ActivityTree\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      root: this._root,\n      currentActivity: this._currentActivity ? this._currentActivity.id : null,\n      suspendedActivity: this._suspendedActivity ? this._suspendedActivity.id : null,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { Activity } from \"./activity\";\nimport { SelectionTiming, RandomizationTiming } from \"./sequencing_controls\";\n\n/**\n * Class implementing SCORM 2004 Selection and Randomization processes (SR.1 and SR.2)\n */\nexport class SelectionRandomization {\n  /**\n   * Select Children Process (SR.1)\n   * Selects a subset of child activities based on selection controls\n   * @param {Activity} activity - The parent activity whose children need to be selected\n   * @return {Activity[]} - The selected child activities\n   */\n  public static selectChildrenProcess(activity: Activity): Activity[] {\n    const controls = activity.sequencingControls;\n    const children = [...activity.children]; // Create a copy to avoid mutating original\n\n    // Check if selection should occur\n    if (controls.selectionTiming === SelectionTiming.NEVER) {\n      return children;\n    }\n\n    // Check if selection has already been done (for ONCE timing)\n    if (\n      controls.selectionTiming === SelectionTiming.ONCE &&\n      controls.selectionCountStatus\n    ) {\n      return children;\n    }\n\n    // Check if we need to select children\n    const selectCount = controls.selectCount;\n    if (selectCount === null || selectCount >= children.length) {\n      // Mark selection as done if timing is ONCE\n      if (controls.selectionTiming === SelectionTiming.ONCE) {\n        controls.selectionCountStatus = true;\n      }\n      return children;\n    }\n\n    // Perform selection\n    const selectedChildren: Activity[] = [];\n    const availableIndices = children.map((_, index) => index);\n\n    // Randomly select children\n    for (let i = 0; i < selectCount; i++) {\n      if (availableIndices.length === 0) break;\n      \n      const randomIndex = Math.floor(Math.random() * availableIndices.length);\n      const childIndex = availableIndices[randomIndex];\n      if (childIndex !== undefined && children[childIndex]) {\n        selectedChildren.push(children[childIndex]);\n      }\n      \n      // Remove selected index from available indices\n      availableIndices.splice(randomIndex, 1);\n    }\n\n    // Mark selection as done only if timing is ONCE\n    if (controls.selectionTiming === SelectionTiming.ONCE) {\n      controls.selectionCountStatus = true;\n    }\n\n    // Hide non-selected children from choice\n    for (const child of children) {\n      if (!selectedChildren.includes(child)) {\n        child.isHiddenFromChoice = true;\n        child.isAvailable = false;\n      }\n    }\n\n    return selectedChildren;\n  }\n\n  /**\n   * Randomize Children Process (SR.2)\n   * Randomizes the order of child activities based on randomization controls\n   * @param {Activity} activity - The parent activity whose children need to be randomized\n   * @return {Activity[]} - The randomized child activities\n   */\n  public static randomizeChildrenProcess(activity: Activity): Activity[] {\n    const controls = activity.sequencingControls;\n    const children = [...activity.children]; // Create a copy to avoid mutating original\n\n    // Check if randomization should occur\n    if (controls.randomizationTiming === RandomizationTiming.NEVER) {\n      return children;\n    }\n\n    // Check if randomization has already been done (for ONCE timing)\n    if (\n      controls.randomizationTiming === RandomizationTiming.ONCE &&\n      controls.reorderChildren\n    ) {\n      return children;\n    }\n\n    // Check if we need to randomize\n    if (!controls.randomizeChildren) {\n      return children;\n    }\n\n    // Perform Fisher-Yates shuffle\n    const randomizedChildren = [...children];\n    for (let i = randomizedChildren.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      const tempI = randomizedChildren[i];\n      const tempJ = randomizedChildren[j];\n      if (tempI && tempJ) {\n        randomizedChildren[i] = tempJ;\n        randomizedChildren[j] = tempI;\n      }\n    }\n\n    // Mark randomization as done only if timing is ONCE\n    if (controls.randomizationTiming === RandomizationTiming.ONCE) {\n      controls.reorderChildren = true;\n    }\n\n    // Update the activity's children array with the new order\n    activity.children.length = 0;\n    activity.children.push(...randomizedChildren);\n\n    return randomizedChildren;\n  }\n\n  /**\n   * Apply selection and randomization to an activity\n   * This combines both SR.1 and SR.2 processes\n   * @param {Activity} activity - The parent activity\n   * @param {boolean} isNewAttempt - Whether this is a new attempt on the activity\n   * @return {Activity[]} - The processed child activities\n   */\n  public static applySelectionAndRandomization(\n    activity: Activity,\n    isNewAttempt: boolean = false,\n  ): Activity[] {\n    const controls = activity.sequencingControls;\n\n    // Check if we should apply selection/randomization\n    let shouldApplySelection = false;\n    let shouldApplyRandomization = false;\n\n    // For ON_EACH_NEW_ATTEMPT timing, only apply on new attempts\n    if (controls.selectionTiming === SelectionTiming.ON_EACH_NEW_ATTEMPT) {\n      shouldApplySelection = isNewAttempt;\n      if (isNewAttempt) {\n        controls.selectionCountStatus = false;\n      }\n    } else if (controls.selectionTiming === SelectionTiming.ONCE) {\n      shouldApplySelection = !controls.selectionCountStatus;\n    }\n\n    if (controls.randomizationTiming === RandomizationTiming.ON_EACH_NEW_ATTEMPT) {\n      shouldApplyRandomization = isNewAttempt;\n      if (isNewAttempt) {\n        controls.reorderChildren = false;\n      }\n    } else if (controls.randomizationTiming === RandomizationTiming.ONCE) {\n      shouldApplyRandomization = !controls.reorderChildren;\n    }\n\n    // Apply selection first if needed\n    if (shouldApplySelection) {\n      this.selectChildrenProcess(activity);\n    }\n\n    // Then apply randomization if needed\n    if (shouldApplyRandomization) {\n      this.randomizeChildrenProcess(activity);\n    }\n\n    // Get the final processed children\n    const processedChildren = activity.children.filter(child => child.isAvailable);\n    \n    // Store the processed children on the activity\n    activity.setProcessedChildren(processedChildren);\n    \n    return processedChildren;\n  }\n\n  /**\n   * Check if selection is needed for an activity\n   * @param {Activity} activity - The activity to check\n   * @return {boolean} - True if selection is needed\n   */\n  public static isSelectionNeeded(activity: Activity): boolean {\n    const controls = activity.sequencingControls;\n    \n    if (controls.selectionTiming === SelectionTiming.NEVER) {\n      return false;\n    }\n\n    if (\n      controls.selectionTiming === SelectionTiming.ONCE &&\n      controls.selectionCountStatus\n    ) {\n      return false;\n    }\n\n    return controls.selectCount !== null && controls.selectCount < activity.children.length;\n  }\n\n  /**\n   * Check if randomization is needed for an activity\n   * @param {Activity} activity - The activity to check\n   * @return {boolean} - True if randomization is needed\n   */\n  public static isRandomizationNeeded(activity: Activity): boolean {\n    const controls = activity.sequencingControls;\n    \n    if (controls.randomizationTiming === RandomizationTiming.NEVER) {\n      return false;\n    }\n\n    if (\n      controls.randomizationTiming === RandomizationTiming.ONCE &&\n      controls.reorderChildren\n    ) {\n      return false;\n    }\n\n    return controls.randomizeChildren;\n  }\n}","import { Activity } from \"./activity\";\nimport { ActivityTree } from \"./activity_tree\";\nimport { SequencingRules, SequencingRule, RuleActionType, RuleConditionOperator } from \"./sequencing_rules\";\nimport { SequencingControls } from \"./sequencing_controls\";\nimport { ADLNav } from \"../adl\";\nimport { SelectionRandomization } from \"./selection_randomization\";\n\n/**\n * Enum for sequencing request types\n */\nexport enum SequencingRequestType {\n  START = \"start\",\n  RESUME_ALL = \"resumeAll\",\n  CONTINUE = \"continue\",\n  PREVIOUS = \"previous\",\n  CHOICE = \"choice\",\n  JUMP = \"jump\",\n  EXIT = \"exit\",\n  EXIT_ALL = \"exitAll\",\n  ABANDON = \"abandon\",\n  ABANDON_ALL = \"abandonAll\",\n  SUSPEND_ALL = \"suspendAll\",\n  RETRY = \"retry\",\n  RETRY_ALL = \"retryAll\",\n}\n\n/**\n * Enum for delivery request types\n */\nexport enum DeliveryRequestType {\n  DELIVER = \"deliver\",\n  DO_NOT_DELIVER = \"doNotDeliver\",\n}\n\n/**\n * Class representing the result of a sequencing process\n */\nexport class SequencingResult {\n  public deliveryRequest: DeliveryRequestType;\n  public targetActivity: Activity | null;\n  public exception: string | null;\n\n  constructor(\n    deliveryRequest: DeliveryRequestType = DeliveryRequestType.DO_NOT_DELIVER,\n    targetActivity: Activity | null = null,\n    exception: string | null = null,\n  ) {\n    this.deliveryRequest = deliveryRequest;\n    this.targetActivity = targetActivity;\n    this.exception = exception;\n  }\n}\n\n/**\n * Class implementing SCORM 2004 sequencing processes\n */\nexport class SequencingProcess {\n  private activityTree: ActivityTree;\n  private sequencingRules: SequencingRules | null;\n  private sequencingControls: SequencingControls | null;\n  private adlNav: ADLNav | null;\n\n  constructor(\n    activityTree: ActivityTree,\n    sequencingRules?: SequencingRules | null,\n    sequencingControls?: SequencingControls | null,\n    adlNav: ADLNav | null = null,\n  ) {\n    this.activityTree = activityTree;\n    this.sequencingRules = sequencingRules || null;\n    this.sequencingControls = sequencingControls || null;\n    this.adlNav = adlNav;\n  }\n\n  /**\n   * Main Sequencing Request Process (SB.2.12)\n   * This is the main entry point for all navigation requests\n   * @param {SequencingRequestType} request - The sequencing request\n   * @param {string} targetActivityId - The target activity ID (for choice/jump)\n   * @return {SequencingResult} - The result of the sequencing process\n   */\n  public sequencingRequestProcess(\n    request: SequencingRequestType,\n    targetActivityId: string | null = null,\n  ): SequencingResult {\n    // Initialize result\n    const result = new SequencingResult();\n\n    // Get current activity\n    const currentActivity = this.activityTree.currentActivity;\n    const suspendedActivity = this.activityTree.suspendedActivity;\n\n    // Process based on request type\n    switch (request) {\n      case SequencingRequestType.START:\n        return this.startSequencingRequestProcess();\n\n      case SequencingRequestType.RESUME_ALL:\n        return this.resumeAllSequencingRequestProcess();\n\n      case SequencingRequestType.CONTINUE:\n        if (!currentActivity) {\n          result.exception = \"SB.2.12-1\"; // No current activity\n          return result;\n        }\n        return this.continueSequencingRequestProcess(currentActivity);\n\n      case SequencingRequestType.PREVIOUS:\n        if (!currentActivity) {\n          result.exception = \"SB.2.12-1\"; // No current activity\n          return result;\n        }\n        return this.previousSequencingRequestProcess(currentActivity);\n\n      case SequencingRequestType.CHOICE:\n        if (!targetActivityId) {\n          result.exception = \"SB.2.12-5\"; // No target specified\n          return result;\n        }\n        return this.choiceSequencingRequestProcess(targetActivityId, currentActivity);\n\n      case SequencingRequestType.JUMP:\n        if (!targetActivityId) {\n          result.exception = \"SB.2.12-5\"; // No target specified\n          return result;\n        }\n        return this.jumpSequencingRequestProcess(targetActivityId);\n\n      case SequencingRequestType.EXIT:\n        if (!currentActivity) {\n          result.exception = \"SB.2.12-1\"; // No current activity\n          return result;\n        }\n        return this.exitSequencingRequestProcess(currentActivity);\n\n      case SequencingRequestType.EXIT_ALL:\n        if (!currentActivity) {\n          result.exception = \"SB.2.12-1\"; // No current activity\n          return result;\n        }\n        return this.exitAllSequencingRequestProcess();\n\n      case SequencingRequestType.ABANDON:\n        if (!currentActivity) {\n          result.exception = \"SB.2.12-1\"; // No current activity\n          return result;\n        }\n        return this.abandonSequencingRequestProcess(currentActivity);\n\n      case SequencingRequestType.ABANDON_ALL:\n        if (!currentActivity) {\n          result.exception = \"SB.2.12-1\"; // No current activity\n          return result;\n        }\n        return this.abandonAllSequencingRequestProcess();\n\n      case SequencingRequestType.SUSPEND_ALL:\n        if (!currentActivity) {\n          result.exception = \"SB.2.12-1\"; // No current activity\n          return result;\n        }\n        return this.suspendAllSequencingRequestProcess(currentActivity);\n\n      case SequencingRequestType.RETRY:\n        if (!currentActivity) {\n          result.exception = \"SB.2.12-1\"; // No current activity\n          return result;\n        }\n        return this.retrySequencingRequestProcess(currentActivity);\n\n      case SequencingRequestType.RETRY_ALL:\n        return this.retryAllSequencingRequestProcess();\n\n      default:\n        result.exception = \"SB.2.12-6\"; // Undefined sequencing request\n        return result;\n    }\n  }\n\n  /**\n   * Start Sequencing Request Process (SB.2.5)\n   * Determines the first activity to deliver when starting\n   * @return {SequencingResult}\n   */\n  private startSequencingRequestProcess(): SequencingResult {\n    const result = new SequencingResult();\n    const root = this.activityTree.root;\n\n    if (!root) {\n      result.exception = \"SB.2.5-1\"; // No activity tree\n      return result;\n    }\n\n    // Check if sequencing session has already begun\n    if (this.activityTree.currentActivity !== null) {\n      result.exception = \"SB.2.5-2\"; // Sequencing session already begun\n      return result;\n    }\n\n    // For START, we need to flow into the activity tree from the root\n    // Start with the root and find first deliverable leaf activity\n    const deliverableActivity = this.findFirstDeliverableActivity(root);\n\n    if (!deliverableActivity) {\n      result.exception = \"SB.2.5-3\"; // No activity available\n      return result;\n    }\n\n    // Deliver the identified activity\n    result.deliveryRequest = DeliveryRequestType.DELIVER;\n    result.targetActivity = deliverableActivity;\n    return result;\n  }\n\n  /**\n   * Find First Deliverable Activity\n   * Recursively searches from the given activity to find the first deliverable leaf\n   * @param {Activity} activity - The activity to start searching from\n   * @return {Activity | null} - The first deliverable activity, or null if none found\n   */\n  private findFirstDeliverableActivity(activity: Activity): Activity | null {\n    // Check if this activity can be delivered (leaf activity)\n    if (activity.children.length === 0) {\n      // This is a leaf - check if it can be delivered\n      if (this.checkActivityProcess(activity)) {\n        return activity;\n      }\n      return null;\n    }\n\n    // This is a cluster - look through children for deliverable activity\n    this.ensureSelectionAndRandomization(activity);\n    const children = activity.getAvailableChildren();\n    \n    for (const child of children) {\n      const deliverable = this.findFirstDeliverableActivity(child);\n      if (deliverable) {\n        return deliverable;\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Resume All Sequencing Request Process (SB.2.6)\n   * Resumes a suspended session\n   * @return {SequencingResult}\n   */\n  private resumeAllSequencingRequestProcess(): SequencingResult {\n    const result = new SequencingResult();\n    const suspendedActivity = this.activityTree.suspendedActivity;\n\n    if (!suspendedActivity) {\n      result.exception = \"SB.2.6-1\"; // No suspended activity\n      return result;\n    }\n\n    if (this.activityTree.currentActivity !== null) {\n      result.exception = \"SB.2.6-2\"; // Current activity already defined\n      return result;\n    }\n\n    // Deliver the suspended activity\n    result.deliveryRequest = DeliveryRequestType.DELIVER;\n    result.targetActivity = suspendedActivity;\n    return result;\n  }\n\n  /**\n   * Continue Sequencing Request Process (SB.2.7)\n   * Processes continue navigation request\n   * @param {Activity} currentActivity - The current activity\n   * @return {SequencingResult}\n   */\n  private continueSequencingRequestProcess(currentActivity: Activity): SequencingResult {\n    const result = new SequencingResult();\n\n    // Check if the current activity has been terminated\n    if (currentActivity.isActive) {\n      result.exception = \"SB.2.7-1\"; // Current activity not terminated\n      return result;\n    }\n\n    // Check if flow is allowed from the current activity's parent\n    if (currentActivity.parent && !currentActivity.parent.sequencingControls.flow) {\n      result.exception = \"SB.2.7-2\"; // No activity available (flow disabled)\n      return result;\n    }\n\n    // Flow from current activity to find next using flow subprocess\n    const flowResult = this.flowSubprocess(currentActivity, FlowSubprocessMode.FORWARD);\n\n    if (!flowResult) {\n      result.exception = \"SB.2.7-2\"; // No activity available\n      return result;\n    }\n\n    // Deliver the identified activity\n    result.deliveryRequest = DeliveryRequestType.DELIVER;\n    result.targetActivity = flowResult;\n    return result;\n  }\n\n  /**\n   * Previous Sequencing Request Process (SB.2.8)\n   * Processes previous navigation request\n   * @param {Activity} currentActivity - The current activity\n   * @return {SequencingResult}\n   */\n  private previousSequencingRequestProcess(currentActivity: Activity): SequencingResult {\n    const result = new SequencingResult();\n\n    // Check if the current activity has been terminated\n    if (currentActivity.isActive) {\n      result.exception = \"SB.2.8-1\"; // Current activity not terminated\n      return result;\n    }\n\n    // Check if flow is allowed from the current activity's parent\n    if (currentActivity.parent && !currentActivity.parent.sequencingControls.flow) {\n      result.exception = \"SB.2.8-2\"; // No activity available (flow disabled)\n      return result;\n    }\n\n    // Check if backward flow is allowed (forwardOnly control)\n    if (currentActivity.parent && currentActivity.parent.sequencingControls.forwardOnly) {\n      result.exception = \"SB.2.8-2\"; // No activity available (backward flow disabled)\n      return result;\n    }\n\n    // Flow from current activity to find previous using flow subprocess\n    const flowResult = this.flowSubprocess(currentActivity, FlowSubprocessMode.BACKWARD);\n\n    if (!flowResult) {\n      result.exception = \"SB.2.8-2\"; // No activity available\n      return result;\n    }\n\n    // Deliver the identified activity\n    result.deliveryRequest = DeliveryRequestType.DELIVER;\n    result.targetActivity = flowResult;\n    return result;\n  }\n\n  /**\n   * Choice Sequencing Request Process (SB.2.9)\n   * Processes choice navigation request\n   * @param {string} targetActivityId - The target activity ID\n   * @param {Activity | null} currentActivity - The current activity\n   * @return {SequencingResult}\n   */\n  private choiceSequencingRequestProcess(\n    targetActivityId: string,\n    currentActivity: Activity | null,\n  ): SequencingResult {\n    const result = new SequencingResult();\n\n    // Find the target activity\n    let targetActivity = this.activityTree.getActivity(targetActivityId);\n    if (!targetActivity) {\n      result.exception = \"SB.2.9-1\"; // Target activity does not exist\n      return result;\n    }\n\n    // Check if target is in the activity tree\n    if (!this.isActivityInTree(targetActivity)) {\n      result.exception = \"SB.2.9-2\"; // Target activity not in tree\n      return result;\n    }\n\n    // Cannot choose the root activity\n    if (targetActivity === this.activityTree.root) {\n      result.exception = \"SB.2.9-3\"; // Cannot choose root\n      return result;\n    }\n\n    // Path to root validation\n    let activity: Activity | null = targetActivity;\n    while (activity) {\n      if (activity.isHiddenFromChoice) {\n        result.exception = \"SB.2.9-4\"; // Activity hidden from choice\n        return result;\n      }\n\n      // Check if choice control is constrained\n      if (activity.parent && !activity.parent.sequencingControls.choice) {\n        result.exception = \"SB.2.9-5\"; // Choice control is not allowed\n        return result;\n      }\n\n      activity = activity.parent;\n    }\n\n    // Check if current activity needs to be terminated\n    if (currentActivity && currentActivity.isActive) {\n      result.exception = \"SB.2.9-6\"; // Current activity not terminated\n      return result;\n    }\n\n    // Find common ancestor\n    const commonAncestor = this.findCommonAncestor(currentActivity, targetActivity);\n\n    // Terminate descendent attempts from common ancestor\n    if (currentActivity) {\n      this.terminateDescendentAttemptsProcess(commonAncestor || this.activityTree.root!);\n    }\n\n    // Form the activity path from target to common ancestor\n    const activityPath: Activity[] = [];\n    activity = targetActivity;\n    while (activity && activity !== commonAncestor) {\n      activityPath.unshift(activity);\n      activity = activity.parent;\n    }\n\n    // Evaluate each activity in the path\n    for (const pathActivity of activityPath) {\n      if (!this.checkActivityProcess(pathActivity)) {\n        // Sequencing ends with no delivery\n        return result;\n      }\n    }\n\n    // If target is not a leaf, flow forward to find a leaf\n    if (targetActivity.children.length > 0) {\n      this.ensureSelectionAndRandomization(targetActivity);\n      const availableChildren = targetActivity.getAvailableChildren();\n      \n      const flowResult = this.flowActivityTraversalSubprocess(\n        targetActivity,\n        true, // direction forward\n        true, // consider children\n        FlowSubprocessMode.FORWARD,\n      );\n\n      if (!flowResult) {\n        result.exception = \"SB.2.9-7\"; // No activity available from target\n        return result;\n      }\n\n      targetActivity = flowResult;\n    }\n\n    // Deliver the identified activity\n    result.deliveryRequest = DeliveryRequestType.DELIVER;\n    result.targetActivity = targetActivity;\n    return result;\n  }\n\n  /**\n   * Jump Sequencing Request Process (SB.2.13)\n   * Processes jump navigation request - SCORM 2004 4th Edition\n   * @param {string} targetActivityId - The target activity ID\n   * @return {SequencingResult}\n   */\n  private jumpSequencingRequestProcess(targetActivityId: string): SequencingResult {\n    const result = new SequencingResult();\n\n    // Find the target activity\n    const targetActivity = this.activityTree.getActivity(targetActivityId);\n    if (!targetActivity) {\n      result.exception = \"SB.2.13-1\"; // Target activity does not exist\n      return result;\n    }\n\n    // Check if target is in the activity tree\n    if (!this.isActivityInTree(targetActivity)) {\n      result.exception = \"SB.2.13-2\"; // Target activity not in tree\n      return result;\n    }\n\n    // Check if target is available\n    if (!targetActivity.isAvailable) {\n      result.exception = \"SB.2.13-3\"; // Target not available\n      return result;\n    }\n\n    // Deliver the target activity\n    result.deliveryRequest = DeliveryRequestType.DELIVER;\n    result.targetActivity = targetActivity;\n    return result;\n  }\n\n  /**\n   * Exit Sequencing Request Process\n   * @param {Activity} currentActivity - The current activity\n   * @return {SequencingResult}\n   */\n  private exitSequencingRequestProcess(currentActivity: Activity): SequencingResult {\n    const result = new SequencingResult();\n\n    // Check if exit is allowed\n    if (!currentActivity.parent) {\n      result.exception = \"SB.2.11-1\"; // Exit not allowed - no parent\n      return result;\n    }\n    \n    // Check parent's sequencing controls\n    if (!currentActivity.parent.sequencingControls.choiceExit) {\n      result.exception = \"SB.2.11-2\"; // Exit not allowed by sequencing controls\n      return result;\n    }\n\n    // Terminate current activity\n    this.terminateDescendentAttemptsProcess(currentActivity);\n\n    return result;\n  }\n\n  /**\n   * Exit All Sequencing Request Process\n   * @return {SequencingResult}\n   */\n  private exitAllSequencingRequestProcess(): SequencingResult {\n    const result = new SequencingResult();\n\n    // Terminate all activities\n    if (this.activityTree.root) {\n      this.terminateDescendentAttemptsProcess(this.activityTree.root);\n    }\n\n    return result;\n  }\n\n  /**\n   * Abandon Sequencing Request Process\n   * @param {Activity} currentActivity - The current activity\n   * @return {SequencingResult}\n   */\n  private abandonSequencingRequestProcess(currentActivity: Activity): SequencingResult {\n    const result = new SequencingResult();\n\n    // Set current activity as abandoned\n    currentActivity.isActive = false;\n    this.activityTree.currentActivity = currentActivity.parent;\n\n    return result;\n  }\n\n  /**\n   * Abandon All Sequencing Request Process\n   * @return {SequencingResult}\n   */\n  private abandonAllSequencingRequestProcess(): SequencingResult {\n    const result = new SequencingResult();\n\n    // Abandon all activities\n    this.activityTree.currentActivity = null;\n\n    return result;\n  }\n\n  /**\n   * Suspend All Sequencing Request Process\n   * @param {Activity} currentActivity - The current activity\n   * @return {SequencingResult}\n   */\n  private suspendAllSequencingRequestProcess(currentActivity: Activity): SequencingResult {\n    const result = new SequencingResult();\n\n    // Check if suspend is allowed\n    if (currentActivity !== this.activityTree.root) {\n      currentActivity.isSuspended = true;\n      this.activityTree.suspendedActivity = currentActivity;\n      this.activityTree.currentActivity = null;\n    } else {\n      result.exception = \"SB.2.15-1\"; // Cannot suspend root\n    }\n\n    return result;\n  }\n\n  /**\n   * Retry Sequencing Request Process\n   * @param {Activity} currentActivity - The current activity\n   * @return {SequencingResult}\n   */\n  private retrySequencingRequestProcess(currentActivity: Activity): SequencingResult {\n    const result = new SequencingResult();\n\n    // Terminate current activity\n    this.terminateDescendentAttemptsProcess(currentActivity);\n\n    // Increment attempt count\n    currentActivity.incrementAttemptCount();\n\n    // Deliver the activity again\n    result.deliveryRequest = DeliveryRequestType.DELIVER;\n    result.targetActivity = currentActivity;\n    return result;\n  }\n\n  /**\n   * Retry All Sequencing Request Process\n   * @return {SequencingResult}\n   */\n  private retryAllSequencingRequestProcess(): SequencingResult {\n    // Clear current activity to allow restart\n    this.activityTree.currentActivity = null;\n    \n    // Restart from the root\n    return this.startSequencingRequestProcess();\n  }\n\n  /**\n   * Ensure selection and randomization is applied to an activity\n   * @param {Activity} activity - The activity to process\n   */\n  private ensureSelectionAndRandomization(activity: Activity): void {\n    // Check if processing is needed\n    if (activity.getAvailableChildren() === activity.children && \n        (SelectionRandomization.isSelectionNeeded(activity) || \n         SelectionRandomization.isRandomizationNeeded(activity))) {\n      SelectionRandomization.applySelectionAndRandomization(activity, activity.isNewAttempt);\n    }\n  }\n\n  /**\n   * Flow Activity Traversal Subprocess (SB.2.2)\n   * Checks if an activity can be delivered and flows into clusters if needed\n   */\n  private flowActivityTraversalSubprocess(\n    activity: Activity,\n    _direction: boolean,\n    considerChildren: boolean,\n    mode: FlowSubprocessMode,\n  ): Activity | null {\n    // Check if the activity is available\n    if (!activity.isAvailable) {\n      return null;\n    }\n\n    // Check sequencing control modes\n    const parent = activity.parent;\n    if (parent && !parent.sequencingControls.flow) {\n      return null;\n    }\n\n    // Activity is a cluster, try to flow into it to find a deliverable leaf\n    if (considerChildren) {\n      this.ensureSelectionAndRandomization(activity);\n      const availableChildren = activity.getAvailableChildren();\n      \n      for (const child of availableChildren) {\n        const deliverable = this.flowActivityTraversalSubprocess(\n          child,\n          mode === FlowSubprocessMode.FORWARD,\n          true,\n          mode\n        );\n        if (deliverable) {\n          return deliverable;\n        }\n      }\n    }\n\n    // If activity is a leaf (no children), check if it can be delivered\n    if (activity.children.length === 0) {\n      // Check if this activity was intended to be a cluster but is empty\n      // A cluster typically has flow control enabled\n      if (activity.sequencingControls.flow) {\n        // This appears to be an empty cluster, not a true leaf\n        return null;\n      }\n      \n      if (this.checkActivityProcess(activity)) {\n        return activity;\n      }\n      return null;\n    }\n\n    return null;\n  }\n\n  /**\n   * Check Activity Process (SB.2.3)\n   * Validates if an activity can be delivered\n   */\n  private checkActivityProcess(activity: Activity): boolean {\n    // Check if activity is available\n    if (!activity.isAvailable) {\n      return false;\n    }\n\n    // Check limit conditions (UP.1)\n    if (this.limitConditionsCheckProcess(activity)) {\n      return false; // Activity violates limit conditions\n    }\n\n    // Check pre-condition rules using UP.2\n    const preConditionResult = this.sequencingRulesCheckProcess(\n      activity, \n      activity.sequencingRules.preConditionRules\n    );\n    \n    return preConditionResult !== RuleActionType.SKIP && \n           preConditionResult !== RuleActionType.DISABLED;\n  }\n\n  /**\n   * Terminate Descendent Attempts Process (SB.2.4)\n   * Ends attempts on an activity and its descendants\n   */\n  private terminateDescendentAttemptsProcess(activity: Activity, skipExitRules: boolean = false): void {\n    // Apply Exit Action Rules (TB.2.1) first to check for exit actions\n    let exitAction = null;\n    if (!skipExitRules) {\n      exitAction = this.exitActionRulesSubprocess(activity);\n    }\n\n    // End attempt on the activity\n    activity.isActive = false;\n\n    // Recursively terminate descendants\n    // Use all children here, not just available ones, since we need to terminate all\n    for (const child of activity.children) {\n      this.terminateDescendentAttemptsProcess(child, skipExitRules);\n    }\n\n    // Process deferred exit actions after termination to avoid recursion\n    if (exitAction && !skipExitRules) {\n      this.processDeferredExitAction(exitAction, activity);\n    }\n  }\n\n  /**\n   * Exit Action Rules Subprocess (TB.2.1)\n   * Evaluates the exit condition rules for an activity\n   * @param {Activity} activity - The activity to evaluate exit rules for\n   * @return {RuleActionType | null} - The exit action to process, if any\n   * @private\n   */\n  private exitActionRulesSubprocess(activity: Activity): RuleActionType | null {\n    // Evaluate exit condition rules using UP.2\n    const exitAction = this.sequencingRulesCheckProcess(\n      activity,\n      activity.sequencingRules.exitConditionRules\n    );\n\n    // Only certain actions are valid for exit condition rules\n    if (exitAction === RuleActionType.EXIT || \n        exitAction === RuleActionType.EXIT_PARENT || \n        exitAction === RuleActionType.EXIT_ALL) {\n      return exitAction;\n    }\n\n    return null;\n  }\n\n  /**\n   * Process deferred exit action after termination\n   * @param {RuleActionType} exitAction - The exit action to process\n   * @param {Activity} activity - The activity that triggered the exit action\n   * @private\n   */\n  private processDeferredExitAction(exitAction: RuleActionType, activity: Activity): void {\n    switch (exitAction) {\n      case RuleActionType.EXIT:\n        // Exit terminates the current attempt on the activity\n        // Already handled by terminateDescendentAttemptsProcess\n        break;\n      \n      case RuleActionType.EXIT_PARENT:\n        // Exit parent terminates the current attempt on the parent activity\n        if (activity.parent && activity.parent.isActive) {\n          this.terminateDescendentAttemptsProcess(activity.parent, true);\n        }\n        break;\n      \n      case RuleActionType.EXIT_ALL:\n        // Exit all terminates all activities\n        if (this.activityTree.root && this.activityTree.root !== activity) {\n          // Only process if we haven't already terminated the root\n          const allActivities = this.activityTree.getAllActivities();\n          const anyActive = allActivities.some(a => a.isActive);\n          if (anyActive) {\n            this.terminateDescendentAttemptsProcess(this.activityTree.root, true);\n          }\n        }\n        break;\n    }\n  }\n\n  /**\n   * Post Condition Rules Subprocess (TB.2.2)\n   * Evaluates the post-condition rules for an activity after delivery\n   * @param {Activity} activity - The activity to evaluate post-condition rules for\n   * @return {RuleActionType | null} - The action to take, if any\n   * @private\n   */\n  private postConditionRulesSubprocess(activity: Activity): RuleActionType | null {\n    // Evaluate post-condition rules using UP.2\n    const postAction = this.sequencingRulesCheckProcess(\n      activity,\n      activity.sequencingRules.postConditionRules\n    );\n\n    // Only certain actions are valid for post-condition rules\n    const validActions = [\n      RuleActionType.EXIT_PARENT,\n      RuleActionType.EXIT_ALL,\n      RuleActionType.RETRY,\n      RuleActionType.RETRY_ALL,\n      RuleActionType.CONTINUE,\n      RuleActionType.PREVIOUS\n    ];\n\n    if (postAction && validActions.includes(postAction)) {\n      return postAction;\n    }\n\n    return null;\n  }\n\n  /**\n   * Limit Conditions Check Process (UP.1)\n   * Checks if an activity has exceeded its limit conditions (attempt limit or duration limits)\n   * @param {Activity} activity - The activity to check\n   * @return {boolean} - True if limit conditions are violated, false otherwise\n   * @private\n   */\n  private limitConditionsCheckProcess(activity: Activity): boolean {\n    // Check attempt limit\n    if (activity.attemptLimit !== null && activity.attemptCount >= activity.attemptLimit) {\n      return true; // Attempt limit exceeded\n    }\n\n    // Check attempt absolute duration limit\n    if (activity.attemptAbsoluteDurationLimit !== null) {\n      const attemptDurationMs = this.parseISO8601Duration(activity.attemptExperiencedDuration);\n      const attemptLimitMs = this.parseISO8601Duration(activity.attemptAbsoluteDurationLimit);\n      \n      if (attemptDurationMs >= attemptLimitMs) {\n        return true; // Attempt duration limit exceeded\n      }\n    }\n\n    // Check activity absolute duration limit\n    if (activity.activityAbsoluteDurationLimit !== null) {\n      const activityDurationMs = this.parseISO8601Duration(activity.activityExperiencedDuration);\n      const activityLimitMs = this.parseISO8601Duration(activity.activityAbsoluteDurationLimit);\n      \n      if (activityDurationMs >= activityLimitMs) {\n        return true; // Activity duration limit exceeded\n      }\n    }\n\n    return false; // No limit conditions violated\n  }\n\n  /**\n   * Parse ISO 8601 duration to milliseconds\n   * @param {string} duration - ISO 8601 duration string\n   * @return {number} - Duration in milliseconds\n   * @private\n   */\n  private parseISO8601Duration(duration: string): number {\n    const regex = /PT(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?/;\n    const matches = duration.match(regex);\n\n    if (!matches) {\n      return 0;\n    }\n\n    const hours = parseInt(matches[1] || \"0\", 10);\n    const minutes = parseInt(matches[2] || \"0\", 10);\n    const seconds = parseFloat(matches[3] || \"0\");\n\n    return (hours * 3600 + minutes * 60 + seconds) * 1000;\n  }\n\n  /**\n   * Sequencing Rules Check Process (UP.2)\n   * General process for evaluating a set of sequencing rules\n   * @param {Activity} activity - The activity to evaluate rules for\n   * @param {SequencingRule[]} rules - The rules to evaluate\n   * @return {RuleActionType | null} - The action to take, or null if no rules apply\n   * @private\n   */\n  private sequencingRulesCheckProcess(activity: Activity, rules: SequencingRule[]): RuleActionType | null {\n    // Evaluate each rule in order\n    for (const rule of rules) {\n      // Use the Sequencing Rules Check Subprocess (UP.2.1) to evaluate\n      if (this.sequencingRulesCheckSubprocess(activity, rule)) {\n        // Rule condition(s) met, return the action\n        return rule.action;\n      }\n    }\n    \n    // No rules applied\n    return null;\n  }\n\n  /**\n   * Sequencing Rules Check Subprocess (UP.2.1)\n   * Evaluates individual sequencing rule conditions\n   * @param {Activity} activity - The activity to evaluate the rule for\n   * @param {SequencingRule} rule - The rule to evaluate\n   * @return {boolean} - True if all rule conditions are met\n   * @private\n   */\n  private sequencingRulesCheckSubprocess(activity: Activity, rule: SequencingRule): boolean {\n    // If no conditions, the rule always applies\n    if (rule.conditions.length === 0) {\n      return true;\n    }\n\n    // Evaluate based on condition combination\n    const conditionCombination = rule.conditionCombination;\n    \n    if (conditionCombination === \"all\" || conditionCombination === RuleConditionOperator.AND) {\n      // All conditions must be true\n      return rule.conditions.every((condition) => {\n        const result = condition.evaluate(activity);\n        // Log evaluation for debugging\n        if (!result) {\n          // Condition failed, rule doesn't apply\n          return false;\n        }\n        return true;\n      });\n    } else if (conditionCombination === \"any\" || conditionCombination === RuleConditionOperator.OR) {\n      // At least one condition must be true\n      return rule.conditions.some((condition) => {\n        const result = condition.evaluate(activity);\n        // Log evaluation for debugging\n        if (result) {\n          // Condition passed, rule applies\n          return true;\n        }\n        return false;\n      });\n    }\n\n    // Unknown combination, default to false\n    return false;\n  }\n\n  /**\n   * Check if activity is in the activity tree\n   */\n  private isActivityInTree(activity: Activity): boolean {\n    return this.activityTree.getAllActivities().includes(activity);\n  }\n\n  /**\n   * Find common ancestor of two activities\n   */\n  private findCommonAncestor(activity1: Activity | null, activity2: Activity | null): Activity | null {\n    if (!activity1 || !activity2) {\n      return null;\n    }\n\n    // Get ancestors of activity1\n    const ancestors1: Activity[] = [];\n    let current: Activity | null = activity1;\n    while (current) {\n      ancestors1.push(current);\n      current = current.parent;\n    }\n\n    // Find first common ancestor\n    current = activity2;\n    while (current) {\n      if (ancestors1.includes(current)) {\n        return current;\n      }\n      current = current.parent;\n    }\n\n    return null;\n  }\n\n  /**\n   * Flow Subprocess (SB.2.3)\n   * Traverses the activity tree in the specified direction to find a deliverable activity\n   * @param {Activity} fromActivity - The activity to flow from\n   * @param {FlowSubprocessMode} direction - The flow direction\n   * @return {Activity | null} - The next deliverable activity, or null if none found\n   */\n  private flowSubprocess(fromActivity: Activity, direction: FlowSubprocessMode): Activity | null {\n    let candidateActivity: Activity | null = fromActivity;\n    let firstIteration = true;\n\n    // Keep traversing until we find a deliverable activity or run out of candidates\n    while (candidateActivity) {\n      // Get next candidate using flow tree traversal\n      // On first iteration, we want to skip the current activity's children\n      const nextCandidate = this.flowTreeTraversalSubprocess(\n        candidateActivity,\n        direction,\n        firstIteration\n      );\n\n      if (!nextCandidate) {\n        // No more candidates\n        return null;\n      }\n\n      // Check if this candidate can be delivered\n      const deliverable = this.flowActivityTraversalSubprocess(\n        nextCandidate,\n        direction === FlowSubprocessMode.FORWARD,\n        true, // consider children\n        direction\n      );\n\n      if (deliverable) {\n        return deliverable;\n      }\n\n      // Continue with next candidate\n      candidateActivity = nextCandidate;\n      firstIteration = false;\n    }\n\n    return null;\n  }\n\n\n  /**\n   * Flow Tree Traversal Subprocess (SB.2.1)\n   * Traverses the activity tree to find the next activity in the specified direction\n   * @param {Activity} fromActivity - The activity to traverse from\n   * @param {FlowSubprocessMode} direction - The traversal direction\n   * @param {boolean} skipChildren - Whether to skip checking children (for continuing from current)\n   * @return {Activity | null} - The next activity in the tree, or null if none\n   */\n  private flowTreeTraversalSubprocess(\n    fromActivity: Activity,\n    direction: FlowSubprocessMode,\n    skipChildren: boolean = false\n  ): Activity | null {\n    if (direction === FlowSubprocessMode.FORWARD) {\n      // First, check if activity has children (unless we're skipping them)\n      if (!skipChildren) {\n        this.ensureSelectionAndRandomization(fromActivity);\n        const children = fromActivity.getAvailableChildren();\n        if (children.length > 0) {\n          return children[0] || null;\n        }\n      }\n\n      // No children, try to get next sibling\n      let current: Activity | null = fromActivity;\n      while (current) {\n        const nextSibling = this.activityTree.getNextSibling(current);\n        if (nextSibling) {\n          return nextSibling;\n        }\n        // No next sibling, move up to parent\n        current = current.parent;\n      }\n    } else {\n      // Backward direction\n      // Try to get previous sibling\n      const previousSibling = this.activityTree.getPreviousSibling(fromActivity);\n      if (previousSibling) {\n        // If previous sibling has children, go to the last descendant\n        let lastDescendant = previousSibling;\n        while (true) {\n          this.ensureSelectionAndRandomization(lastDescendant);\n          const children = lastDescendant.getAvailableChildren();\n          if (children.length === 0) {\n            break;\n          }\n          const lastChild = children[children.length - 1];\n          if (!lastChild) break;\n          lastDescendant = lastChild;\n        }\n        return lastDescendant;\n      }\n\n      // No previous sibling at this level, try going up to parent and then its previous sibling\n      let current: Activity | null = fromActivity;\n      while (current && current.parent) {\n        const parentPreviousSibling = this.activityTree.getPreviousSibling(current.parent);\n        if (parentPreviousSibling) {\n          // Found a previous sibling of an ancestor, go to its last descendant\n          let lastDescendant = parentPreviousSibling;\n          while (true) {\n            this.ensureSelectionAndRandomization(lastDescendant);\n            const children = lastDescendant.getAvailableChildren();\n            if (children.length === 0) {\n              break;\n            }\n            const lastChild = children[children.length - 1];\n            if (!lastChild) break;\n            lastDescendant = lastChild;\n          }\n          return lastDescendant;\n        }\n        // Move up to grandparent\n        current = current.parent;\n      }\n\n      return null; // Reached beginning of tree\n    }\n\n    return null;\n  }\n\n  /**\n   * Choice Flow Subprocess (SB.2.9.1)\n   * Handles the flow logic specific to choice navigation requests\n   * @param {Activity} targetActivity - The target activity for the choice\n   * @param {Activity | null} commonAncestor - The common ancestor between current and target\n   * @return {Activity | null} - The activity to deliver, or null if flow fails\n   */\n  private choiceFlowSubprocess(\n    targetActivity: Activity,\n    commonAncestor: Activity | null\n  ): Activity | null {\n    // If target is a leaf, it's the delivery candidate\n    if (targetActivity.children.length === 0) {\n      return targetActivity;\n    }\n\n    // If target is a cluster, use choice flow tree traversal\n    return this.choiceFlowTreeTraversalSubprocess(targetActivity);\n  }\n\n  /**\n   * Choice Flow Tree Traversal Subprocess (SB.2.9.2)\n   * Traverses into a cluster activity to find a leaf for delivery\n   * @param {Activity} fromActivity - The cluster activity to traverse from\n   * @return {Activity | null} - A leaf activity for delivery, or null if none found\n   */\n  private choiceFlowTreeTraversalSubprocess(fromActivity: Activity): Activity | null {\n    // Apply selection and randomization\n    this.ensureSelectionAndRandomization(fromActivity);\n    const children = fromActivity.getAvailableChildren();\n\n    // Find the first available child that can be delivered\n    for (const child of children) {\n      // Check if child can be delivered or traverse into it\n      const deliverable = this.choiceActivityTraversalSubprocess(child);\n      if (deliverable) {\n        return deliverable;\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Choice Activity Traversal Subprocess (SB.2.4)\n   * Checks constraints and traverses into activities for choice navigation\n   * @param {Activity} activity - The activity to check and possibly traverse\n   * @return {Activity | null} - A deliverable activity, or null if none found\n   */\n  private choiceActivityTraversalSubprocess(activity: Activity): Activity | null {\n    // Check if activity is available\n    if (!activity.isAvailable) {\n      return null;\n    }\n\n    // Check if activity is hidden from choice\n    if (activity.isHiddenFromChoice) {\n      return null;\n    }\n\n    // Check constrain choice control\n    if (activity.parent && activity.parent.sequencingControls.constrainChoice) {\n      // Additional constraint checks can be added here\n      // For now, we'll allow the choice if not hidden\n    }\n\n    // If it's a leaf, check if it can be delivered\n    if (activity.children.length === 0) {\n      if (this.checkActivityProcess(activity)) {\n        return activity;\n      }\n      return null;\n    }\n\n    // If it's a cluster, traverse into it\n    return this.choiceFlowTreeTraversalSubprocess(activity);\n  }\n\n  /**\n   * Evaluate post-condition rules for the current activity\n   * This should be called after an activity has been delivered and the learner has interacted with it\n   * @param {Activity} activity - The activity to evaluate\n   * @return {SequencingRequestType | null} - The sequencing request to process, if any\n   */\n  public evaluatePostConditionRules(activity: Activity): SequencingRequestType | null {\n    const postAction = this.postConditionRulesSubprocess(activity);\n    \n    if (!postAction) {\n      return null;\n    }\n\n    // Map post-condition actions to sequencing requests\n    switch (postAction) {\n      case RuleActionType.EXIT_PARENT:\n        // Exit parent will be handled by exit action rules\n        return SequencingRequestType.EXIT;\n        \n      case RuleActionType.EXIT_ALL:\n        return SequencingRequestType.EXIT_ALL;\n        \n      case RuleActionType.RETRY:\n        return SequencingRequestType.RETRY;\n        \n      case RuleActionType.RETRY_ALL:\n        return SequencingRequestType.RETRY_ALL;\n        \n      case RuleActionType.CONTINUE:\n        return SequencingRequestType.CONTINUE;\n        \n      case RuleActionType.PREVIOUS:\n        return SequencingRequestType.PREVIOUS;\n        \n      default:\n        return null;\n    }\n  }\n}\n\n/**\n * Enum for flow subprocess modes\n */\nenum FlowSubprocessMode {\n  FORWARD = \"forward\",\n  BACKWARD = \"backward\",\n}","import { BaseCMI } from \"../../common/base_cmi\";\nimport { Activity } from \"./activity\";\nimport { ActivityTree } from \"./activity_tree\";\nimport { SequencingRules } from \"./sequencing_rules\";\nimport { SequencingControls } from \"./sequencing_controls\";\nimport { RollupRules } from \"./rollup_rules\";\nimport { ADLNav } from \"../adl\";\nimport { Scorm2004ValidationError } from \"../../../exceptions/scorm2004_exceptions\";\nimport { scorm2004_errors } from \"../../../constants/error_codes\";\nimport {\n  SequencingProcess,\n  SequencingRequestType,\n  SequencingResult,\n  DeliveryRequestType,\n} from \"./sequencing_process\";\n\n/**\n * Class representing SCORM 2004 sequencing\n */\nexport class Sequencing extends BaseCMI {\n  private _activityTree: ActivityTree;\n  private _sequencingRules: SequencingRules;\n  private _sequencingControls: SequencingControls;\n  private _rollupRules: RollupRules;\n  private _adlNav: ADLNav | null = null;\n  private _sequencingProcess: SequencingProcess | null = null;\n  private _lastSequencingResult: SequencingResult | null = null;\n\n  /**\n   * Constructor for Sequencing\n   */\n  constructor() {\n    super(\"sequencing\");\n    this._activityTree = new ActivityTree();\n    this._sequencingRules = new SequencingRules();\n    this._sequencingControls = new SequencingControls();\n    this._rollupRules = new RollupRules();\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this._activityTree.initialize();\n    this._sequencingRules.initialize();\n    this._sequencingControls.initialize();\n    this._rollupRules.initialize();\n    \n    // Initialize sequencing process if ADL Nav is available\n    if (this._adlNav) {\n      this._sequencingProcess = new SequencingProcess(\n        this._activityTree,\n        this._sequencingRules,\n        this._sequencingControls,\n        this._adlNav,\n      );\n    }\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._activityTree.reset();\n    this._sequencingRules.reset();\n    this._sequencingControls.reset();\n    this._rollupRules.reset();\n  }\n\n  /**\n   * Getter for activityTree\n   * @return {ActivityTree}\n   */\n  get activityTree(): ActivityTree {\n    return this._activityTree;\n  }\n\n  /**\n   * Setter for activityTree\n   * @param {ActivityTree} activityTree\n   */\n  set activityTree(activityTree: ActivityTree) {\n    // noinspection SuspiciousTypeOfGuard\n    if (!(activityTree instanceof ActivityTree)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".activityTree\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n    this._activityTree = activityTree;\n  }\n\n  /**\n   * Getter for sequencingRules\n   * @return {SequencingRules}\n   */\n  get sequencingRules(): SequencingRules {\n    return this._sequencingRules;\n  }\n\n  /**\n   * Setter for sequencingRules\n   * @param {SequencingRules} sequencingRules\n   */\n  set sequencingRules(sequencingRules: SequencingRules) {\n    // noinspection SuspiciousTypeOfGuard\n    if (!(sequencingRules instanceof SequencingRules)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".sequencingRules\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n    this._sequencingRules = sequencingRules;\n  }\n\n  /**\n   * Getter for sequencingControls\n   * @return {SequencingControls}\n   */\n  get sequencingControls(): SequencingControls {\n    return this._sequencingControls;\n  }\n\n  /**\n   * Setter for sequencingControls\n   * @param {SequencingControls} sequencingControls\n   */\n  set sequencingControls(sequencingControls: SequencingControls) {\n    // noinspection SuspiciousTypeOfGuard\n    if (!(sequencingControls instanceof SequencingControls)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".sequencingControls\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n    this._sequencingControls = sequencingControls;\n  }\n\n  /**\n   * Getter for rollupRules\n   * @return {RollupRules}\n   */\n  get rollupRules(): RollupRules {\n    return this._rollupRules;\n  }\n\n  /**\n   * Setter for rollupRules\n   * @param {RollupRules} rollupRules\n   */\n  set rollupRules(rollupRules: RollupRules) {\n    // noinspection SuspiciousTypeOfGuard\n    if (!(rollupRules instanceof RollupRules)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".rollupRules\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n    this._rollupRules = rollupRules;\n  }\n\n  /**\n   * Getter for adlNav\n   * @return {ADLNav | null}\n   */\n  get adlNav(): ADLNav | null {\n    return this._adlNav;\n  }\n\n  /**\n   * Setter for adlNav\n   * @param {ADLNav | null} adlNav\n   */\n  set adlNav(adlNav: ADLNav | null) {\n    this._adlNav = adlNav;\n    \n    // Update sequencing process with new ADL Nav\n    if (adlNav) {\n      this._sequencingProcess = new SequencingProcess(\n        this._activityTree,\n        this._sequencingRules,\n        this._sequencingControls,\n        adlNav,\n      );\n    }\n  }\n\n  /**\n   * Get the last sequencing result\n   * @return {SequencingResult | null}\n   */\n  get lastSequencingResult(): SequencingResult | null {\n    return this._lastSequencingResult;\n  }\n\n  /**\n   * Process navigation request using the new sequencing process\n   * @param {string} request - The navigation request\n   * @param {string | null} targetActivityId - Target activity ID for choice/jump requests\n   * @return {boolean} - True if the request is valid and results in delivery, false otherwise\n   */\n  processNavigationRequest(request: string, targetActivityId: string | null = null): boolean {\n    if (!this._sequencingProcess || !this._adlNav) {\n      return false;\n    }\n\n    // Parse choice and jump requests to extract target\n    if (request.includes(\"choice\") && request.includes(\"{target=\")) {\n      const match = request.match(/\\{target=([^}]+)\\}/);\n      if (match) {\n        targetActivityId = match[1] || null;\n        request = \"choice\";\n      }\n    } else if (request.includes(\"jump\") && request.includes(\"{target=\")) {\n      const match = request.match(/\\{target=([^}]+)\\}/);\n      if (match) {\n        targetActivityId = match[1] || null;\n        request = \"jump\";\n      }\n    }\n\n    // Map string request to SequencingRequestType\n    let requestType: SequencingRequestType;\n    switch (request) {\n      case \"start\":\n        requestType = SequencingRequestType.START;\n        break;\n      case \"resumeAll\":\n        requestType = SequencingRequestType.RESUME_ALL;\n        break;\n      case \"continue\":\n        requestType = SequencingRequestType.CONTINUE;\n        break;\n      case \"previous\":\n        requestType = SequencingRequestType.PREVIOUS;\n        break;\n      case \"choice\":\n        requestType = SequencingRequestType.CHOICE;\n        break;\n      case \"jump\":\n        requestType = SequencingRequestType.JUMP;\n        break;\n      case \"exit\":\n        requestType = SequencingRequestType.EXIT;\n        break;\n      case \"exitAll\":\n        requestType = SequencingRequestType.EXIT_ALL;\n        break;\n      case \"abandon\":\n        requestType = SequencingRequestType.ABANDON;\n        break;\n      case \"abandonAll\":\n        requestType = SequencingRequestType.ABANDON_ALL;\n        break;\n      case \"suspendAll\":\n        requestType = SequencingRequestType.SUSPEND_ALL;\n        break;\n      case \"retry\":\n        requestType = SequencingRequestType.RETRY;\n        break;\n      case \"retryAll\":\n        requestType = SequencingRequestType.RETRY_ALL;\n        break;\n      default:\n        return false;\n    }\n\n    // Process the sequencing request\n    const result = this._sequencingProcess.sequencingRequestProcess(requestType, targetActivityId);\n    this._lastSequencingResult = result;\n\n    // Update navigation request validity\n    if (result.exception) {\n      // Don't modify _choice and _jump as they are target-specific objects\n      // Note: These setters may throw if already initialized, but that's expected behavior\n      try {\n        this._adlNav.request_valid.continue = \"false\";\n        this._adlNav.request_valid.previous = \"false\";\n      } catch (e) {\n        // Expected when already initialized - navigation validity is read-only after init\n      }\n      return false;\n    }\n\n    // Update navigation request validity based on current state\n    this.updateNavigationRequestValidity();\n\n    // Return true if delivery is requested\n    return result.deliveryRequest === DeliveryRequestType.DELIVER;\n  }\n\n  /**\n   * Update navigation request validity based on current state\n   */\n  private updateNavigationRequestValidity(): void {\n    if (!this._adlNav || !this._sequencingProcess) {\n      return;\n    }\n\n    // Check continue validity\n    const continueResult = this._sequencingProcess.sequencingRequestProcess(\n      SequencingRequestType.CONTINUE,\n    );\n    try {\n      this._adlNav.request_valid.continue = !continueResult.exception ? \"true\" : \"false\";\n    } catch (e) {\n      // Expected when already initialized - navigation validity is read-only after init\n    }\n\n    // Check previous validity\n    const previousResult = this._sequencingProcess.sequencingRequestProcess(\n      SequencingRequestType.PREVIOUS,\n    );\n    try {\n      this._adlNav.request_valid.previous = !previousResult.exception ? \"true\" : \"false\";\n    } catch (e) {\n      // Expected when already initialized - navigation validity is read-only after init\n    }\n\n    // Choice and jump are target-specific and handled separately\n    // They are objects that map target IDs to NAVBoolean values\n  }\n\n\n  /**\n   * Process rollup for the entire activity tree\n   */\n  processRollup(): void {\n    // Get the root activity\n    const root = this._activityTree.root;\n    if (!root) {\n      return;\n    }\n\n    // Process rollup from the bottom up\n    this._processRollupRecursive(root);\n  }\n\n\n  /**\n   * Process rollup recursively\n   * @param {Activity} activity - The activity to process rollup for\n   * @private\n   */\n  private _processRollupRecursive(activity: Activity): void {\n    // Process rollup for children first\n    for (const child of activity.children) {\n      this._processRollupRecursive(child);\n    }\n\n    // Process rollup for this activity\n    this._rollupRules.processRollup(activity);\n  }\n\n  /**\n   * Get the last sequencing result\n   * @return {SequencingResult | null}\n   */\n  getLastSequencingResult(): SequencingResult | null {\n    return this._lastSequencingResult;\n  }\n\n  /**\n   * Get the current activity\n   * @return {Activity | null}\n   */\n  getCurrentActivity(): Activity | null {\n    return this._activityTree.currentActivity;\n  }\n\n  /**\n   * Get the root activity\n   * @return {Activity | null}\n   */\n  getRootActivity(): Activity | null {\n    return this._activityTree.root;\n  }\n\n  /**\n   * toJSON for Sequencing\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      activityTree: this._activityTree,\n      sequencingRules: this._sequencingRules,\n      sequencingControls: this._sequencingControls,\n      rollupRules: this._rollupRules,\n      adlNav: this._adlNav,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import BaseAPI from \"./BaseAPI\";\nimport { CMI } from \"./cmi/scorm2004/cmi\";\nimport * as Utilities from \"./utilities\";\nimport { StringKeyMap, stringMatches } from \"./utilities\";\nimport { global_constants, scorm2004_constants } from \"./constants/api_constants\";\nimport { scorm2004_errors } from \"./constants/error_codes\";\nimport { CMIObjectivesObject } from \"./cmi/scorm2004/objectives\";\nimport { ADL, ADLDataObject } from \"./cmi/scorm2004/adl\";\nimport { CommitObject, ResultObject, ScoreObject, Settings } from \"./types/api_types\";\nimport {\n  ActivitySettings,\n  RollupRuleSettings,\n  RollupRulesSettings,\n  SequencingControlsSettings,\n  SequencingRuleSettings,\n  SequencingRulesSettings,\n  SequencingSettings,\n} from \"./types/sequencing_types\";\nimport { RuleCondition, SequencingRule } from \"./cmi/scorm2004/sequencing/sequencing_rules\";\nimport { RollupCondition, RollupRule } from \"./cmi/scorm2004/sequencing/rollup_rules\";\nimport { scorm2004_regex } from \"./constants/regex\"; // Import functions from extracted modules\nimport { BaseCMI } from \"./cmi/common/base_cmi\";\nimport {\n  CMIInteractionsCorrectResponsesObject,\n  CMIInteractionsObject,\n  CMIInteractionsObjectivesObject,\n} from \"./cmi/scorm2004/interactions\";\nimport { CMIArray } from \"./cmi/common/array\";\nimport { CorrectResponses, ResponseType } from \"./constants/response_constants\";\nimport { CMICommentsObject } from \"./cmi/scorm2004/comments\";\nimport ValidLanguages from \"./constants/language_constants\";\nimport { CompletionStatus, SuccessStatus } from \"./constants/enums\";\nimport { Sequencing } from \"./cmi/scorm2004/sequencing/sequencing\";\nimport { Activity } from \"./cmi/scorm2004/sequencing/activity\";\n\n/**\n * API class for SCORM 2004\n */\nclass Scorm2004API extends BaseAPI {\n  private _version: string = \"1.0\";\n  private _globalObjectives: CMIObjectivesObject[] = [];\n  private readonly _sequencing: Sequencing;\n  private _extractedScoItemIds: string[] = [];\n\n  /**\n   * Constructor for SCORM 2004 API\n   * @param {Settings} settings\n   */\n  constructor(settings?: Settings) {\n    if (settings) {\n      if (settings.mastery_override === undefined) {\n        settings.mastery_override = false;\n      }\n    }\n\n    super(scorm2004_errors, settings);\n\n    this.cmi = new CMI();\n    this.adl = new ADL();\n    this._sequencing = new Sequencing();\n\n    // Connect the sequencing object to the ADL's sequencing property\n    // The Sequencing object is used for both configuration and runtime navigation processing\n    // It needs to be attached to the ADL object for runtime navigation requests (adl.nav.request)\n    this.adl.sequencing = this._sequencing;\n\n    // Configure sequencing if settings are provided\n    if (settings?.sequencing) {\n      this.configureSequencing(settings.sequencing);\n    }\n\n    // Rename functions to match 2004 Spec and expose to modules\n    this.Initialize = this.lmsInitialize;\n    this.Terminate = this.lmsFinish;\n    this.GetValue = this.lmsGetValue;\n    this.SetValue = this.lmsSetValue;\n    this.Commit = this.lmsCommit;\n    this.GetLastError = this.lmsGetLastError;\n    this.GetErrorString = this.lmsGetErrorString;\n    this.GetDiagnostic = this.lmsGetDiagnostic;\n  }\n\n  public cmi: CMI;\n  public adl: ADL;\n\n  public Initialize: () => string;\n  public Terminate: () => string;\n  public GetValue: (CMIElement: string) => string;\n  public SetValue: (CMIElement: string, value: any) => string;\n  public Commit: () => string;\n  public GetLastError: () => string;\n  public GetErrorString: (CMIErrorCode: string | number) => string;\n  public GetDiagnostic: (CMIErrorCode: string | number) => string;\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset(settings?: Settings) {\n    this.commonReset(settings);\n\n    this.cmi?.reset();\n    this.adl?.reset();\n    this._sequencing?.reset();\n  }\n\n  /**\n   * Getter for _version\n   * @return {string}\n   */\n  get version(): string {\n    return this._version;\n  }\n\n  /**\n   * Getter for _globalObjectives\n   */\n  get globalObjectives(): CMIObjectivesObject[] {\n    return this._globalObjectives;\n  }\n\n  /**\n   * Initialize function from SCORM 2004 Spec\n   *\n   * @return {string} bool\n   */\n  lmsInitialize(): string {\n    this.cmi.initialize();\n    return this.initialize(\n      \"Initialize\",\n      \"LMS was already initialized!\",\n      \"LMS is already finished!\",\n    );\n  }\n\n  /**\n   * Terminate function from SCORM 2004 Spec\n   *\n   * @return {string} bool\n   */\n  lmsFinish(): string {\n    (async () => {\n      await this.internalFinish();\n    })();\n    return global_constants.SCORM_TRUE;\n  }\n\n  async internalFinish(): Promise<string> {\n    const result = await this.terminate(\"Terminate\", true);\n\n    if (result === global_constants.SCORM_TRUE) {\n      if (this.adl.nav.request !== \"_none_\") {\n        const navActions: { [key: string]: string } = {\n          continue: \"SequenceNext\",\n          previous: \"SequencePrevious\",\n          choice: \"SequenceChoice\",\n          jump: \"SequenceJump\",\n          exit: \"SequenceExit\",\n          exitAll: \"SequenceExitAll\",\n          abandon: \"SequenceAbandon\",\n          abandonAll: \"SequenceAbandonAll\",\n        };\n\n        let request = this.adl.nav.request;\n        const choiceJumpRegex = new RegExp(scorm2004_regex.NAVEvent);\n        const matches = request.match(choiceJumpRegex);\n        let target = \"\";\n        if (matches) {\n          if (matches.groups?.choice_target) {\n            target = matches.groups?.choice_target;\n            request = \"choice\";\n          } else if (matches.groups?.jump_target) {\n            target = matches.groups?.jump_target;\n            request = \"jump\";\n          }\n        }\n        const action = navActions[request];\n        if (action) {\n          this.processListeners(action, \"adl.nav.request\", target);\n        }\n      } else if (this.settings.autoProgress) {\n        this.processListeners(\"SequenceNext\", undefined, \"next\");\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * GetValue function from SCORM 2004 Spec\n   *\n   * @param {string} CMIElement\n   * @return {string}\n   */\n  lmsGetValue(CMIElement: string): string {\n    const adlNavRequestRegex =\n      \"^adl\\\\.nav\\\\.request_valid\\\\.(choice|jump)\\\\.{target=\\\\S{0,}([a-zA-Z0-9-_]+)}$\";\n    if (stringMatches(CMIElement, adlNavRequestRegex)) {\n      const matches = CMIElement.match(adlNavRequestRegex);\n      if (matches) {\n        const request = matches[1];\n        const target = matches[2]?.replace(/{target=/g, \"\").replace(/}/g, \"\") || \"\";\n        if (request === \"choice\" || request === \"jump\") {\n          if (this.settings.scoItemIdValidator) {\n            return String(this.settings.scoItemIdValidator(target));\n          }\n          // If we have extracted IDs from sequencing, use those exclusively\n          if (this._extractedScoItemIds.length > 0) {\n            return String(this._extractedScoItemIds.includes(target));\n          }\n          // Otherwise use the scoItemIds from settings\n          return String(this.settings?.scoItemIds?.includes(target));\n        }\n      }\n    }\n    return this.getValue(\"GetValue\", true, CMIElement);\n  }\n\n  /**\n   * SetValue function from SCORM 2004 Spec\n   *\n   * @param {string} CMIElement\n   * @param {any} value\n   * @return {string}\n   */\n  lmsSetValue(CMIElement: string, value: any): string {\n    // Proceed with regular setting for non-objective elements or fallback behavior\n    return this.setValue(\"SetValue\", \"Commit\", true, CMIElement, value);\n  }\n\n  /**\n   * Commit function from SCORM 2004 Spec\n   *\n   * @return {string} bool\n   */\n  lmsCommit(): string {\n    if (this.settings.asyncCommit) {\n      this.scheduleCommit(500, \"Commit\");\n    } else {\n      (async () => {\n        await this.commit(\"Commit\", false);\n      })();\n    }\n    return global_constants.SCORM_TRUE;\n  }\n\n  /**\n   * GetLastError function from SCORM 2004 Spec\n   *\n   * @return {string}\n   */\n  lmsGetLastError(): string {\n    return this.getLastError(\"GetLastError\");\n  }\n\n  /**\n   * GetErrorString function from SCORM 2004 Spec\n   *\n   * @param {(string|number)} CMIErrorCode\n   * @return {string}\n   */\n  lmsGetErrorString(CMIErrorCode: string | number): string {\n    return this.getErrorString(\"GetErrorString\", CMIErrorCode);\n  }\n\n  /**\n   * GetDiagnostic function from SCORM 2004 Spec\n   *\n   * @param {(string|number)} CMIErrorCode\n   * @return {string}\n   */\n  lmsGetDiagnostic(CMIErrorCode: string | number): string {\n    return this.getDiagnostic(\"GetDiagnostic\", CMIErrorCode);\n  }\n\n  /**\n   * Sets a value on the CMI Object - delegates to CMIValueHandlerModule\n   *\n   * @param {string} CMIElement\n   * @param {any} value\n   * @return {string}\n   */\n  override setCMIValue(CMIElement: string, value: any): string {\n    // Check if we're updating a global or local objective\n    if (stringMatches(CMIElement, \"cmi\\\\.objectives\\\\.\\\\d+\")) {\n      const parts = CMIElement.split(\".\");\n      const index = Number(parts[2]);\n      const element_base = `cmi.objectives.${index}`;\n\n      let objective_id;\n      const setting_id = stringMatches(CMIElement, \"cmi\\\\.objectives\\\\.\\\\d+\\\\.id\");\n\n      if (setting_id) {\n        // If we're setting the objective ID, capture it directly\n        objective_id = value;\n      } else {\n        // Find existing objective ID if available\n        const objective = this.cmi.objectives.findObjectiveByIndex(index);\n        objective_id = objective ? objective.id : undefined;\n      }\n\n      // Check if the objective ID matches a global objective\n      const is_global = objective_id && this.settings.globalObjectiveIds?.includes(objective_id);\n\n      if (is_global) {\n        // Locate or create an entry in _globalObjectives for the global objective\n        let global_index = this._globalObjectives.findIndex((obj) => obj.id === objective_id);\n\n        if (global_index === -1) {\n          global_index = this._globalObjectives.length;\n          const newGlobalObjective = new CMIObjectivesObject();\n          newGlobalObjective.id = objective_id;\n          this._globalObjectives.push(newGlobalObjective);\n        }\n\n        // Update the global objective\n        const global_element = CMIElement.replace(\n          element_base,\n          `_globalObjectives.${global_index}`,\n        );\n        this._commonSetCMIValue(\"SetGlobalObjectiveValue\", true, global_element, value);\n      }\n    }\n    return this._commonSetCMIValue(\"SetValue\", true, CMIElement, value);\n  }\n\n  /**\n   * Gets or builds a new child element to add to the array - delegates to CMIElementHandlerModule\n   *\n   * @param {string} CMIElement\n   * @param {any} value\n   * @param {boolean} foundFirstIndex\n   * @return {BaseCMI|null}\n   */\n  getChildElement(CMIElement: string, value: any, foundFirstIndex: boolean): BaseCMI | null {\n    if (stringMatches(CMIElement, \"cmi\\\\.objectives\\\\.\\\\d+\")) {\n      return new CMIObjectivesObject();\n    }\n\n    if (foundFirstIndex) {\n      if (stringMatches(CMIElement, \"cmi\\\\.interactions\\\\.\\\\d+\\\\.correct_responses\\\\.\\\\d+\")) {\n        return this.createCorrectResponsesObject(CMIElement, value);\n      } else if (stringMatches(CMIElement, \"cmi\\\\.interactions\\\\.\\\\d+\\\\.objectives\\\\.\\\\d+\")) {\n        return new CMIInteractionsObjectivesObject();\n      }\n    } else if (stringMatches(CMIElement, \"cmi\\\\.interactions\\\\.\\\\d+\")) {\n      return new CMIInteractionsObject();\n    }\n\n    if (stringMatches(CMIElement, \"cmi\\\\.comments_from_learner\\\\.\\\\d+\")) {\n      return new CMICommentsObject();\n    } else if (stringMatches(CMIElement, \"cmi\\\\.comments_from_lms\\\\.\\\\d+\")) {\n      return new CMICommentsObject(true);\n    }\n\n    if (stringMatches(CMIElement, \"adl\\\\.data\\\\.\\\\d+\")) {\n      return new ADLDataObject();\n    }\n\n    return null;\n  }\n\n  /**\n   * Creates a correct responses object for an interaction - delegates to CMIElementHandlerModule\n   *\n   * @param {string} CMIElement\n   * @param {any} value\n   * @return {BaseCMI|null}\n   */\n  private createCorrectResponsesObject(CMIElement: string, value: any): BaseCMI | null {\n    const parts = CMIElement.split(\".\");\n    const index = Number(parts[2]);\n    const interaction = this.cmi.interactions.childArray[index];\n\n    if (this.isInitialized()) {\n      if (typeof interaction === \"undefined\" || !interaction.type) {\n        this.throwSCORMError(CMIElement, scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED, CMIElement);\n        return null;\n      } else {\n        this.checkDuplicateChoiceResponse(CMIElement, interaction, value);\n        const response_type = CorrectResponses[interaction.type];\n        if (response_type) {\n          this.checkValidResponseType(CMIElement, response_type, value, interaction.type);\n        } else {\n          this.throwSCORMError(\n            CMIElement,\n            scorm2004_errors.GENERAL_SET_FAILURE,\n            `Incorrect Response Type: ${interaction.type}`,\n          );\n          return null;\n        }\n      }\n    }\n\n    if (this.lastErrorCode === \"0\") {\n      return new CMIInteractionsCorrectResponsesObject(interaction);\n    }\n\n    return null;\n  }\n\n  /**\n   * Checks for valid response types - delegates to ValidationModule\n   * @param {string} CMIElement\n   * @param {ResponseType} response_type\n   * @param {any} value\n   * @param {string} interaction_type\n   */\n  checkValidResponseType(\n    CMIElement: string,\n    response_type: ResponseType,\n    value: any,\n    interaction_type: string,\n  ) {\n    let nodes = [];\n    if (response_type?.delimiter) {\n      nodes = String(value).split(response_type.delimiter);\n    } else {\n      nodes[0] = value;\n    }\n\n    if (nodes.length > 0 && nodes.length <= response_type.max) {\n      this.checkCorrectResponseValue(CMIElement, interaction_type, nodes, value);\n    } else if (nodes.length > response_type.max) {\n      this.throwSCORMError(\n        CMIElement,\n        scorm2004_errors.GENERAL_SET_FAILURE,\n        `Data Model Element Pattern Too Long: ${value}`,\n      );\n    }\n  }\n\n  /**\n   * Checks for duplicate 'choice' responses - delegates to ValidationModule\n   * @param {string} CMIElement\n   * @param {CMIInteractionsObject} interaction\n   * @param {any} value\n   */\n  checkDuplicateChoiceResponse(CMIElement: string, interaction: CMIInteractionsObject, value: any) {\n    const interaction_count = interaction.correct_responses._count;\n    if (interaction.type === \"choice\") {\n      for (let i = 0; i < interaction_count && this.lastErrorCode === \"0\"; i++) {\n        const response = interaction.correct_responses.childArray[i];\n        if (response.pattern === value) {\n          this.throwSCORMError(CMIElement, scorm2004_errors.GENERAL_SET_FAILURE, `${value}`);\n        }\n      }\n    }\n  }\n\n  /**\n   * Validate correct response - delegates to ValidationModule\n   * @param {string} CMIElement\n   * @param {*} value\n   */\n  validateCorrectResponse(CMIElement: string, value: any) {\n    const parts = CMIElement.split(\".\");\n    const index = Number(parts[2]);\n    const pattern_index = Number(parts[4]);\n    const interaction = this.cmi.interactions.childArray[index];\n\n    const interaction_count = interaction.correct_responses._count;\n    this.checkDuplicateChoiceResponse(CMIElement, interaction, value);\n\n    const response_type = CorrectResponses[interaction.type];\n    if (\n      response_type &&\n      (typeof response_type.limit === \"undefined\" || interaction_count <= response_type.limit)\n    ) {\n      this.checkValidResponseType(CMIElement, response_type, value, interaction.type);\n\n      if (\n        (this.lastErrorCode === \"0\" &&\n          (!response_type.duplicate ||\n            !this.checkDuplicatedPattern(interaction.correct_responses, pattern_index, value))) ||\n        (this.lastErrorCode === \"0\" && value === \"\")\n      ) {\n        // do nothing, we want the inverse\n      } else {\n        if (this.lastErrorCode === \"0\") {\n          this.throwSCORMError(\n            CMIElement,\n            scorm2004_errors.GENERAL_SET_FAILURE,\n            `Data Model Element Pattern Already Exists: ${CMIElement} - ${value}`,\n          );\n        }\n      }\n    } else {\n      this.throwSCORMError(\n        CMIElement,\n        scorm2004_errors.GENERAL_SET_FAILURE,\n        `Data Model Element Collection Limit Reached: ${CMIElement} - ${value}`,\n      );\n    }\n  }\n\n  /**\n   * Gets a value from the CMI Object - delegates to CMIValueHandlerModule\n   *\n   * @param {string} CMIElement\n   * @return {*}\n   */\n  override getCMIValue(CMIElement: string): any {\n    return this._commonGetCMIValue(\"GetValue\", true, CMIElement);\n  }\n\n  /**\n   * Returns the message that corresponds to errorNumber.\n   *\n   * @param {(string|number)} errorNumber\n   * @param {boolean} detail\n   * @return {string}\n   */\n  override getLmsErrorMessageDetails(errorNumber: string | number, detail: boolean): string {\n    let basicMessage = \"\";\n    let detailMessage = \"\";\n\n    // Set error number to string since inconsistent from modules if string or number\n    errorNumber = String(errorNumber);\n    const errorDescription = scorm2004_constants.error_descriptions[errorNumber];\n    if (errorDescription) {\n      basicMessage = errorDescription.basicMessage;\n      detailMessage = errorDescription.detailMessage;\n    }\n\n    return detail ? detailMessage : basicMessage;\n  }\n\n  /**\n   * Check to see if a correct_response value has been duplicated - delegates to ValidationModule\n   * @param {CMIArray} correct_response\n   * @param {number} current_index\n   * @param {*} value\n   * @return {boolean}\n   */\n  checkDuplicatedPattern(correct_response: CMIArray, current_index: number, value: any): boolean {\n    let found = false;\n    const count = correct_response._count;\n    for (let i = 0; i < count && !found; i++) {\n      if (i !== current_index && correct_response.childArray[i] === value) {\n        found = true;\n      }\n    }\n    return found;\n  }\n\n  /**\n   * Checks for a valid correct_response value - delegates to ValidationModule\n   * @param {string} CMIElement\n   * @param {string} interaction_type\n   * @param {Array} nodes\n   * @param {*} value\n   */\n  checkCorrectResponseValue(\n    CMIElement: string,\n    interaction_type: string,\n    nodes: Array<any>,\n    value: any,\n  ) {\n    const response = CorrectResponses[interaction_type];\n    if (!response) {\n      this.throwSCORMError(\n        CMIElement,\n        scorm2004_errors.TYPE_MISMATCH,\n        `Incorrect Response Type: ${interaction_type}`,\n      );\n      return;\n    }\n    const formatRegex = new RegExp(response.format);\n    for (let i = 0; i < nodes.length && this.lastErrorCode === \"0\"; i++) {\n      if (interaction_type.match(\"^(fill-in|long-fill-in|matching|performance|sequencing)$\")) {\n        nodes[i] = this.removeCorrectResponsePrefixes(CMIElement, nodes[i]);\n      }\n\n      if (response?.delimiter2) {\n        const values = nodes[i].split(response.delimiter2);\n        if (values.length === 2) {\n          const matches = values[0].match(formatRegex);\n          if (!matches) {\n            this.throwSCORMError(\n              CMIElement,\n              scorm2004_errors.TYPE_MISMATCH,\n              `${interaction_type}: ${value}`,\n            );\n          } else {\n            if (!response.format2 || !values[1].match(new RegExp(response.format2))) {\n              this.throwSCORMError(\n                CMIElement,\n                scorm2004_errors.TYPE_MISMATCH,\n                `${interaction_type}: ${value}`,\n              );\n            }\n          }\n        } else {\n          this.throwSCORMError(\n            CMIElement,\n            scorm2004_errors.TYPE_MISMATCH,\n            `${interaction_type}: ${value}`,\n          );\n        }\n      } else {\n        const matches = nodes[i].match(formatRegex);\n        if ((!matches && value !== \"\") || (!matches && interaction_type === \"true-false\")) {\n          this.throwSCORMError(\n            CMIElement,\n            scorm2004_errors.TYPE_MISMATCH,\n            `${interaction_type}: ${value}`,\n          );\n        } else {\n          if (interaction_type === \"numeric\" && nodes.length > 1) {\n            if (Number(nodes[0]) > Number(nodes[1])) {\n              this.throwSCORMError(\n                CMIElement,\n                scorm2004_errors.TYPE_MISMATCH,\n                `${interaction_type}: ${value}`,\n              );\n            }\n          } else {\n            if (nodes[i] !== \"\" && response.unique) {\n              for (let j = 0; j < i && this.lastErrorCode === \"0\"; j++) {\n                if (nodes[i] === nodes[j]) {\n                  this.throwSCORMError(\n                    CMIElement,\n                    scorm2004_errors.TYPE_MISMATCH,\n                    `${interaction_type}: ${value}`,\n                  );\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Remove prefixes from correct_response - delegates to ValidationModule\n   * @param {string} CMIElement\n   * @param {string} node\n   * @return {*}\n   */\n  removeCorrectResponsePrefixes(CMIElement: string, node: string): any {\n    let seenOrder = false;\n    let seenCase = false;\n    let seenLang = false;\n\n    const prefixRegex = new RegExp(\"^({(lang|case_matters|order_matters)=([^}]+)})\");\n    let matches = node.match(prefixRegex);\n    let langMatches = null;\n    while (matches) {\n      switch (matches[2]) {\n        case \"lang\":\n          langMatches = node.match(scorm2004_regex.CMILangcr);\n          if (langMatches) {\n            const lang = langMatches[3];\n            if (lang !== undefined && lang.length > 0) {\n              if (!ValidLanguages.includes(lang.toLowerCase())) {\n                this.throwSCORMError(CMIElement, scorm2004_errors.TYPE_MISMATCH, `${node}`);\n              }\n            }\n          }\n          seenLang = true;\n          break;\n        case \"case_matters\":\n          if (!seenLang && !seenOrder && !seenCase) {\n            if (matches[3] !== \"true\" && matches[3] !== \"false\") {\n              this.throwSCORMError(CMIElement, scorm2004_errors.TYPE_MISMATCH, `${node}`);\n            }\n          }\n\n          seenCase = true;\n          break;\n        case \"order_matters\":\n          if (!seenCase && !seenLang && !seenOrder) {\n            if (matches[3] !== \"true\" && matches[3] !== \"false\") {\n              this.throwSCORMError(CMIElement, scorm2004_errors.TYPE_MISMATCH, `${node}`);\n            }\n          }\n\n          seenOrder = true;\n          break;\n      }\n      node = node.substring(matches[1]?.length || 0);\n      matches = node.match(prefixRegex);\n    }\n\n    return node;\n  }\n\n  /**\n   * Replace the whole API with another\n   * @param {Scorm2004API} newAPI\n   */\n  replaceWithAnotherScormAPI(newAPI: Scorm2004API) {\n    // Data Model\n    this.cmi = newAPI.cmi;\n    this.adl = newAPI.adl;\n  }\n\n  /**\n   * Render the cmi object to the proper format for LMS commit - delegates to DataSerializationModule\n   *\n   * @param {boolean} terminateCommit - Whether this is a termination commit\n   * @param {boolean} includeTotalTime - Whether to include total time in the commit data\n   * @return {object|Array}\n   */\n  renderCommitCMI(\n    terminateCommit: boolean,\n    includeTotalTime: boolean = false,\n  ): StringKeyMap | Array<any> {\n    const cmiExport: StringKeyMap = this.renderCMIToJSONObject();\n\n    if (terminateCommit || includeTotalTime) {\n      (cmiExport.cmi as any).total_time = (this.cmi as any).getCurrentTotalTime();\n    }\n\n    const result = [];\n    const flattened: StringKeyMap = Utilities.flatten(cmiExport);\n    switch (this.settings.dataCommitFormat) {\n      case \"flattened\":\n        return Utilities.flatten(cmiExport);\n      case \"params\":\n        for (const item in flattened) {\n          if ({}.hasOwnProperty.call(flattened, item)) {\n            result.push(`${item}=${flattened[item]}`);\n          }\n        }\n        return result;\n      case \"json\":\n      default:\n        return cmiExport;\n    }\n  }\n\n  /**\n   * Render the cmi object to the proper format for LMS commit - delegates to DataSerializationModule\n   * @param {boolean} terminateCommit - Whether this is a termination commit\n   * @param {boolean} includeTotalTime - Whether to include total time in the commit data\n   * @return {CommitObject}\n   */\n  renderCommitObject(terminateCommit: boolean, includeTotalTime: boolean = false): CommitObject {\n    const cmiExport = this.renderCommitCMI(terminateCommit, includeTotalTime);\n    const calculateTotalTime = terminateCommit || includeTotalTime;\n    const totalTimeDuration = calculateTotalTime ? this.cmi.getCurrentTotalTime() : \"\";\n    const totalTimeSeconds = Utilities.getDurationAsSeconds(\n      totalTimeDuration,\n      scorm2004_regex.CMITimespan,\n    );\n\n    let completionStatus = CompletionStatus.UNKNOWN;\n    let successStatus = SuccessStatus.UNKNOWN;\n    if (this.cmi.completion_status) {\n      if (this.cmi.completion_status === \"completed\") {\n        completionStatus = CompletionStatus.COMPLETED;\n      } else if (this.cmi.completion_status === \"incomplete\") {\n        completionStatus = CompletionStatus.INCOMPLETE;\n      }\n    }\n    if (this.cmi.success_status) {\n      if (this.cmi.success_status === \"passed\") {\n        successStatus = SuccessStatus.PASSED;\n      } else if (this.cmi.success_status === \"failed\") {\n        successStatus = SuccessStatus.FAILED;\n      }\n    }\n\n    const scoreObject: ScoreObject = this.cmi?.score?.getScoreObject() || {};\n    const commitObject: CommitObject = {\n      completionStatus: completionStatus,\n      successStatus: successStatus,\n      totalTimeSeconds: totalTimeSeconds,\n      runtimeData: cmiExport as StringKeyMap,\n    };\n    if (scoreObject) {\n      commitObject.score = scoreObject;\n    }\n    return commitObject;\n  }\n\n  /**\n   * Attempts to store the data to the LMS - delegates to DataSerializationModule\n   *\n   * @param {boolean} terminateCommit\n   * @return {ResultObject}\n   */\n  async storeData(terminateCommit: boolean): Promise<ResultObject> {\n    if (terminateCommit) {\n      if (this.cmi.mode === \"normal\") {\n        if (this.cmi.credit === \"credit\") {\n          if (this.cmi.completion_threshold && this.cmi.progress_measure) {\n            if (this.cmi.progress_measure >= this.cmi.completion_threshold) {\n              this.cmi.completion_status = \"completed\";\n            } else {\n              this.cmi.completion_status = \"incomplete\";\n            }\n          }\n          if (this.cmi.scaled_passing_score && this.cmi.score.scaled) {\n            if (this.cmi.score.scaled >= this.cmi.scaled_passing_score) {\n              this.cmi.success_status = \"passed\";\n            } else {\n              this.cmi.success_status = \"failed\";\n            }\n          }\n        }\n      }\n    }\n\n    let navRequest = false;\n    if (\n      this.adl.nav.request !==\n        ((this.startingData?.adl as StringKeyMap)?.nav as StringKeyMap)?.request &&\n      this.adl.nav.request !== \"_none_\"\n    ) {\n      navRequest = true;\n    }\n\n    const commitObject = this.getCommitObject(terminateCommit);\n    if (typeof this.settings.lmsCommitUrl === \"string\") {\n      const result = await this.processHttpRequest(\n        this.settings.lmsCommitUrl,\n        commitObject,\n        terminateCommit,\n      );\n\n      // Check if this is a sequencing call, and then call the necessary JS\n      if (\n        navRequest &&\n        result.navRequest !== undefined &&\n        result.navRequest !== \"\" &&\n        typeof result.navRequest === \"string\"\n      ) {\n        Function(`\"use strict\";(() => { ${result.navRequest} })()`)();\n      } else if (result?.navRequest && !navRequest) {\n        if (\n          typeof result.navRequest === \"object\" &&\n          Object.hasOwnProperty.call(result.navRequest, \"name\")\n        ) {\n          this.processListeners(result.navRequest.name as string, result.navRequest.data as string);\n        }\n      }\n\n      return result;\n    }\n\n    return {\n      result: global_constants.SCORM_TRUE,\n      errorCode: 0,\n    };\n  }\n\n  /**\n   * Configure sequencing based on provided settings\n   * @param {SequencingSettings} sequencingSettings - The sequencing settings\n   */\n  private configureSequencing(sequencingSettings: SequencingSettings): void {\n    // Configure activity tree\n    if (sequencingSettings.activityTree) {\n      this.configureActivityTree(sequencingSettings.activityTree);\n    }\n\n    // Configure sequencing rules\n    if (sequencingSettings.sequencingRules) {\n      this.configureSequencingRules(sequencingSettings.sequencingRules);\n    }\n\n    // Configure sequencing controls\n    if (sequencingSettings.sequencingControls) {\n      this.configureSequencingControls(sequencingSettings.sequencingControls);\n    }\n\n    // Configure rollup rules\n    if (sequencingSettings.rollupRules) {\n      this.configureRollupRules(sequencingSettings.rollupRules);\n    }\n  }\n\n  /**\n   * Configure activity tree based on provided settings\n   * @param {ActivitySettings} activityTreeSettings - The activity tree settings\n   */\n  private configureActivityTree(activityTreeSettings: ActivitySettings): void {\n    // Create root activity\n    const rootActivity = this.createActivity(activityTreeSettings);\n\n    // Create activity tree\n    const activityTree = this._sequencing.activityTree;\n    activityTree.root = rootActivity;\n\n    // Extract activity IDs for use as scoItemIds\n    this._extractedScoItemIds = this.extractActivityIds(rootActivity);\n  }\n\n  /**\n   * Extract all activity IDs from an activity and its children\n   * @param {Activity} activity - The activity to extract IDs from\n   * @return {string[]} - Array of activity IDs\n   */\n  private extractActivityIds(activity: Activity): string[] {\n    const ids = [activity.id];\n\n    // Recursively extract IDs from children\n    for (const child of activity.children) {\n      ids.push(...this.extractActivityIds(child));\n    }\n\n    return ids;\n  }\n\n  /**\n   * Create an activity from settings\n   * @param {ActivitySettings} activitySettings - The activity settings\n   * @return {Activity} - The created activity\n   */\n  private createActivity(activitySettings: ActivitySettings): Activity {\n    // Create activity\n    const activity = new Activity(activitySettings.id, activitySettings.title);\n\n    // Set activity properties\n    if (activitySettings.isVisible !== undefined) {\n      activity.isVisible = activitySettings.isVisible;\n    }\n    if (activitySettings.isActive !== undefined) {\n      activity.isActive = activitySettings.isActive;\n    }\n    if (activitySettings.isSuspended !== undefined) {\n      activity.isSuspended = activitySettings.isSuspended;\n    }\n    if (activitySettings.isCompleted !== undefined) {\n      activity.isCompleted = activitySettings.isCompleted;\n    }\n\n    // Create child activities\n    if (activitySettings.children) {\n      for (const childSettings of activitySettings.children) {\n        const childActivity = this.createActivity(childSettings);\n        activity.addChild(childActivity);\n      }\n    }\n\n    return activity;\n  }\n\n  /**\n   * Configure sequencing rules based on provided settings\n   * @param {SequencingRulesSettings} sequencingRulesSettings - The sequencing rules settings\n   */\n  private configureSequencingRules(sequencingRulesSettings: SequencingRulesSettings): void {\n    const sequencingRules = this._sequencing.sequencingRules;\n\n    // Configure pre-condition rules\n    if (sequencingRulesSettings.preConditionRules) {\n      for (const ruleSettings of sequencingRulesSettings.preConditionRules) {\n        const rule = this.createSequencingRule(ruleSettings);\n        sequencingRules.addPreConditionRule(rule);\n      }\n    }\n\n    // Configure exit condition rules\n    if (sequencingRulesSettings.exitConditionRules) {\n      for (const ruleSettings of sequencingRulesSettings.exitConditionRules) {\n        const rule = this.createSequencingRule(ruleSettings);\n        sequencingRules.addExitConditionRule(rule);\n      }\n    }\n\n    // Configure post-condition rules\n    if (sequencingRulesSettings.postConditionRules) {\n      for (const ruleSettings of sequencingRulesSettings.postConditionRules) {\n        const rule = this.createSequencingRule(ruleSettings);\n        sequencingRules.addPostConditionRule(rule);\n      }\n    }\n  }\n\n  /**\n   * Create a sequencing rule from settings\n   * @param {SequencingRuleSettings} ruleSettings - The sequencing rule settings\n   * @return {SequencingRule} - The created sequencing rule\n   */\n  private createSequencingRule(ruleSettings: SequencingRuleSettings): SequencingRule {\n    // Create rule\n    const rule = new SequencingRule(ruleSettings.action, ruleSettings.conditionCombination);\n\n    // Add conditions\n    for (const conditionSettings of ruleSettings.conditions) {\n      const condition = new RuleCondition(\n        conditionSettings.condition,\n        conditionSettings.operator,\n        new Map(Object.entries(conditionSettings.parameters || {})),\n      );\n      rule.addCondition(condition);\n    }\n\n    return rule;\n  }\n\n  /**\n   * Configure sequencing controls based on provided settings\n   * @param {SequencingControlsSettings} sequencingControlsSettings - The sequencing controls settings\n   */\n  private configureSequencingControls(\n    sequencingControlsSettings: SequencingControlsSettings,\n  ): void {\n    const sequencingControls = this._sequencing.sequencingControls;\n\n    // Set sequencing control properties\n    if (sequencingControlsSettings.enabled !== undefined) {\n      sequencingControls.enabled = sequencingControlsSettings.enabled;\n    }\n    if (sequencingControlsSettings.choiceExit !== undefined) {\n      sequencingControls.choiceExit = sequencingControlsSettings.choiceExit;\n    }\n    if (sequencingControlsSettings.flow !== undefined) {\n      sequencingControls.flow = sequencingControlsSettings.flow;\n    }\n    if (sequencingControlsSettings.forwardOnly !== undefined) {\n      sequencingControls.forwardOnly = sequencingControlsSettings.forwardOnly;\n    }\n    if (sequencingControlsSettings.useCurrentAttemptObjectiveInfo !== undefined) {\n      sequencingControls.useCurrentAttemptObjectiveInfo =\n        sequencingControlsSettings.useCurrentAttemptObjectiveInfo;\n    }\n    if (sequencingControlsSettings.useCurrentAttemptProgressInfo !== undefined) {\n      sequencingControls.useCurrentAttemptProgressInfo =\n        sequencingControlsSettings.useCurrentAttemptProgressInfo;\n    }\n    if (sequencingControlsSettings.preventActivation !== undefined) {\n      sequencingControls.preventActivation = sequencingControlsSettings.preventActivation;\n    }\n    if (sequencingControlsSettings.constrainChoice !== undefined) {\n      sequencingControls.constrainChoice = sequencingControlsSettings.constrainChoice;\n    }\n    if (sequencingControlsSettings.rollupObjectiveSatisfied !== undefined) {\n      sequencingControls.rollupObjectiveSatisfied =\n        sequencingControlsSettings.rollupObjectiveSatisfied;\n    }\n    if (sequencingControlsSettings.rollupProgressCompletion !== undefined) {\n      sequencingControls.rollupProgressCompletion =\n        sequencingControlsSettings.rollupProgressCompletion;\n    }\n    if (sequencingControlsSettings.objectiveMeasureWeight !== undefined) {\n      sequencingControls.objectiveMeasureWeight = sequencingControlsSettings.objectiveMeasureWeight;\n    }\n  }\n\n  /**\n   * Configure rollup rules based on provided settings\n   * @param {RollupRulesSettings} rollupRulesSettings - The rollup rules settings\n   */\n  private configureRollupRules(rollupRulesSettings: RollupRulesSettings): void {\n    const rollupRules = this._sequencing.rollupRules;\n\n    // Configure rollup rules\n    if (rollupRulesSettings.rules) {\n      for (const ruleSettings of rollupRulesSettings.rules) {\n        const rule = this.createRollupRule(ruleSettings);\n        rollupRules.addRule(rule);\n      }\n    }\n  }\n\n  /**\n   * Create a rollup rule from settings\n   * @param {RollupRuleSettings} ruleSettings - The rollup rule settings\n   * @return {RollupRule} - The created rollup rule\n   */\n  private createRollupRule(ruleSettings: RollupRuleSettings): RollupRule {\n    // Create rule\n    const rule = new RollupRule(\n      ruleSettings.action,\n      ruleSettings.consideration,\n      ruleSettings.minimumCount,\n      ruleSettings.minimumPercent,\n    );\n\n    // Add conditions\n    for (const conditionSettings of ruleSettings.conditions) {\n      const condition = new RollupCondition(\n        conditionSettings.condition,\n        new Map(Object.entries(conditionSettings.parameters || {})),\n      );\n      rule.addCondition(condition);\n    }\n\n    return rule;\n  }\n}\n\nexport default Scorm2004API;\n"],"names":["global_constants","scorm2004_constants","cmi_children","comments_children","score_children","objectives_children","correct_responses_children","student_preference_children","interactions_children","adl_data_children","error_descriptions","basicMessage","detailMessage","designations","D","H","M","S","getSecondsAsISODuration","memoize","seconds","duration","remainder","Object","entries","forEach","_ref","designationsKey","current_seconds","value","Math","floor","num","String","indexOf","parts","split","length","countDecimals","toFixed","includes","getDurationAsSeconds","durationRegex","RegExp","match","years","_","days","hours","minutes","exec","result","toString","flatten","data","recurse","cur","prop","Array","isArray","item","i","keys","filter","p","prototype","hasOwnProperty","call","isEmpty","stringMatches","str","tester","test","fn","keyFn","cache","Map","_len","arguments","args","_key","key","JSON","stringify","has","get","set","NAVBoolean","SuccessStatus","CompletionStatus","LogLevelEnum","DEBUG","INFO","WARN","ERROR","NONE","DefaultSettings","autocommit","autocommitSeconds","asyncCommit","sendFullCommit","lmsCommitUrl","dataCommitFormat","commitRequestDataType","autoProgress","logLevel","selfReportSessionTime","alwaysSendTotalTime","renderCommonCommitFields","strict_errors","xhrHeaders","xhrWithCredentials","fetchMode","useBeaconInsteadOfFetch","responseHandler","async","response","httpResult","json","text","responseText","parse","e","errorCode","status","requestHandler","commitObject","onLogMessage","defaultLogHandler","scoItemIds","scoItemIdValidator","globalObjectiveIds","enableOfflineSupport","courseId","syncOnInitialize","syncOnTerminate","maxSyncAttempts","messageLevel","logMessage","console","error","warn","info","debug","log","ScheduledCommit","constructor","API","when","callback","this","_cancelled","_API","_timeout","setTimeout","wrapper","bind","_callback","cancel","clearTimeout","isInitialized","commit","HttpService","settings","error_codes","processHttpRequest","url","params","apiLog","processListeners","undefined","genericError","GENERAL","_handleImmediateRequest","processedParams","performFetch","transformResponse","message","Error","stack","enhancedError","errorMessage","errorDetails","errorType","name","originalError","body","contentType","_prepareRequestBody","navigator","sendBeacon","Blob","type","then","catch","join","performBeacon","init","method","mode","headers","keepalive","credentials","fetch","beaconSuccess","Promise","resolve","ok","parseError","statusText","substring","_isSuccessResponse","updateSettings","EventService","listenerMap","listenerCount","parseListenerName","listenerName","listenerSplit","functionName","CMIElement","replace","on","listenerFunctions","listenerFunction","parsedListener","listeners","push","off","removeIndex","findIndex","obj","splice","delete","clear","newListeners","listener","listenerHasCMIElement","CMIElementsMatch","endsWith","prefix","slice","startsWith","reset","SerializationService","loadFromFlattenedJSON","setCMIValue","isNotInitialized","setStartingData","int_pattern","obj_pattern","interactions","objectives","others","intMatch","index","field","objMatch","sort","a","b","localeCompare","processItems","items","loadFromJSON","pattern","regex","from","m","unflatten","currentCMIElement","tempCMIElement","renderCMIToJSONString","cmi","k","v","renderCMIToJSONObject","getCommitObject","terminateCommit","renderCommitObject","renderCommitCMI","apiLogLevel","includeTotalTime","BaseScormValidationError","super","_errorCode","setPrototypeOf","ValidationError","detailedMessage","_detailedMessage","_errorMessage","LoggingService","_logLevel","_logHandler","getInstance","_instance","setLogLevel","level","getLogLevel","setLogHandler","handler","shouldLog","getNumericLevel","getLoggingService","ErrorHandlingService","errorCodes","getLmsErrorMessageDetails","loggingService","_lastErrorCode","_errorCodes","_apiLog","_getLmsErrorMessageDetails","_loggingService","lastErrorCode","throwSCORMError","errorNumber","formattedMessage","clearSCORMError","success","handleValueAccessException","returnValue","validationError","jsonError","OfflineStorageService","storeName","syncQueue","isOnline","onLine","syncInProgress","window","addEventListener","handleOnlineStatusChange","wasOnline","syncOfflineData","storeOffline","commitData","queueItem","id","Date","now","random","timestamp","syncAttempts","currentQueue","getFromStorage","saveToStorage","getOfflineData","remainingQueue","sendDataToLMS","processedData","isDeviceOnline","storedData","localStorage","getItem","setItem","hasPendingOfflineData","some","BaseCMI","cmi_element","jsonString","_initialized","_cmi_element","initialized","initialize","BaseRootCMI","start_time","_start_time","setStartTime","getTime","global_errors","INITIALIZATION_FAILED","INITIALIZED","TERMINATED","TERMINATION_FAILURE","TERMINATION_BEFORE_INIT","MULTIPLE_TERMINATION","RETRIEVE_BEFORE_INIT","RETRIEVE_AFTER_TERM","STORE_BEFORE_INIT","STORE_AFTER_TERM","COMMIT_BEFORE_INIT","COMMIT_AFTER_TERM","ARGUMENT_ERROR","CHILDREN_ERROR","COUNT_ERROR","GENERAL_GET_FAILURE","GENERAL_SET_FAILURE","GENERAL_COMMIT_FAILURE","UNDEFINED_DATA_MODEL","UNIMPLEMENTED_ELEMENT","VALUE_NOT_INITIALIZED","INVALID_SET_VALUE","READ_ONLY_ELEMENT","WRITE_ONLY_ELEMENT","TYPE_MISMATCH","VALUE_OUT_OF_RANGE","DEPENDENCY_NOT_ESTABLISHED","scorm12_errors","scorm2004_errors","MULTIPLE_TERMINATIONS","CMIArray","__children","children","_errorClass","errorClass","childArray","wipe","_children","_count","toJSON","BaseAPI","httpService","eventService","serializationService","cmiDataService","errorHandlingService","offlineStorageService","_settings","_courseId","TypeError","currentState","_error_codes","_httpService","_eventService","element","_serializationService","_errorHandlingService","detail","createErrorHandlingService","_offlineStorageService","offlineData","runtimeData","commonReset","clearScheduledCommit","startingData","callbackName","initializeMessage","terminationMessage","isTerminated","hasPendingData","syncSuccess","messageString","padEnd","formatMessage","previousSettings","terminate","checkTerminated","checkState","storeData","getValue","getCMIValue","setValue","commitCallback","scheduleCommit","getLastError","getErrorString","CMIErrorCode","getDiagnostic","beforeInitError","afterTermError","_errorNumber","_CMIElement","_value","_commonSetCMIValue","methodName","scorm2004","structure","refObject","foundFirstIndex","invalidErrorMessage","invalidErrorCode","idx","attribute","_checkObjectHasProperty","validateCorrectResponse","parseInt","isNaN","newChild","getChildElement","_commonGetCMIValue","uninitializedErrorMessage","_isTargetValid","getFlattenedCMI","Utilities","immediate","StringKeyMap","getOwnPropertyDescriptor","getPrototypeOf","Scorm2004ValidationError","checkValidFormat","regexPattern","allowEmptyString","formatRegex","matches","checkValidRange","rangePattern","ranges","check2004ValidFormat","check2004ValidRange","scorm12_regex","scorm2004_regex","CMILearnerPreference","_audio_level","_language","_delivery_speed","_audio_captioning","audio_level","language","delivery_speed","audio_captioning","LearnerResponses","format","max","delimiter","unique","choice","matching","format2","delimiter2","performance","sequencing","likert","numeric","other","CorrectResponses","duplicate","limit","delimiter3","CMIInteractions","CMIInteractionsObject","_id","_type","_timestamp","_weighting","_learner_response","_result","_latency","_description","correct_responses","weighting","learner_response","nodes","response_type","values","j","latency","description","CMIInteractionsObjectivesObject","stripBrackets","delim","escapeRegex","s","splitUnescaped","reDelim","splitRe","unescapeRe","map","part","CMIInteractionsCorrectResponsesObject","interactionType","_pattern","_interactionType","responseDef","trim","subDelim1","rawNodes","raw","delim1","Set","size","fmt1","fmt2","checkSingle","checkPair","delimBracketed","n","node","numDelim","nums","allParts","part1","part2","validatePattern","Scorm12ValidationError","check12ValidFormat","check12ValidRange","validationService","validateScore","decimalRegex","scoreRange","invalidTypeCode","invalidRangeCode","validateScorm12Audio","validateScorm12Language","validateScorm12Speed","validateScorm12Text","validateReadOnly","CMIScore","_raw","_min","__score_range","score_range","_max","__invalid_error_code","__invalid_type_code","__invalid_range_code","__decimal_regex","__error_class","min","getScoreObject","scoreObject","Number","parseFloat","Scorm2004CMIScore","_scaled","scaled","CMICommentsFromLMS","CMICommentsFromLearner","CMICommentsObject","readOnlyAfterInit","_comment","_location","_readOnlyAfterInit","comment","location","CMIObjectives","findObjectiveById","find","objective","findObjectiveByIndex","setObjectiveByIndex","CMIObjectivesObject","_success_status","_completion_status","_progress_measure","score","success_status","completion_status","progress_measure","CMIMetadata","__version","_version","CMILearner","_learner_id","_learner_name","learner_id","learner_name","CMIStatus","CMISession","_entry","_exit","_session_time","_total_time","entry","exit","session_time","total_time","getCurrentTotalTime","sessionTime","Util","first","second","CMIContent","_launch_data","_suspend_data","launch_data","suspend_data","CMISettings","_credit","_mode","_time_limit_action","_max_time_allowed","credit","time_limit_action","max_time_allowed","CMIThresholds","_scaled_passing_score","_completion_threshold","scaled_passing_score","completion_threshold","CMI","metadata","learner","session","content","thresholds","learner_preference","comments_from_learner","comments_from_lms","ADL","ADLData","_sequencing","nav","ADLNav","adlNav","_request","request_valid","ADLNavRequestValid","request","processNavigationRequest","ADLDataObject","_store","store","_continue","_previous","_choice","_jump","continue","previous","jump","RuleConditionOperator","RuleActionType","RuleCondition","condition","operator","parameters","_condition","_operator","_parameters","evaluate","activity","successStatus","objectiveMeasureStatus","greaterThanValue","objectiveNormalizedMeasure","lessThanValue","isCompleted","completionStatus","attemptCount","attemptLimit","evaluateTimeLimitExceeded","evaluateOutsideAvailableTimeRange","timeLimitDuration","durationMs","parseISO8601Duration","attemptExperiencedDuration","beginTime","beginTimeLimit","endTime","endTimeLimit","fromEntries","SequencingRule","action","conditionCombination","_conditions","_action","_conditionCombination","conditions","addCondition","removeCondition","every","SequencingRules","_preConditionRules","_exitConditionRules","_postConditionRules","preConditionRules","addPreConditionRule","rule","exitConditionRules","addExitConditionRule","postConditionRules","addPostConditionRule","evaluatePreConditionRules","evaluateExitConditionRules","evaluatePostConditionRules","RollupCondition","RollupRule","consideration","minimumCount","minimumPercent","_consideration","_minimumCount","_minimumPercent","matchingChildren","child","RollupRules","_rules","rules","addRule","removeRule","processRollup","getAvailableChildren","completionRollup","successRollup","sequencingControls","rollupObjectiveSatisfied","_objectiveRollupUsingMeasure","_defaultCompletionRollup","_defaultSuccessRollup","objectiveMeasureWeight","totalWeight","weightedSum","hasValidMeasures","childWeight","normalizedMeasure","scaledPassingScore","objectiveSatisfiedStatus","ValidLanguages","SelectionTiming","RandomizationTiming","SequencingControls","_enabled","_choiceExit","_flow","_forwardOnly","_useCurrentAttemptObjectiveInfo","_useCurrentAttemptProgressInfo","_preventActivation","_constrainChoice","_rollupObjectiveSatisfied","_rollupProgressCompletion","_objectiveMeasureWeight","_selectionTiming","_selectCount","_selectionCountStatus","_randomizeChildren","_randomizationTiming","_reorderChildren","enabled","choiceExit","flow","forwardOnly","useCurrentAttemptObjectiveInfo","useCurrentAttemptProgressInfo","preventActivation","constrainChoice","rollupProgressCompletion","isChoiceNavigationAllowed","isFlowNavigationAllowed","isForwardNavigationAllowed","isBackwardNavigationAllowed","selectionTiming","selectCount","selectionCountStatus","randomizeChildren","randomizationTiming","reorderChildren","Activity","title","_title","_parent","_isVisible","_isActive","_isSuspended","_isCompleted","_completionStatus","_successStatus","_attemptCount","_attemptCompletionAmount","_attemptAbsoluteDuration","_attemptExperiencedDuration","_activityAbsoluteDuration","_activityExperiencedDuration","_objectiveSatisfiedStatus","_objectiveMeasureStatus","_objectiveNormalizedMeasure","_scaledPassingScore","_isHiddenFromChoice","_isAvailable","_attemptLimit","_attemptAbsoluteDurationLimit","_activityAbsoluteDurationLimit","_timeLimitAction","_timeLimitDuration","_beginTimeLimit","_endTimeLimit","_processedChildren","_isNewAttempt","_sequencingControls","_sequencingRules","_rollupRules","addChild","removeChild","parent","isVisible","isActive","isSuspended","incrementAttemptCount","controls","isHiddenFromChoice","isAvailable","hasAttemptLimitExceeded","timeLimitAction","attemptAbsoluteDurationLimit","activityAbsoluteDurationLimit","activityExperiencedDuration","sequencingRules","rollupRules","setProcessedChildren","processedChildren","resetProcessedChildren","isNewAttempt","attemptCompletionAmount","attemptAbsoluteDuration","activityAbsoluteDuration","ActivityTree","_root","_currentActivity","_suspendedActivity","_activities","_addActivitiesToMap","root","currentActivity","suspendedActivity","getActivity","getAllActivities","getParent","getChildren","getSiblings","getNextSibling","useAvailableChildren","siblings","getPreviousSibling","getFirstChild","getLastChild","getCommonAncestor","activity1","activity2","path1","current","unshift","SelectionRandomization","selectChildrenProcess","NEVER","ONCE","selectedChildren","availableIndices","randomIndex","childIndex","randomizeChildrenProcess","randomizedChildren","tempI","tempJ","applySelectionAndRandomization","shouldApplySelection","shouldApplyRandomization","ON_EACH_NEW_ATTEMPT","isSelectionNeeded","isRandomizationNeeded","SequencingRequestType","DeliveryRequestType","SequencingResult","targetActivity","exception","deliveryRequest","SequencingProcess","activityTree","sequencingRequestProcess","targetActivityId","startSequencingRequestProcess","resumeAllSequencingRequestProcess","continueSequencingRequestProcess","previousSequencingRequestProcess","choiceSequencingRequestProcess","jumpSequencingRequestProcess","exitSequencingRequestProcess","exitAllSequencingRequestProcess","abandonSequencingRequestProcess","abandonAllSequencingRequestProcess","suspendAllSequencingRequestProcess","retrySequencingRequestProcess","retryAllSequencingRequestProcess","deliverableActivity","findFirstDeliverableActivity","checkActivityProcess","ensureSelectionAndRandomization","deliverable","flowResult","flowSubprocess","isActivityInTree","commonAncestor","findCommonAncestor","terminateDescendentAttemptsProcess","activityPath","pathActivity","flowActivityTraversalSubprocess","_direction","considerChildren","availableChildren","limitConditionsCheckProcess","preConditionResult","sequencingRulesCheckProcess","SKIP","DISABLED","skipExitRules","exitAction","exitActionRulesSubprocess","processDeferredExitAction","EXIT","EXIT_PARENT","EXIT_ALL","postConditionRulesSubprocess","postAction","RETRY","RETRY_ALL","CONTINUE","PREVIOUS","sequencingRulesCheckSubprocess","AND","OR","ancestors1","fromActivity","direction","candidateActivity","firstIteration","nextCandidate","flowTreeTraversalSubprocess","skipChildren","previousSibling","lastDescendant","lastChild","parentPreviousSibling","nextSibling","choiceFlowSubprocess","choiceFlowTreeTraversalSubprocess","choiceActivityTraversalSubprocess","Sequencing","_adlNav","_sequencingProcess","_lastSequencingResult","_activityTree","lastSequencingResult","requestType","START","RESUME_ALL","CHOICE","JUMP","ABANDON","ABANDON_ALL","SUSPEND_ALL","updateNavigationRequestValidity","DELIVER","continueResult","previousResult","_processRollupRecursive","getLastSequencingResult","getCurrentActivity","getRootActivity","mastery_override","_globalObjectives","_extractedScoItemIds","adl","configureSequencing","Initialize","lmsInitialize","Terminate","lmsFinish","GetValue","lmsGetValue","SetValue","lmsSetValue","Commit","lmsCommit","GetLastError","lmsGetLastError","GetErrorString","lmsGetErrorString","GetDiagnostic","lmsGetDiagnostic","version","globalObjectives","internalFinish","navActions","exitAll","abandon","abandonAll","choiceJumpRegex","target","groups","choice_target","jump_target","adlNavRequestRegex","element_base","objective_id","global_index","newGlobalObjective","global_element","createCorrectResponsesObject","interaction","checkDuplicateChoiceResponse","checkValidResponseType","interaction_type","checkCorrectResponseValue","interaction_count","pattern_index","checkDuplicatedPattern","errorDescription","correct_response","current_index","found","count","removeCorrectResponsePrefixes","seenOrder","seenCase","seenLang","prefixRegex","langMatches","lang","toLowerCase","replaceWithAnotherScormAPI","newAPI","cmiExport","flattened","totalTimeDuration","totalTimeSeconds","navRequest","Function","sequencingSettings","configureActivityTree","configureSequencingRules","configureSequencingControls","configureRollupRules","activityTreeSettings","rootActivity","createActivity","extractActivityIds","ids","activitySettings","childSettings","childActivity","sequencingRulesSettings","ruleSettings","createSequencingRule","conditionSettings","sequencingControlsSettings","rollupRulesSettings","createRollupRule"],"mappings":"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"}