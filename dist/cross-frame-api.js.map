{"version":3,"file":"cross-frame-api.js","sources":["../src/constants/error_codes.ts","../src/CrossFrameAPI.ts"],"sourcesContent":["export type ErrorCode = {\n  [key: string]: number;\n};\n\nexport const global_errors: ErrorCode = {\n  GENERAL: 101,\n  INITIALIZATION_FAILED: 101,\n  INITIALIZED: 101,\n  TERMINATED: 101,\n  TERMINATION_FAILURE: 101,\n  TERMINATION_BEFORE_INIT: 101,\n  MULTIPLE_TERMINATION: 101,\n  RETRIEVE_BEFORE_INIT: 101,\n  RETRIEVE_AFTER_TERM: 101,\n  STORE_BEFORE_INIT: 101,\n  STORE_AFTER_TERM: 101,\n  COMMIT_BEFORE_INIT: 101,\n  COMMIT_AFTER_TERM: 101,\n  ARGUMENT_ERROR: 101,\n  CHILDREN_ERROR: 101,\n  COUNT_ERROR: 101,\n  GENERAL_GET_FAILURE: 101,\n  GENERAL_SET_FAILURE: 101,\n  GENERAL_COMMIT_FAILURE: 101,\n  UNDEFINED_DATA_MODEL: 101,\n  UNIMPLEMENTED_ELEMENT: 101,\n  VALUE_NOT_INITIALIZED: 101,\n  INVALID_SET_VALUE: 101,\n  READ_ONLY_ELEMENT: 101,\n  WRITE_ONLY_ELEMENT: 101,\n  TYPE_MISMATCH: 101,\n  VALUE_OUT_OF_RANGE: 101,\n  DEPENDENCY_NOT_ESTABLISHED: 101,\n};\n\nexport const scorm12_errors: ErrorCode = {\n  ...global_errors,\n  RETRIEVE_BEFORE_INIT: 301,\n  STORE_BEFORE_INIT: 301,\n  COMMIT_BEFORE_INIT: 301,\n  ARGUMENT_ERROR: 201,\n  CHILDREN_ERROR: 202,\n  COUNT_ERROR: 203,\n  UNDEFINED_DATA_MODEL: 401,\n  UNIMPLEMENTED_ELEMENT: 401,\n  VALUE_NOT_INITIALIZED: 301,\n  INVALID_SET_VALUE: 402,\n  READ_ONLY_ELEMENT: 403,\n  WRITE_ONLY_ELEMENT: 404,\n  TYPE_MISMATCH: 405,\n  VALUE_OUT_OF_RANGE: 407,\n  DEPENDENCY_NOT_ESTABLISHED: 408,\n};\n\nexport const scorm2004_errors: ErrorCode = {\n  ...global_errors,\n  INITIALIZATION_FAILED: 102,\n  INITIALIZED: 103,\n  TERMINATED: 104,\n  TERMINATION_FAILURE: 111,\n  TERMINATION_BEFORE_INIT: 112,\n  MULTIPLE_TERMINATION: 113,\n  MULTIPLE_TERMINATIONS: 113,\n  RETRIEVE_BEFORE_INIT: 122,\n  RETRIEVE_AFTER_TERM: 123,\n  STORE_BEFORE_INIT: 132,\n  STORE_AFTER_TERM: 133,\n  COMMIT_BEFORE_INIT: 142,\n  COMMIT_AFTER_TERM: 143,\n  ARGUMENT_ERROR: 201,\n  GENERAL_GET_FAILURE: 301,\n  GENERAL_SET_FAILURE: 351,\n  GENERAL_COMMIT_FAILURE: 391,\n  UNDEFINED_DATA_MODEL: 401,\n  UNIMPLEMENTED_ELEMENT: 402,\n  VALUE_NOT_INITIALIZED: 403,\n  READ_ONLY_ELEMENT: 404,\n  WRITE_ONLY_ELEMENT: 405,\n  TYPE_MISMATCH: 406,\n  VALUE_OUT_OF_RANGE: 407,\n  DEPENDENCY_NOT_ESTABLISHED: 408,\n};\n","// src/CrossFrameAPI.ts\nimport { MessageData, MessageResponse } from \"./types/CrossFrame\";\nimport { global_errors } from \"./constants/error_codes\";\n\n/**\n * Client-side SCORM façade running in your content frame.\n * Returns cached/default values synchronously, then fires off an async\n * postMessage to the LMS frame to refresh cache and error state.\n */\nexport default class CrossFrameAPI {\n  private _cache = new Map<string, string>();\n  private _lastError = \"0\";\n  private _pending = new Map<\n    string,\n    {\n      resolve: (v: any) => void;\n      reject: (e: any) => void;\n      timer: ReturnType<typeof setTimeout>;\n    }\n  >();\n  private _counter = 0;\n  private readonly _origin: string;\n  private readonly _targetWindow: Window;\n\n  private _handler: ProxyHandler<CrossFrameAPI> = {\n    get: (target, prop, receiver) => {\n      // If it's an existing property/method, return it\n      if (typeof prop !== \"string\" || prop in target) {\n        const v = Reflect.get(target, prop, receiver);\n        return typeof v === \"function\" ? v.bind(target) : v;\n      }\n\n      // Otherwise treat prop as a SCORM call\n      const methodName = prop;\n      const isGet = methodName.endsWith(\"GetValue\");\n      const isSet = methodName.startsWith(\"LMSSet\") || methodName.endsWith(\"SetValue\");\n      const isInit = methodName === \"Initialize\" || methodName === \"LMSInitialize\";\n      const isFinish = methodName === \"Terminate\" || methodName === \"LMSFinish\";\n      const isCommit = methodName === \"Commit\" || methodName === \"LMSCommit\";\n      const isErrorString = methodName === \"GetErrorString\" || methodName === \"LMSGetErrorString\";\n      const isDiagnostic = methodName === \"GetDiagnostic\" || methodName === \"LMSGetDiagnostic\";\n\n      return (...args: any[]): string => {\n        // Synchronous cache update for setter calls\n        if (isSet && args.length >= 2) {\n          target._cache.set(args[0], String(args[1]));\n          target._lastError = \"0\";\n        }\n\n        // Fire off async postMessage to refresh cache and error\n        target\n          ._post(methodName, args)\n          .then((res) => {\n            if (isGet && args.length >= 1) {\n              target._cache.set(args[0], String(res));\n              target._lastError = \"0\";\n            }\n            if (isErrorString && args.length >= 1) {\n              const code = String(args[0]);\n              target._cache.set(`error_${code}`, String(res));\n            }\n            if (isDiagnostic && args.length >= 1) {\n              const code = String(args[0]);\n              target._cache.set(`diag_${code}`, String(res));\n            }\n            if (methodName === \"GetLastError\" || methodName === \"LMSGetLastError\") {\n              target._lastError = String(res);\n            }\n          })\n          .catch((err) => target._capture(methodName, err));\n\n        // Return synchronously\n        if (isGet && args.length >= 1) {\n          return target._cache.get(args[0]) ?? \"\";\n        }\n        if (isErrorString && args.length >= 1) {\n          const code = String(args[0]);\n          return target._cache.get(`error_${code}`) ?? \"\";\n        }\n        if (isDiagnostic && args.length >= 1) {\n          const code = String(args[0]);\n          return target._cache.get(`diag_${code}`) ?? \"\";\n        }\n        if (isInit || isFinish || isCommit || isSet) {\n          // Immediately return “true”\n          const result = \"true\";\n          // Then warm cache:\n          target\n            ._post(\"getFlattenedCMI\", [])\n            .then((all: Record<string, string>) => {\n              Object.entries(all).forEach(([key, val]) => {\n                target._cache.set(key, val);\n              });\n              // reset error\n              target._lastError = \"0\";\n            })\n            .catch((err) => target._capture(\"getFlattenedCMI\", err));\n          return result;\n        }\n        if (methodName === \"GetLastError\" || methodName === \"LMSGetLastError\") {\n          return target._lastError;\n        }\n        return \"\";\n      };\n    },\n  };\n\n  constructor(targetOrigin: string = \"*\", targetWindow: Window = window.parent) {\n    this._origin = targetOrigin;\n    this._targetWindow = targetWindow;\n    window.addEventListener(\"message\", this._onMessage.bind(this));\n    return new Proxy(this, this._handler);\n  }\n\n  /** Send a message to the LMS frame and return a promise for its response */\n  private _post(method: string, params: any[]): Promise<any> {\n    const messageId = `cfapi-${Date.now()}-${this._counter++}`;\n\n    // Deep‐clean params of non-cloneables (e.g. functions)\n    const safeParams = params.map((p) => {\n      if (typeof p === \"function\") {\n        console.warn(\"Dropping function param when posting SCORM call:\", method);\n        return undefined;\n      }\n      return p;\n    });\n\n    return new Promise((resolve, reject) => {\n      const timer = setTimeout(() => {\n        if (this._pending.has(messageId)) {\n          this._pending.delete(messageId);\n          reject(new Error(`Timeout calling ${method}`));\n        }\n      }, 5000);\n\n      this._pending.set(messageId, { resolve, reject, timer });\n      const msg: MessageData = { messageId, method, params: safeParams };\n      this._targetWindow.postMessage(msg, this._origin);\n    });\n  }\n\n  /** Handle incoming postMessage responses from the LMS frame */\n  private _onMessage(ev: MessageEvent) {\n    // Validate the message origin and source unless all origins are allowed\n    if (this._origin !== \"*\" && ev.origin !== this._origin) {\n      return;\n    }\n    if (ev.source && ev.source !== this._targetWindow) {\n      return;\n    }\n    const data = ev.data as MessageResponse;\n    if (!data?.messageId) return;\n    const pending = this._pending.get(data.messageId);\n    if (!pending) return;\n    clearTimeout(pending.timer);\n    this._pending.delete(data.messageId);\n    if (data.error) pending.reject(data.error);\n    else pending.resolve(data.result);\n  }\n\n  /** Capture and cache SCORM errors */\n  private _capture(method: string, err: any) {\n    console.error(`CrossFrameAPI ${method} error:`, err);\n    const match = /\\b(\\d{3})\\b/.exec(err.message);\n    const code = match ? match[1] : String(global_errors.GENERAL);\n    this._lastError = code as string;\n    this._cache.set(`error_${code}`, err.message);\n  }\n}\n"],"names":["global_errors","GENERAL","CrossFrameAPI","constructor","targetOrigin","arguments","length","undefined","targetWindow","window","parent","_cache","Map","_lastError","_pending","_counter","_handler","get","target","prop","receiver","v","Reflect","bind","methodName","isGet","endsWith","isSet","startsWith","isInit","isFinish","isCommit","isErrorString","isDiagnostic","_len","args","Array","_key","set","String","_post","then","res","code","catch","err","_capture","result","all","Object","entries","forEach","_ref","key","val","_origin","_targetWindow","addEventListener","_onMessage","Proxy","method","params","messageId","Date","now","safeParams","map","p","console","warn","Promise","resolve","reject","timer","setTimeout","has","delete","Error","msg","postMessage","ev","origin","source","data","pending","clearTimeout","error","match","exec","message"],"mappings":"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"}