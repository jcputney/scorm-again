{"version":3,"file":"cross-frame-api.js","sources":["../src/constants/error_codes.ts","../src/CrossFrameAPI.ts"],"sourcesContent":["export type ErrorCode = {\n  [key: string]: number;\n};\n\nexport const global_errors: ErrorCode = {\n  GENERAL: 101,\n  INITIALIZATION_FAILED: 101,\n  INITIALIZED: 101,\n  TERMINATED: 101,\n  TERMINATION_FAILURE: 101,\n  TERMINATION_BEFORE_INIT: 101,\n  MULTIPLE_TERMINATION: 101,\n  RETRIEVE_BEFORE_INIT: 101,\n  RETRIEVE_AFTER_TERM: 101,\n  STORE_BEFORE_INIT: 101,\n  STORE_AFTER_TERM: 101,\n  COMMIT_BEFORE_INIT: 101,\n  COMMIT_AFTER_TERM: 101,\n  ARGUMENT_ERROR: 101,\n  CHILDREN_ERROR: 101,\n  COUNT_ERROR: 101,\n  GENERAL_GET_FAILURE: 101,\n  GENERAL_SET_FAILURE: 101,\n  GENERAL_COMMIT_FAILURE: 101,\n  UNDEFINED_DATA_MODEL: 101,\n  UNIMPLEMENTED_ELEMENT: 101,\n  VALUE_NOT_INITIALIZED: 101,\n  INVALID_SET_VALUE: 101,\n  READ_ONLY_ELEMENT: 101,\n  WRITE_ONLY_ELEMENT: 101,\n  TYPE_MISMATCH: 101,\n  VALUE_OUT_OF_RANGE: 101,\n  DEPENDENCY_NOT_ESTABLISHED: 101,\n};\n\nexport const scorm12_errors: ErrorCode = {\n  ...global_errors,\n  RETRIEVE_BEFORE_INIT: 301,\n  STORE_BEFORE_INIT: 301,\n  COMMIT_BEFORE_INIT: 301,\n  ARGUMENT_ERROR: 201,\n  CHILDREN_ERROR: 202,\n  COUNT_ERROR: 203,\n  UNDEFINED_DATA_MODEL: 401,\n  UNIMPLEMENTED_ELEMENT: 401,\n  VALUE_NOT_INITIALIZED: 301,\n  INVALID_SET_VALUE: 402,\n  READ_ONLY_ELEMENT: 403,\n  WRITE_ONLY_ELEMENT: 404,\n  TYPE_MISMATCH: 405,\n  VALUE_OUT_OF_RANGE: 407,\n  DEPENDENCY_NOT_ESTABLISHED: 408,\n};\n\nexport const scorm2004_errors: ErrorCode = {\n  ...global_errors,\n  INITIALIZATION_FAILED: 102,\n  INITIALIZED: 103,\n  TERMINATED: 104,\n  TERMINATION_FAILURE: 111,\n  TERMINATION_BEFORE_INIT: 112,\n  MULTIPLE_TERMINATION: 113,\n  MULTIPLE_TERMINATIONS: 113,\n  RETRIEVE_BEFORE_INIT: 122,\n  RETRIEVE_AFTER_TERM: 123,\n  STORE_BEFORE_INIT: 132,\n  STORE_AFTER_TERM: 133,\n  COMMIT_BEFORE_INIT: 142,\n  COMMIT_AFTER_TERM: 143,\n  ARGUMENT_ERROR: 201,\n  GENERAL_GET_FAILURE: 301,\n  GENERAL_SET_FAILURE: 351,\n  GENERAL_COMMIT_FAILURE: 391,\n  UNDEFINED_DATA_MODEL: 401,\n  UNIMPLEMENTED_ELEMENT: 402,\n  VALUE_NOT_INITIALIZED: 403,\n  READ_ONLY_ELEMENT: 404,\n  WRITE_ONLY_ELEMENT: 405,\n  TYPE_MISMATCH: 406,\n  VALUE_OUT_OF_RANGE: 407,\n  DEPENDENCY_NOT_ESTABLISHED: 408,\n};\n","// src/CrossFrameAPI.ts\nimport { MessageData, MessageResponse } from \"./types/CrossFrame\";\nimport { global_errors } from \"./constants/error_codes\";\n\n/**\n * Client-side SCORM façade running in your content frame.\n * Returns cached/default values synchronously, then fires off an async\n * postMessage to the LMS frame to refresh cache and error state.\n */\nexport default class CrossFrameAPI {\n  private _cache = new Map<string, string>();\n  private _lastError = \"0\";\n  private _pending = new Map<\n    string,\n    {\n      resolve: (v: any) => void;\n      reject: (e: any) => void;\n      timer: ReturnType<typeof setTimeout>;\n    }\n  >();\n  private _counter = 0;\n  private readonly _origin: string;\n  private readonly _targetWindow: Window;\n\n  private _handler: ProxyHandler<CrossFrameAPI> = {\n    get: (target, prop, receiver) => {\n      // If it's an existing property/method, return it\n      if (typeof prop !== \"string\" || prop in target) {\n        const v = Reflect.get(target, prop, receiver);\n        return typeof v === \"function\" ? v.bind(target) : v;\n      }\n\n      // Otherwise treat prop as a SCORM call\n      const methodName = prop;\n      const isGet = methodName.endsWith(\"GetValue\");\n      const isSet = methodName.startsWith(\"LMSSet\") || methodName.endsWith(\"SetValue\");\n      const isInit = methodName === \"Initialize\" || methodName === \"LMSInitialize\";\n      const isFinish = methodName === \"Terminate\" || methodName === \"LMSFinish\";\n      const isCommit = methodName === \"Commit\" || methodName === \"LMSCommit\";\n      const isErrorString = methodName === \"GetErrorString\" || methodName === \"LMSGetErrorString\";\n      const isDiagnostic = methodName === \"GetDiagnostic\" || methodName === \"LMSGetDiagnostic\";\n\n      return (...args: any[]): string => {\n        // Synchronous cache update for setter calls\n        if (isSet && args.length >= 2) {\n          target._cache.set(args[0], String(args[1]));\n          target._lastError = \"0\";\n        }\n\n        // Fire off async postMessage to refresh cache and error\n        target\n          ._post(methodName, args)\n          .then((res) => {\n            if (isGet && args.length >= 1) {\n              target._cache.set(args[0], String(res));\n              target._lastError = \"0\";\n            }\n            if (isErrorString && args.length >= 1) {\n              const code = String(args[0]);\n              target._cache.set(`error_${code}`, String(res));\n            }\n            if (isDiagnostic && args.length >= 1) {\n              const code = String(args[0]);\n              target._cache.set(`diag_${code}`, String(res));\n            }\n            if (methodName === \"GetLastError\" || methodName === \"LMSGetLastError\") {\n              target._lastError = String(res);\n            }\n          })\n          .catch((err) => target._capture(methodName, err));\n\n        // Return synchronously\n        if (isGet && args.length >= 1) {\n          return target._cache.get(args[0]) ?? \"\";\n        }\n        if (isErrorString && args.length >= 1) {\n          const code = String(args[0]);\n          return target._cache.get(`error_${code}`) ?? \"\";\n        }\n        if (isDiagnostic && args.length >= 1) {\n          const code = String(args[0]);\n          return target._cache.get(`diag_${code}`) ?? \"\";\n        }\n        if (isInit || isFinish || isCommit || isSet) {\n          // Immediately return “true”\n          const result = \"true\";\n          // Then warm cache:\n          target\n            ._post(\"getFlattenedCMI\", [])\n            .then((all: Record<string, string>) => {\n              Object.entries(all).forEach(([key, val]) => {\n                target._cache.set(key, val);\n              });\n              // reset error\n              target._lastError = \"0\";\n            })\n            .catch((err) => target._capture(\"getFlattenedCMI\", err));\n          return result;\n        }\n        if (methodName === \"GetLastError\" || methodName === \"LMSGetLastError\") {\n          return target._lastError;\n        }\n        return \"\";\n      };\n    },\n  };\n\n  constructor(targetOrigin: string = \"*\", targetWindow: Window = window.parent) {\n    this._origin = targetOrigin;\n    this._targetWindow = targetWindow;\n    window.addEventListener(\"message\", this._onMessage.bind(this));\n    return new Proxy(this, this._handler);\n  }\n\n  /** Send a message to the LMS frame and return a promise for its response */\n  private _post(method: string, params: any[]): Promise<any> {\n    const messageId = `cfapi-${Date.now()}-${this._counter++}`;\n\n    // Deep‐clean params of non-cloneables (e.g. functions)\n    const safeParams = params.map((p) => {\n      if (typeof p === \"function\") {\n        console.warn(\"Dropping function param when posting SCORM call:\", method);\n        return undefined;\n      }\n      return p;\n    });\n\n    return new Promise((resolve, reject) => {\n      const timer = setTimeout(() => {\n        if (this._pending.has(messageId)) {\n          this._pending.delete(messageId);\n          reject(new Error(`Timeout calling ${method}`));\n        }\n      }, 5000);\n\n      this._pending.set(messageId, { resolve, reject, timer });\n      const msg: MessageData = { messageId, method, params: safeParams };\n      this._targetWindow.postMessage(msg, this._origin);\n    });\n  }\n\n  /** Handle incoming postMessage responses from the LMS frame */\n  private _onMessage(ev: MessageEvent) {\n    // Validate the message origin and source unless all origins are allowed\n    if (this._origin !== \"*\" && ev.origin !== this._origin) {\n      return;\n    }\n    if (ev.source && ev.source !== this._targetWindow) {\n      return;\n    }\n    const data = ev.data as MessageResponse;\n    if (!data?.messageId) return;\n    const pending = this._pending.get(data.messageId);\n    if (!pending) return;\n    clearTimeout(pending.timer);\n    this._pending.delete(data.messageId);\n    if (data.error) pending.reject(data.error);\n    else pending.resolve(data.result);\n  }\n\n  /** Capture and cache SCORM errors */\n  private _capture(method: string, err: any) {\n    console.error(`CrossFrameAPI ${method} error:`, err);\n    const match = /\\b(\\d{3})\\b/.exec(err.message);\n    const code = match ? match[1] : String(global_errors.GENERAL);\n    this._lastError = code as string;\n    this._cache.set(`error_${code}`, err.message);\n  }\n}\n"],"names":["global_errors","GENERAL","CrossFrameAPI","constructor","targetOrigin","arguments","length","undefined","targetWindow","window","parent","_cache","Map","_lastError","_pending","_counter","_handler","get","target","prop","receiver","v","Reflect","bind","methodName","isGet","endsWith","isSet","startsWith","isInit","isFinish","isCommit","isErrorString","isDiagnostic","_len","args","Array","_key","set","String","_post","then","res","code","catch","err","_capture","result","all","Object","entries","forEach","_ref","key","val","_origin","_targetWindow","addEventListener","_onMessage","Proxy","method","params","messageId","Date","now","safeParams","map","p","console","warn","Promise","resolve","reject","timer","setTimeout","has","delete","Error","msg","postMessage","ev","origin","source","data","pending","clearTimeout","error","match","exec","message"],"mappings":"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"}