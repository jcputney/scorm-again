{"version":3,"file":"cross-frame-api.js","sources":["../src/constants/error_codes.ts","../src/CrossFrameAPI.ts"],"sourcesContent":["export type ErrorCode = {\n  [key: string]: number;\n};\n\nexport const global_errors: ErrorCode = {\n  GENERAL: 101,\n  INITIALIZATION_FAILED: 101,\n  INITIALIZED: 101,\n  TERMINATED: 101,\n  TERMINATION_FAILURE: 101,\n  TERMINATION_BEFORE_INIT: 101,\n  MULTIPLE_TERMINATION: 101,\n  RETRIEVE_BEFORE_INIT: 101,\n  RETRIEVE_AFTER_TERM: 101,\n  STORE_BEFORE_INIT: 101,\n  STORE_AFTER_TERM: 101,\n  COMMIT_BEFORE_INIT: 101,\n  COMMIT_AFTER_TERM: 101,\n  ARGUMENT_ERROR: 101,\n  CHILDREN_ERROR: 101,\n  COUNT_ERROR: 101,\n  GENERAL_GET_FAILURE: 101,\n  GENERAL_SET_FAILURE: 101,\n  GENERAL_COMMIT_FAILURE: 101,\n  UNDEFINED_DATA_MODEL: 101,\n  UNIMPLEMENTED_ELEMENT: 101,\n  VALUE_NOT_INITIALIZED: 101,\n  INVALID_SET_VALUE: 101,\n  READ_ONLY_ELEMENT: 101,\n  WRITE_ONLY_ELEMENT: 101,\n  TYPE_MISMATCH: 101,\n  VALUE_OUT_OF_RANGE: 101,\n  DEPENDENCY_NOT_ESTABLISHED: 101,\n};\n\nexport const scorm12_errors: ErrorCode = {\n  ...global_errors,\n  RETRIEVE_BEFORE_INIT: 301,\n  STORE_BEFORE_INIT: 301,\n  COMMIT_BEFORE_INIT: 301,\n  ARGUMENT_ERROR: 201,\n  CHILDREN_ERROR: 202,\n  COUNT_ERROR: 203,\n  UNDEFINED_DATA_MODEL: 401,\n  UNIMPLEMENTED_ELEMENT: 401,\n  VALUE_NOT_INITIALIZED: 301,\n  INVALID_SET_VALUE: 402,\n  READ_ONLY_ELEMENT: 403,\n  WRITE_ONLY_ELEMENT: 404,\n  TYPE_MISMATCH: 405,\n  VALUE_OUT_OF_RANGE: 407,\n  DEPENDENCY_NOT_ESTABLISHED: 408,\n};\n\nexport const scorm2004_errors: ErrorCode = {\n  ...global_errors,\n  INITIALIZATION_FAILED: 102,\n  INITIALIZED: 103,\n  TERMINATED: 104,\n  TERMINATION_FAILURE: 111,\n  TERMINATION_BEFORE_INIT: 112,\n  MULTIPLE_TERMINATIONS: 113,\n  RETRIEVE_BEFORE_INIT: 122,\n  RETRIEVE_AFTER_TERM: 123,\n  STORE_BEFORE_INIT: 132,\n  STORE_AFTER_TERM: 133,\n  COMMIT_BEFORE_INIT: 142,\n  COMMIT_AFTER_TERM: 143,\n  ARGUMENT_ERROR: 201,\n  GENERAL_GET_FAILURE: 301,\n  GENERAL_SET_FAILURE: 351,\n  GENERAL_COMMIT_FAILURE: 391,\n  UNDEFINED_DATA_MODEL: 401,\n  UNIMPLEMENTED_ELEMENT: 402,\n  VALUE_NOT_INITIALIZED: 403,\n  READ_ONLY_ELEMENT: 404,\n  WRITE_ONLY_ELEMENT: 405,\n  TYPE_MISMATCH: 406,\n  VALUE_OUT_OF_RANGE: 407,\n  DEPENDENCY_NOT_ESTABLISHED: 408,\n};\n","// src/CrossFrameAPI.ts\nimport { MessageData, MessageResponse } from \"./types/CrossFrame\";\nimport { global_errors } from \"./constants/error_codes\";\n\n/**\n * Client-side SCORM façade running in your content frame.\n * Returns cached/default values synchronously, then fires off an async\n * postMessage to the LMS frame to refresh cache and error state.\n */\nexport default class CrossFrameAPI {\n  private _cache = new Map<string, string>();\n  private _lastError = \"0\";\n  private _pending = new Map<string, { resolve: (v: any) => void; reject: (e: any) => void }>();\n  private _counter = 0;\n  private readonly _origin: string;\n\n  private _handler: ProxyHandler<CrossFrameAPI> = {\n    get: (target, prop, receiver) => {\n      // If it's an existing property/method, return it\n      if (typeof prop !== \"string\" || prop in target) {\n        const v = Reflect.get(target, prop, receiver);\n        return typeof v === \"function\" ? v.bind(target) : v;\n      }\n\n      // Otherwise treat prop as a SCORM call\n      const methodName = prop;\n      const isGet = methodName.endsWith(\"GetValue\");\n      const isSet = methodName.startsWith(\"LMSSet\") || methodName.endsWith(\"SetValue\");\n      const isInit = methodName === \"Initialize\" || methodName === \"LMSInitialize\";\n      const isFinish = methodName === \"Terminate\" || methodName === \"LMSFinish\";\n      const isCommit = methodName === \"Commit\" || methodName === \"LMSCommit\";\n\n      return (...args: any[]): string => {\n        // Synchronous cache update for setter calls\n        if (isSet && args.length >= 2) {\n          target._cache.set(args[0], String(args[1]));\n          target._lastError = \"0\";\n        }\n\n        // Fire off async postMessage to refresh cache & error\n        target\n          ._post(methodName, args)\n          .then((res) => {\n            if (isGet && args.length >= 1) {\n              target._cache.set(args[0], String(res));\n              target._lastError = \"0\";\n            }\n            if (methodName === \"GetLastError\" || methodName === \"LMSGetLastError\") {\n              target._lastError = String(res);\n            }\n          })\n          .catch((err) => target._capture(methodName, err));\n\n        // Return synchronously\n        if (isGet && args.length >= 1) {\n          return target._cache.get(args[0]) ?? \"\";\n        }\n        if (isInit || isFinish || isCommit || isSet) {\n          // Immediately return “true”\n          const result = \"true\";\n          // Then warm cache:\n          target\n            ._post(\"getFlattenedCMI\", [])\n            .then((all: Record<string, string>) => {\n              Object.entries(all).forEach(([key, val]) => {\n                target._cache.set(key, val);\n              });\n              // reset error\n              target._lastError = \"0\";\n            })\n            .catch((err) => target._capture(\"getFlattenedCMI\", err));\n          return result;\n        }\n        if (methodName === \"GetLastError\" || methodName === \"LMSGetLastError\") {\n          return target._lastError;\n        }\n        return \"\";\n      };\n    },\n  };\n\n  constructor(targetOrigin: string = \"*\") {\n    this._origin = targetOrigin;\n    window.addEventListener(\"message\", this._onMessage.bind(this));\n    return new Proxy(this, this._handler);\n  }\n\n  /** Send a message to the LMS frame and return a promise for its response */\n  private _post(method: string, params: any[]): Promise<any> {\n    const messageId = `cfapi-${Date.now()}-${this._counter++}`;\n\n    // Deep‐clean params of non-cloneables (e.g. functions)\n    const safeParams = params.map((p) => {\n      if (typeof p === \"function\") {\n        console.warn(\"Dropping function param when posting SCORM call:\", method);\n        return undefined;\n      }\n      return p;\n    });\n\n    return new Promise((resolve, reject) => {\n      this._pending.set(messageId, { resolve, reject });\n      const msg: MessageData = { messageId, method, params: safeParams };\n      window.parent.postMessage(msg, this._origin);\n      // Optional timeout\n      setTimeout(() => {\n        if (this._pending.has(messageId)) {\n          this._pending.delete(messageId);\n          reject(new Error(`Timeout calling ${method}`));\n        }\n      }, 5000);\n    });\n  }\n\n  /** Handle incoming postMessage responses from the LMS frame */\n  private _onMessage(ev: MessageEvent) {\n    const data = ev.data as MessageResponse;\n    if (!data?.messageId) return;\n    const pending = this._pending.get(data.messageId);\n    if (!pending) return;\n    this._pending.delete(data.messageId);\n    if (data.error) pending.reject(data.error);\n    else pending.resolve(data.result);\n  }\n\n  /** Capture and cache SCORM errors */\n  private _capture(method: string, err: any) {\n    console.error(`CrossFrameAPI ${method} error:`, err);\n    const code = (/(\\d{3})/.exec(err.message) || [])[1] || global_errors.GENERAL;\n    this._lastError = String(code);\n    this._cache.set(`error_${code}`, err.message);\n  }\n}\n"],"names":["global_errors","GENERAL","CrossFrameAPI","constructor","targetOrigin","_cache","Map","_lastError","_pending","_counter","_handler","get","target","prop","receiver","v","Reflect","bind","methodName","isGet","endsWith","isSet","startsWith","isInit","isFinish","isCommit","_len","arguments","length","args","Array","_key","set","String","_post","then","res","catch","err","_capture","result","all","Object","entries","forEach","_ref","key","val","_origin","window","addEventListener","_onMessage","Proxy","method","params","messageId","Date","now","safeParams","map","p","console","warn","Promise","resolve","reject","msg","parent","postMessage","setTimeout","has","delete","Error","ev","data","pending","error","code","exec","message"],"mappings":"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"}