name: Release

on:
  release:
    types: [ created ]

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    steps:
      # Checkout repository
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Set up Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: 20
          registry-url: 'https://registry.npmjs.org'
          cache: "npm"

      # Install dependencies
      - name: Install dependencies
        run: npm install

      # Run tests
      - name: Run tests
        run: |
          npm run test:min
          npm run test:integration:ci

      # Build the project
      - name: Build project
        run: |
          npm run build:all

      # Publish to npm
      - name: Publish to npm
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}

      # Create GitHub release
      - name: Update GitHub release
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const fs = require('fs');
            const packageJson = JSON.parse(fs.readFileSync('./package.json', 'utf8'));
            const version = packageJson.version;

            // Get the release
            const release = await github.rest.repos.getRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: context.payload.release.id
            });

            // Update release body with changelog if it exists
            let body = release.data.body || '';
            if (fs.existsSync('./CHANGELOG.md')) {
              const changelog = fs.readFileSync('./CHANGELOG.md', 'utf8');
              const versionHeader = `## [${version}]`;
              const versionRegex = new RegExp(`${versionHeader}[\\s\\S]*?(?=## \\[|$)`, 'm');
              const match = changelog.match(versionRegex);

              if (match && match[0]) {
                body += '\n\n' + match[0].trim();
              }
            }

            // Update the release
            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: context.payload.release.id,
              body: body
            });
